Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/551100kk.0.cpp file...

identifier
include
symbol
<
identifier
bits
symbol
/
identifier
stdc
symbol
+
symbol
+
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
keyword
char
identifier
s
symbol
[
integerConstant
1005
symbol
]
symbol
;
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
symbol
{
identifier
NewLine
identifier
freopen
symbol
(
stringConstant
A-large.in
symbol
,
stringConstant
r
symbol
,
identifier
stdin
symbol
)
symbol
;
identifier
NewLine
identifier
freopen
symbol
(
stringConstant
out.txt
symbol
,
stringConstant
w
symbol
,
identifier
stdout
symbol
)
symbol
;
identifier
NewLine
keyword
int
identifier
t
symbol
,
identifier
n
symbol
,
identifier
i
symbol
,
identifier
j
symbol
,
identifier
x
symbol
,
identifier
y
symbol
,
identifier
C
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
t
symbol
)
symbol
;
identifier
NewLine
keyword
while
symbol
(
identifier
t
symbol
-
symbol
-
symbol
)
symbol
{
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d%s
symbol
,
symbol
&
identifier
n
symbol
,
identifier
s
symbol
)
symbol
;
identifier
NewLine
keyword
int
identifier
tmp
symbol
=
integerConstant
0
symbol
,
identifier
ans
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
for
symbol
(
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
symbol
=
identifier
n
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
tmp
symbol
<
identifier
i
symbol
)
symbol
{
identifier
NewLine
identifier
ans
symbol
+
symbol
=
identifier
i
symbol
-
identifier
tmp
symbol
;
identifier
NewLine
identifier
tmp
symbol
=
identifier
i
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
tmp
symbol
+
symbol
=
identifier
s
symbol
[
identifier
i
symbol
]
symbol
-
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: %d\n
symbol
,
symbol
+
symbol
+
identifier
C
symbol
,
identifier
ans
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/551100kk.1.cpp file...

identifier
include
symbol
<
identifier
bits
symbol
/
identifier
stdc
symbol
+
symbol
+
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
keyword
int
identifier
s
symbol
[
integerConstant
1005
symbol
]
symbol
;
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
symbol
{
identifier
NewLine
identifier
freopen
symbol
(
stringConstant
B-large.in
symbol
,
stringConstant
r
symbol
,
identifier
stdin
symbol
)
symbol
;
identifier
NewLine
identifier
freopen
symbol
(
stringConstant
out.txt
symbol
,
stringConstant
w
symbol
,
identifier
stdout
symbol
)
symbol
;
identifier
NewLine
keyword
int
identifier
i
symbol
,
identifier
j
symbol
,
identifier
k
symbol
,
identifier
n
symbol
,
identifier
m
symbol
,
identifier
t
symbol
,
identifier
x
symbol
,
identifier
y
symbol
,
identifier
C
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
t
symbol
)
symbol
;
identifier
NewLine
keyword
while
symbol
(
identifier
t
symbol
-
symbol
-
symbol
)
symbol
{
identifier
NewLine
identifier
m
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
keyword
int
identifier
ans
symbol
=
integerConstant
1000000000
symbol
,
identifier
tmp
symbol
;
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
n
symbol
)
symbol
;
identifier
NewLine
identifier
for
symbol
(
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
n
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
s
symbol
[
identifier
i
symbol
]
symbol
)
symbol
;
identifier
NewLine
identifier
m
symbol
=
identifier
max
symbol
(
identifier
m
symbol
,
identifier
s
symbol
[
identifier
i
symbol
]
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
for
symbol
(
identifier
k
symbol
=
integerConstant
1
symbol
;
identifier
k
symbol
<
symbol
=
identifier
m
symbol
;
identifier
k
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
tmp
symbol
=
identifier
k
symbol
;
identifier
NewLine
identifier
for
symbol
(
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
n
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
tmp
symbol
+
symbol
=
symbol
(
identifier
s
symbol
[
identifier
i
symbol
]
symbol
-
integerConstant
1
symbol
)
symbol
/
identifier
k
symbol
;
identifier
NewLine
identifier
ans
symbol
=
identifier
min
symbol
(
identifier
ans
symbol
,
identifier
tmp
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: %d\n
symbol
,
symbol
+
symbol
+
identifier
C
symbol
,
identifier
ans
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/551100kk.2.cpp file...

identifier
include
symbol
<
identifier
bits
symbol
/
identifier
stdc
symbol
+
symbol
+
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
keyword
char
identifier
in
symbol
[
integerConstant
100005
symbol
]
symbol
;
identifier
NewLine
keyword
int
identifier
tra
symbol
[
integerConstant
5
symbol
]
symbol
[
integerConstant
5
symbol
]
symbol
=
symbol
{
identifier
NewLine
symbol
{
integerConstant
0
symbol
,
integerConstant
0
symbol
,
integerConstant
0
symbol
,
integerConstant
0
symbol
,
integerConstant
0
symbol
}
symbol
,
identifier
NewLine
symbol
{
integerConstant
0
symbol
,
integerConstant
1
symbol
,
integerConstant
2
symbol
,
integerConstant
3
symbol
,
integerConstant
4
symbol
}
symbol
,
identifier
NewLine
symbol
{
integerConstant
0
symbol
,
integerConstant
2
symbol
,
symbol
-
integerConstant
1
symbol
,
integerConstant
4
symbol
,
symbol
-
integerConstant
3
symbol
}
symbol
,
identifier
NewLine
symbol
{
integerConstant
0
symbol
,
integerConstant
3
symbol
,
symbol
-
integerConstant
4
symbol
,
symbol
-
integerConstant
1
symbol
,
integerConstant
2
symbol
}
symbol
,
identifier
NewLine
symbol
{
integerConstant
0
symbol
,
integerConstant
4
symbol
,
integerConstant
3
symbol
,
symbol
-
integerConstant
2
symbol
,
symbol
-
integerConstant
1
symbol
}
identifier
NewLine
symbol
}
symbol
;
identifier
NewLine
identifier
vector
symbol
<
keyword
int
symbol
>
identifier
arr
symbol
,
identifier
s
symbol
;
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
symbol
{
identifier
NewLine
identifier
freopen
symbol
(
stringConstant
C-large.in
symbol
,
stringConstant
r
symbol
,
identifier
stdin
symbol
)
symbol
;
identifier
NewLine
identifier
freopen
symbol
(
stringConstant
out.txt
symbol
,
stringConstant
w
symbol
,
identifier
stdout
symbol
)
symbol
;
identifier
NewLine
keyword
int
identifier
t
symbol
,
identifier
n
symbol
,
identifier
x
symbol
,
identifier
y
symbol
,
identifier
i
symbol
,
identifier
j
symbol
,
identifier
k
symbol
,
identifier
C
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
long
identifier
long
keyword
int
identifier
m
symbol
;
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
t
symbol
)
symbol
;
identifier
NewLine
keyword
while
symbol
(
identifier
t
symbol
-
symbol
-
symbol
)
symbol
{
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d%lld
symbol
,
symbol
&
identifier
n
symbol
,
symbol
&
identifier
m
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
m
symbol
>
integerConstant
11
symbol
)
identifier
m
symbol
=
integerConstant
8
symbol
+
identifier
m
integerConstant
4
symbol
;
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%s
symbol
,
identifier
in
symbol
)
symbol
;
identifier
NewLine
identifier
arr
symbol
.
identifier
clear
symbol
(
symbol
)
symbol
,
identifier
s
symbol
.
identifier
clear
symbol
(
symbol
)
symbol
;
identifier
NewLine
identifier
for
symbol
(
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
n
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
in
symbol
[
identifier
i
symbol
]
symbol
=
symbol
=
identifier
i
symbol
)
identifier
s
symbol
.
identifier
push
identifier
back
symbol
(
integerConstant
2
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
in
symbol
[
identifier
i
symbol
]
symbol
=
symbol
=
identifier
j
symbol
)
identifier
s
symbol
.
identifier
push
identifier
back
symbol
(
integerConstant
3
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
in
symbol
[
identifier
i
symbol
]
symbol
=
symbol
=
identifier
k
symbol
)
identifier
s
symbol
.
identifier
push
identifier
back
symbol
(
integerConstant
4
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
while
symbol
(
identifier
m
symbol
-
symbol
-
symbol
)
symbol
{
identifier
NewLine
identifier
for
symbol
(
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
n
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
arr
symbol
.
identifier
push
identifier
back
symbol
(
identifier
s
symbol
[
identifier
i
symbol
]
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
keyword
int
identifier
tmp
symbol
=
integerConstant
1
symbol
,
identifier
flag
symbol
=
integerConstant
0
symbol
,
identifier
f1
symbol
=
integerConstant
0
symbol
,
identifier
f2
symbol
=
integerConstant
0
symbol
,
identifier
f3
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
for
symbol
(
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
arr
symbol
.
identifier
size
symbol
(
symbol
)
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
tmp
symbol
=
identifier
tra
symbol
[
identifier
tmp
symbol
]
symbol
[
identifier
arr
symbol
[
identifier
i
symbol
]
symbol
]
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
tmp
symbol
<
integerConstant
0
symbol
)
identifier
tmp
symbol
*
symbol
=
symbol
-
integerConstant
1
symbol
,
identifier
flag
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
tmp
symbol
=
symbol
=
integerConstant
2
symbol
&
symbol
&
identifier
flag
symbol
=
symbol
=
integerConstant
0
symbol
)
identifier
f1
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
tmp
symbol
=
symbol
=
integerConstant
4
symbol
&
symbol
&
identifier
flag
symbol
=
symbol
=
integerConstant
0
symbol
&
symbol
&
identifier
f1
symbol
)
identifier
f2
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
tmp
symbol
=
symbol
=
integerConstant
1
symbol
&
symbol
&
identifier
flag
symbol
=
symbol
=
integerConstant
1
symbol
&
symbol
&
identifier
f2
symbol
&
symbol
&
identifier
i
symbol
=
symbol
=
identifier
arr
symbol
.
identifier
size
symbol
(
symbol
)
symbol
-
integerConstant
1
symbol
)
identifier
f3
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: %s\n
symbol
,
symbol
+
symbol
+
identifier
C
symbol
,
identifier
f3
stringConstant
YES
stringConstant
NO
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/achan1058.0.cpp file...

identifier
include
symbol
<
identifier
bits
symbol
/
identifier
stdc
symbol
+
symbol
+
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
include
stringConstant
header.h
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
T
symbol
,
identifier
n
symbol
;
identifier
NewLine
keyword
char
identifier
c
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
T
symbol
;
identifier
NewLine
identifier
rep
symbol
(
identifier
X
symbol
,
integerConstant
0
symbol
,
identifier
T
symbol
)
symbol
{
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
n
symbol
;
identifier
NewLine
keyword
int
identifier
ans
symbol
=
integerConstant
0
symbol
,
identifier
total
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
rep
symbol
(
identifier
i
symbol
,
integerConstant
0
symbol
,
identifier
n
symbol
+
integerConstant
1
symbol
)
symbol
{
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
c
symbol
;
identifier
NewLine
identifier
total
symbol
+
symbol
=
identifier
c
symbol
-
integerConstant
0
symbol
;
identifier
NewLine
identifier
ans
symbol
=
identifier
max
symbol
(
identifier
i
symbol
-
identifier
total
symbol
+
integerConstant
1
symbol
,
identifier
ans
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: %d\n
symbol
,
identifier
X
symbol
+
integerConstant
1
symbol
,
identifier
ans
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/achan1058.1.cpp file...

identifier
include
symbol
<
identifier
bits
symbol
/
identifier
stdc
symbol
+
symbol
+
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
identifier
typedef
identifier
long
identifier
long
identifier
ll
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
keyword
int
symbol
>
identifier
vi
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
identifier
string
symbol
>
identifier
vs
symbol
;
identifier
NewLine
identifier
typedef
identifier
pair
symbol
<
keyword
int
symbol
,
keyword
int
symbol
>
identifier
pii
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
identifier
vi
symbol
>
identifier
vvi
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
identifier
ll
symbol
>
identifier
vl
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
identifier
bool
symbol
>
identifier
vb
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
identifier
double
symbol
>
identifier
vd
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
identifier
vd
symbol
>
identifier
vvd
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
identifier
vb
symbol
>
identifier
vvb
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
identifier
vs
symbol
>
identifier
vvs
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
identifier
vl
symbol
>
identifier
vvl
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
inf
symbol
=
integerConstant
0
identifier
x3f3f3f3f
symbol
;
identifier
NewLine
identifier
double
identifier
eps
symbol
=
integerConstant
10
identifier
e
symbol
-
integerConstant
10
symbol
;
identifier
NewLine
identifier
ll
identifier
mod
symbol
=
integerConstant
1000000007
identifier
ll
symbol
;
identifier
NewLine
identifier
NewLine
identifier
define
identifier
rep
symbol
(
identifier
k
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
for
symbol
(
keyword
int
identifier
k
symbol
=
symbol
(
identifier
a
symbol
)
symbol
;
identifier
k
symbol
<
keyword
int
symbol
(
identifier
b
symbol
)
symbol
;
identifier
k
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
define
identifier
sz
symbol
(
identifier
a
symbol
)
keyword
int
symbol
(
identifier
a
symbol
.
identifier
size
symbol
(
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
all
symbol
(
identifier
c
symbol
)
symbol
(
identifier
c
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
,
symbol
(
identifier
c
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
identifier
NewLine
identifier
define
identifier
pb
identifier
push
identifier
back
identifier
NewLine
identifier
define
identifier
x
identifier
first
identifier
NewLine
identifier
define
identifier
y
identifier
second
identifier
NewLine
identifier
define
identifier
mi
symbol
(
identifier
r
symbol
,
identifier
c
symbol
,
identifier
v
symbol
)
identifier
vvi
symbol
(
identifier
r
symbol
,
identifier
vi
symbol
(
identifier
c
symbol
,
identifier
v
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
rrep
symbol
(
identifier
k
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
for
symbol
(
keyword
int
identifier
k
symbol
=
symbol
(
identifier
a
symbol
)
symbol
;
identifier
k
symbol
>
symbol
=
keyword
int
symbol
(
identifier
b
symbol
)
symbol
;
identifier
k
symbol
-
symbol
-
symbol
)
identifier
NewLine
identifier
define
identifier
irep
symbol
(
identifier
k
symbol
,
identifier
a
symbol
)
identifier
for
symbol
(
identifier
auto
symbol
&
identifier
k
symbol
(
identifier
a
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
md
symbol
(
identifier
r
symbol
,
identifier
c
symbol
,
identifier
v
symbol
)
identifier
vvd
symbol
(
identifier
r
symbol
,
identifier
vd
symbol
(
identifier
c
symbol
,
identifier
v
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
mb
symbol
(
identifier
r
symbol
,
identifier
c
symbol
,
identifier
v
symbol
)
identifier
vvb
symbol
(
identifier
r
symbol
,
identifier
vb
symbol
(
identifier
c
symbol
,
identifier
v
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
ms
symbol
(
identifier
r
symbol
,
identifier
c
symbol
,
identifier
v
symbol
)
identifier
vvs
symbol
(
identifier
r
symbol
,
identifier
vs
symbol
(
identifier
c
symbol
,
identifier
v
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
ml
symbol
(
identifier
r
symbol
,
identifier
c
symbol
,
identifier
v
symbol
)
identifier
vvl
symbol
(
identifier
r
symbol
,
identifier
vl
symbol
(
identifier
c
symbol
,
identifier
v
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
mc
symbol
(
identifier
r
symbol
,
identifier
c
symbol
,
identifier
v
symbol
)
identifier
vs
symbol
(
identifier
r
symbol
,
identifier
string
symbol
(
identifier
c
symbol
,
identifier
v
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
add
symbol
(
identifier
i
symbol
,
identifier
j
symbol
)
symbol
(
symbol
(
identifier
i
symbol
)
symbol
+
symbol
(
identifier
j
symbol
)
symbol
)
identifier
mod
identifier
NewLine
identifier
define
identifier
mul
symbol
(
identifier
i
symbol
,
identifier
j
symbol
)
symbol
(
symbol
(
identifier
i
symbol
)
symbol
*
symbol
(
identifier
j
symbol
)
symbol
)
identifier
mod
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
T
symbol
,
identifier
n
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
T
symbol
;
identifier
NewLine
identifier
rep
symbol
(
identifier
X
symbol
,
integerConstant
0
symbol
,
identifier
T
symbol
)
symbol
{
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
n
symbol
;
identifier
NewLine
identifier
vi
identifier
pancakes
symbol
(
identifier
n
symbol
)
symbol
;
identifier
NewLine
identifier
rep
symbol
(
identifier
i
symbol
,
integerConstant
0
symbol
,
identifier
n
symbol
)
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
pancakes
symbol
[
identifier
i
symbol
]
symbol
;
identifier
NewLine
identifier
sort
symbol
(
identifier
all
symbol
(
identifier
pancakes
symbol
)
symbol
)
symbol
;
identifier
NewLine
keyword
int
identifier
best
symbol
=
identifier
pancakes
symbol
.
identifier
back
symbol
(
symbol
)
symbol
;
identifier
NewLine
identifier
rep
symbol
(
identifier
i
symbol
,
integerConstant
1
symbol
,
identifier
pancakes
symbol
.
identifier
back
symbol
(
symbol
)
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
cuts
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
irep
symbol
(
identifier
p
symbol
,
identifier
pancakes
symbol
)
identifier
NewLine
identifier
cuts
symbol
+
symbol
=
symbol
(
identifier
p
symbol
-
integerConstant
1
symbol
)
symbol
/
identifier
i
symbol
;
identifier
NewLine
identifier
best
symbol
=
identifier
min
symbol
(
identifier
best
symbol
,
identifier
cuts
symbol
+
identifier
i
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: %d\n
symbol
,
identifier
X
symbol
+
integerConstant
1
symbol
,
identifier
best
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/achan1058.2.cpp file...

identifier
include
symbol
<
identifier
bits
symbol
/
identifier
stdc
symbol
+
symbol
+
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
identifier
typedef
identifier
long
identifier
long
identifier
ll
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
keyword
int
symbol
>
identifier
vi
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
identifier
string
symbol
>
identifier
vs
symbol
;
identifier
NewLine
identifier
typedef
identifier
pair
symbol
<
keyword
int
symbol
,
keyword
int
symbol
>
identifier
pii
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
identifier
vi
symbol
>
identifier
vvi
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
identifier
ll
symbol
>
identifier
vl
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
identifier
bool
symbol
>
identifier
vb
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
identifier
double
symbol
>
identifier
vd
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
identifier
vd
symbol
>
identifier
vvd
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
identifier
vb
symbol
>
identifier
vvb
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
identifier
vs
symbol
>
identifier
vvs
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
identifier
vl
symbol
>
identifier
vvl
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
inf
symbol
=
integerConstant
0
identifier
x3f3f3f3f
symbol
;
identifier
NewLine
identifier
double
identifier
eps
symbol
=
integerConstant
10
identifier
e
symbol
-
integerConstant
10
symbol
;
identifier
NewLine
identifier
ll
identifier
mod
symbol
=
integerConstant
1000000007
identifier
ll
symbol
;
identifier
NewLine
identifier
NewLine
identifier
define
identifier
rep
symbol
(
identifier
k
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
for
symbol
(
keyword
int
identifier
k
symbol
=
symbol
(
identifier
a
symbol
)
symbol
;
identifier
k
symbol
<
keyword
int
symbol
(
identifier
b
symbol
)
symbol
;
identifier
k
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
define
identifier
sz
symbol
(
identifier
a
symbol
)
keyword
int
symbol
(
identifier
a
symbol
.
identifier
size
symbol
(
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
all
symbol
(
identifier
c
symbol
)
symbol
(
identifier
c
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
,
symbol
(
identifier
c
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
identifier
NewLine
identifier
define
identifier
pb
identifier
push
identifier
back
identifier
NewLine
identifier
define
identifier
x
identifier
first
identifier
NewLine
identifier
define
identifier
y
identifier
second
identifier
NewLine
identifier
define
identifier
mi
symbol
(
identifier
r
symbol
,
identifier
c
symbol
,
identifier
v
symbol
)
identifier
vvi
symbol
(
identifier
r
symbol
,
identifier
vi
symbol
(
identifier
c
symbol
,
identifier
v
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
rrep
symbol
(
identifier
k
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
for
symbol
(
keyword
int
identifier
k
symbol
=
symbol
(
identifier
a
symbol
)
symbol
;
identifier
k
symbol
>
symbol
=
keyword
int
symbol
(
identifier
b
symbol
)
symbol
;
identifier
k
symbol
-
symbol
-
symbol
)
identifier
NewLine
identifier
define
identifier
irep
symbol
(
identifier
k
symbol
,
identifier
a
symbol
)
identifier
for
symbol
(
identifier
auto
symbol
&
identifier
k
symbol
(
identifier
a
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
md
symbol
(
identifier
r
symbol
,
identifier
c
symbol
,
identifier
v
symbol
)
identifier
vvd
symbol
(
identifier
r
symbol
,
identifier
vd
symbol
(
identifier
c
symbol
,
identifier
v
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
mb
symbol
(
identifier
r
symbol
,
identifier
c
symbol
,
identifier
v
symbol
)
identifier
vvb
symbol
(
identifier
r
symbol
,
identifier
vb
symbol
(
identifier
c
symbol
,
identifier
v
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
ms
symbol
(
identifier
r
symbol
,
identifier
c
symbol
,
identifier
v
symbol
)
identifier
vvs
symbol
(
identifier
r
symbol
,
identifier
vs
symbol
(
identifier
c
symbol
,
identifier
v
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
ml
symbol
(
identifier
r
symbol
,
identifier
c
symbol
,
identifier
v
symbol
)
identifier
vvl
symbol
(
identifier
r
symbol
,
identifier
vl
symbol
(
identifier
c
symbol
,
identifier
v
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
mc
symbol
(
identifier
r
symbol
,
identifier
c
symbol
,
identifier
v
symbol
)
identifier
vs
symbol
(
identifier
r
symbol
,
identifier
string
symbol
(
identifier
c
symbol
,
identifier
v
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
add
symbol
(
identifier
i
symbol
,
identifier
j
symbol
)
symbol
(
symbol
(
identifier
i
symbol
)
symbol
+
symbol
(
identifier
j
symbol
)
symbol
)
identifier
mod
identifier
NewLine
identifier
define
identifier
mul
symbol
(
identifier
i
symbol
,
identifier
j
symbol
)
symbol
(
symbol
(
identifier
i
symbol
)
symbol
*
symbol
(
identifier
j
symbol
)
symbol
)
identifier
mod
identifier
NewLine
identifier
NewLine
keyword
int
identifier
sign
symbol
(
keyword
int
identifier
n
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
n
symbol
>
integerConstant
0
symbol
)
identifier
NewLine
keyword
return
integerConstant
1
symbol
;
identifier
NewLine
keyword
else
keyword
if
symbol
(
identifier
n
symbol
<
integerConstant
0
symbol
)
identifier
NewLine
keyword
return
symbol
-
integerConstant
1
symbol
;
identifier
NewLine
keyword
else
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
int
identifier
mult
symbol
(
keyword
int
identifier
x
symbol
,
keyword
int
identifier
y
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
abs
symbol
(
identifier
x
symbol
)
symbol
=
symbol
=
integerConstant
1
symbol
|
symbol
|
identifier
abs
symbol
(
identifier
y
symbol
)
symbol
=
symbol
=
integerConstant
1
symbol
)
identifier
NewLine
keyword
return
identifier
x
symbol
*
identifier
y
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
abs
symbol
(
identifier
x
symbol
)
symbol
=
symbol
=
identifier
abs
symbol
(
identifier
y
symbol
)
symbol
)
identifier
NewLine
keyword
return
symbol
-
identifier
sign
symbol
(
identifier
x
symbol
)
symbol
*
identifier
sign
symbol
(
identifier
y
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
abs
symbol
(
identifier
x
symbol
)
symbol
=
symbol
=
integerConstant
2
symbol
&
symbol
&
identifier
abs
symbol
(
identifier
y
symbol
)
symbol
=
symbol
=
integerConstant
3
symbol
)
identifier
NewLine
keyword
return
integerConstant
4
symbol
*
identifier
sign
symbol
(
identifier
x
symbol
)
symbol
*
identifier
sign
symbol
(
identifier
y
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
abs
symbol
(
identifier
x
symbol
)
symbol
=
symbol
=
integerConstant
3
symbol
&
symbol
&
identifier
abs
symbol
(
identifier
y
symbol
)
symbol
=
symbol
=
integerConstant
2
symbol
)
identifier
NewLine
keyword
return
symbol
-
integerConstant
4
symbol
*
identifier
sign
symbol
(
identifier
x
symbol
)
symbol
*
identifier
sign
symbol
(
identifier
y
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
abs
symbol
(
identifier
x
symbol
)
symbol
=
symbol
=
integerConstant
3
symbol
&
symbol
&
identifier
abs
symbol
(
identifier
y
symbol
)
symbol
=
symbol
=
integerConstant
4
symbol
)
identifier
NewLine
keyword
return
integerConstant
2
symbol
*
identifier
sign
symbol
(
identifier
x
symbol
)
symbol
*
identifier
sign
symbol
(
identifier
y
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
abs
symbol
(
identifier
x
symbol
)
symbol
=
symbol
=
integerConstant
4
symbol
&
symbol
&
identifier
abs
symbol
(
identifier
y
symbol
)
symbol
=
symbol
=
integerConstant
3
symbol
)
identifier
NewLine
keyword
return
symbol
-
integerConstant
2
symbol
*
identifier
sign
symbol
(
identifier
x
symbol
)
symbol
*
identifier
sign
symbol
(
identifier
y
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
abs
symbol
(
identifier
x
symbol
)
symbol
=
symbol
=
integerConstant
4
symbol
&
symbol
&
identifier
abs
symbol
(
identifier
y
symbol
)
symbol
=
symbol
=
integerConstant
2
symbol
)
identifier
NewLine
keyword
return
integerConstant
3
symbol
*
identifier
sign
symbol
(
identifier
x
symbol
)
symbol
*
identifier
sign
symbol
(
identifier
y
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
abs
symbol
(
identifier
x
symbol
)
symbol
=
symbol
=
integerConstant
2
symbol
&
symbol
&
identifier
abs
symbol
(
identifier
y
symbol
)
symbol
=
symbol
=
integerConstant
4
symbol
)
identifier
NewLine
keyword
return
symbol
-
integerConstant
3
symbol
*
identifier
sign
symbol
(
identifier
x
symbol
)
symbol
*
identifier
sign
symbol
(
identifier
y
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
T
symbol
,
identifier
L
symbol
;
identifier
NewLine
identifier
long
identifier
long
identifier
n
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
T
symbol
;
identifier
NewLine
identifier
rep
symbol
(
identifier
X
symbol
,
integerConstant
0
symbol
,
identifier
T
symbol
)
symbol
{
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
L
symbol
>
symbol
>
identifier
n
symbol
;
identifier
NewLine
identifier
string
identifier
s
symbol
,
identifier
s2
symbol
;
identifier
NewLine
keyword
int
identifier
prod
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
s
symbol
;
identifier
NewLine
identifier
NewLine
keyword
if
symbol
(
identifier
n
symbol
>
symbol
=
integerConstant
12
symbol
)
identifier
NewLine
identifier
n
symbol
=
symbol
(
identifier
n
integerConstant
4
symbol
)
symbol
+
integerConstant
8
symbol
;
identifier
NewLine
identifier
rep
symbol
(
identifier
i
symbol
,
integerConstant
0
symbol
,
identifier
n
symbol
)
identifier
NewLine
identifier
s2
symbol
+
symbol
=
identifier
s
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
counter
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
irep
symbol
(
identifier
c
symbol
,
identifier
s2
symbol
)
symbol
{
identifier
NewLine
identifier
prod
symbol
=
identifier
mult
symbol
(
identifier
prod
symbol
,
identifier
c
symbol
-
identifier
i
symbol
+
integerConstant
2
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
counter
symbol
=
symbol
=
integerConstant
0
symbol
&
symbol
&
identifier
prod
symbol
=
symbol
=
integerConstant
2
symbol
)
symbol
{
identifier
NewLine
identifier
counter
symbol
+
symbol
+
symbol
;
identifier
NewLine
identifier
prod
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
symbol
}
keyword
else
keyword
if
symbol
(
identifier
counter
symbol
=
symbol
=
integerConstant
1
symbol
&
symbol
&
identifier
prod
symbol
=
symbol
=
integerConstant
3
symbol
)
symbol
{
identifier
NewLine
identifier
counter
symbol
+
symbol
+
symbol
;
identifier
NewLine
identifier
prod
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: %s\n
symbol
,
identifier
X
symbol
+
integerConstant
1
symbol
,
identifier
counter
symbol
=
symbol
=
integerConstant
2
symbol
&
symbol
&
identifier
prod
symbol
=
symbol
=
integerConstant
4
stringConstant
YES
stringConstant
NO
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/alanubi.0.cpp file...

identifier
include
symbol
<
identifier
cstdio
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
algorithm
symbol
>
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
identifier
const
keyword
int
identifier
maxs
symbol
=
integerConstant
1000
symbol
;
identifier
NewLine
keyword
char
identifier
level
symbol
[
identifier
maxs
symbol
+
integerConstant
1
symbol
+
integerConstant
1
symbol
]
symbol
;
identifier
NewLine
identifier
NewLine
keyword
void
identifier
solve
symbol
(
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
int
identifier
s
symbol
;
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%i%s
symbol
,
symbol
&
identifier
s
symbol
,
identifier
level
symbol
)
symbol
;
identifier
NewLine
keyword
int
identifier
app
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
keyword
int
identifier
cnt
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
symbol
=
identifier
s
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
cur
symbol
=
identifier
level
symbol
[
identifier
i
symbol
]
symbol
-
integerConstant
0
symbol
;
identifier
NewLine
identifier
app
symbol
+
symbol
=
identifier
max
symbol
(
integerConstant
0
symbol
,
identifier
i
symbol
-
symbol
(
identifier
cnt
symbol
+
identifier
app
symbol
)
symbol
)
symbol
;
identifier
NewLine
identifier
cnt
symbol
+
symbol
=
identifier
cur
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
printf
symbol
(
stringConstant
%i
symbol
,
identifier
app
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
int
identifier
t
symbol
;
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%i
symbol
,
symbol
&
identifier
t
symbol
)
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
t
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%i: 
symbol
,
identifier
i
symbol
+
integerConstant
1
symbol
)
symbol
;
identifier
NewLine
identifier
solve
symbol
(
symbol
)
symbol
;
identifier
NewLine
identifier
printf
symbol
(
stringConstant
\n
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/alanubi.1.cpp file...

identifier
include
symbol
<
identifier
cstdio
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
algorithm
symbol
>
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
identifier
const
keyword
int
identifier
maxd
symbol
=
integerConstant
1000
symbol
;
identifier
NewLine
keyword
int
identifier
pans
symbol
[
identifier
maxd
symbol
]
symbol
;
identifier
NewLine
identifier
NewLine
keyword
void
identifier
solve
symbol
(
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
int
identifier
d
symbol
;
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%i
symbol
,
symbol
&
identifier
d
symbol
)
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
d
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%i
symbol
,
symbol
&
identifier
pans
symbol
[
identifier
i
symbol
]
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
sort
symbol
(
symbol
&
identifier
pans
symbol
[
integerConstant
0
symbol
]
symbol
,
symbol
&
identifier
pans
symbol
[
identifier
d
symbol
]
symbol
,
identifier
NewLine
identifier
std
identifier
greater
symbol
<
keyword
int
symbol
>
symbol
(
symbol
)
symbol
)
symbol
;
identifier
NewLine
keyword
int
identifier
result
symbol
=
identifier
pans
symbol
[
integerConstant
0
symbol
]
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
h
symbol
=
identifier
pans
symbol
[
integerConstant
0
symbol
]
symbol
;
identifier
h
symbol
;
symbol
-
symbol
-
identifier
h
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
cnt
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
d
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
pans
symbol
[
identifier
i
symbol
]
symbol
-
integerConstant
1
symbol
<
identifier
h
symbol
)
identifier
NewLine
identifier
break
symbol
;
identifier
NewLine
identifier
cnt
symbol
+
symbol
=
symbol
(
identifier
pans
symbol
[
identifier
i
symbol
]
symbol
-
integerConstant
1
symbol
)
symbol
/
identifier
h
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
result
symbol
=
identifier
min
symbol
(
identifier
result
symbol
,
identifier
cnt
symbol
+
identifier
h
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
printf
symbol
(
stringConstant
%i
symbol
,
identifier
result
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
int
identifier
t
symbol
;
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%i
symbol
,
symbol
&
identifier
t
symbol
)
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
t
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%i: 
symbol
,
identifier
i
symbol
+
integerConstant
1
symbol
)
symbol
;
identifier
NewLine
identifier
solve
symbol
(
symbol
)
symbol
;
identifier
NewLine
identifier
printf
symbol
(
stringConstant
\n
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/alanubi.2.cpp file...

identifier
include
symbol
<
identifier
cstdio
symbol
>
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
identifier
const
keyword
int
identifier
maxl
symbol
=
integerConstant
10000
symbol
;
identifier
NewLine
keyword
char
identifier
str
symbol
[
identifier
maxl
symbol
+
integerConstant
1
symbol
]
symbol
;
identifier
NewLine
identifier
NewLine
identifier
enum
identifier
quat
symbol
{
identifier
NewLine
identifier
QUAT
integerConstant
1
symbol
=
integerConstant
0
symbol
,
identifier
NewLine
identifier
QUAT
identifier
I
symbol
=
integerConstant
1
symbol
,
identifier
NewLine
identifier
QUAT
identifier
J
symbol
=
integerConstant
2
symbol
,
identifier
NewLine
identifier
QUAT
identifier
K
symbol
=
integerConstant
3
symbol
,
identifier
NewLine
identifier
QUAT
integerConstant
1
identifier
NEG
symbol
=
integerConstant
4
symbol
,
identifier
NewLine
identifier
QUAT
identifier
I
identifier
NEG
symbol
=
integerConstant
5
symbol
,
identifier
NewLine
identifier
QUAT
identifier
J
identifier
NEG
symbol
=
integerConstant
6
symbol
,
identifier
NewLine
identifier
QUAT
identifier
K
identifier
NEG
symbol
=
integerConstant
7
symbol
,
identifier
NewLine
symbol
}
symbol
;
identifier
NewLine
identifier
NewLine
identifier
enum
identifier
quat
identifier
quat
identifier
letter
symbol
(
keyword
char
identifier
c
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
switch
symbol
(
identifier
c
symbol
)
symbol
{
identifier
NewLine
identifier
break
symbol
;
identifier
case
integerConstant
1
keyword
return
identifier
QUAT
integerConstant
1
symbol
;
identifier
NewLine
identifier
break
symbol
;
identifier
case
identifier
i
keyword
return
identifier
QUAT
identifier
I
symbol
;
identifier
NewLine
identifier
break
symbol
;
identifier
case
identifier
j
keyword
return
identifier
QUAT
identifier
J
symbol
;
identifier
NewLine
identifier
break
symbol
;
identifier
case
identifier
k
keyword
return
identifier
QUAT
identifier
K
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
enum
identifier
quat
identifier
quat
identifier
rmul
symbol
(
identifier
enum
identifier
quat
symbol
*
identifier
q
symbol
,
identifier
enum
identifier
quat
identifier
r
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
bool
identifier
neg
symbol
=
keyword
false
symbol
;
identifier
NewLine
keyword
if
symbol
(
symbol
*
identifier
q
symbol
>
symbol
=
integerConstant
4
symbol
)
symbol
{
identifier
NewLine
identifier
neg
symbol
=
identifier
neg
symbol
;
identifier
NewLine
symbol
*
identifier
q
symbol
=
symbol
(
identifier
enum
identifier
quat
symbol
)
symbol
(
symbol
*
identifier
q
symbol
-
integerConstant
4
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
r
symbol
>
symbol
=
integerConstant
4
symbol
)
symbol
{
identifier
NewLine
identifier
neg
symbol
=
identifier
neg
symbol
;
identifier
NewLine
identifier
r
symbol
=
symbol
(
identifier
enum
identifier
quat
symbol
)
symbol
(
identifier
r
symbol
-
integerConstant
4
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
switch
symbol
(
symbol
*
identifier
q
symbol
)
symbol
{
identifier
NewLine
identifier
break
symbol
;
identifier
case
identifier
QUAT
integerConstant
1
identifier
switch
symbol
(
identifier
r
symbol
)
symbol
{
identifier
NewLine
identifier
break
symbol
;
identifier
case
identifier
QUAT
integerConstant
1
symbol
*
identifier
q
symbol
=
identifier
QUAT
integerConstant
1
symbol
;
identifier
NewLine
identifier
break
symbol
;
identifier
case
identifier
QUAT
identifier
I
symbol
*
identifier
q
symbol
=
identifier
QUAT
identifier
I
symbol
;
identifier
NewLine
identifier
break
symbol
;
identifier
case
identifier
QUAT
identifier
J
symbol
*
identifier
q
symbol
=
identifier
QUAT
identifier
J
symbol
;
identifier
NewLine
identifier
break
symbol
;
identifier
case
identifier
QUAT
identifier
K
symbol
*
identifier
q
symbol
=
identifier
QUAT
identifier
K
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
break
symbol
;
identifier
case
identifier
QUAT
identifier
I
identifier
switch
symbol
(
identifier
r
symbol
)
symbol
{
identifier
NewLine
identifier
break
symbol
;
identifier
case
identifier
QUAT
integerConstant
1
symbol
*
identifier
q
symbol
=
identifier
QUAT
identifier
I
symbol
;
identifier
NewLine
identifier
break
symbol
;
identifier
case
identifier
QUAT
identifier
I
symbol
*
identifier
q
symbol
=
identifier
QUAT
integerConstant
1
identifier
NEG
symbol
;
identifier
NewLine
identifier
break
symbol
;
identifier
case
identifier
QUAT
identifier
J
symbol
*
identifier
q
symbol
=
identifier
QUAT
identifier
K
symbol
;
identifier
NewLine
identifier
break
symbol
;
identifier
case
identifier
QUAT
identifier
K
symbol
*
identifier
q
symbol
=
identifier
QUAT
identifier
J
identifier
NEG
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
break
symbol
;
identifier
case
identifier
QUAT
identifier
J
identifier
switch
symbol
(
identifier
r
symbol
)
symbol
{
identifier
NewLine
identifier
break
symbol
;
identifier
case
identifier
QUAT
integerConstant
1
symbol
*
identifier
q
symbol
=
identifier
QUAT
identifier
J
symbol
;
identifier
NewLine
identifier
break
symbol
;
identifier
case
identifier
QUAT
identifier
I
symbol
*
identifier
q
symbol
=
identifier
QUAT
identifier
K
identifier
NEG
symbol
;
identifier
NewLine
identifier
break
symbol
;
identifier
case
identifier
QUAT
identifier
J
symbol
*
identifier
q
symbol
=
identifier
QUAT
integerConstant
1
identifier
NEG
symbol
;
identifier
NewLine
identifier
break
symbol
;
identifier
case
identifier
QUAT
identifier
K
symbol
*
identifier
q
symbol
=
identifier
QUAT
identifier
I
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
break
symbol
;
identifier
case
identifier
QUAT
identifier
K
identifier
switch
symbol
(
identifier
r
symbol
)
symbol
{
identifier
NewLine
identifier
break
symbol
;
identifier
case
identifier
QUAT
integerConstant
1
symbol
*
identifier
q
symbol
=
identifier
QUAT
identifier
K
symbol
;
identifier
NewLine
identifier
break
symbol
;
identifier
case
identifier
QUAT
identifier
I
symbol
*
identifier
q
symbol
=
identifier
QUAT
identifier
J
symbol
;
identifier
NewLine
identifier
break
symbol
;
identifier
case
identifier
QUAT
identifier
J
symbol
*
identifier
q
symbol
=
identifier
QUAT
identifier
I
identifier
NEG
symbol
;
identifier
NewLine
identifier
break
symbol
;
identifier
case
identifier
QUAT
identifier
K
symbol
*
identifier
q
symbol
=
identifier
QUAT
integerConstant
1
identifier
NEG
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
neg
symbol
)
symbol
{
identifier
NewLine
identifier
neg
symbol
=
identifier
neg
symbol
;
identifier
NewLine
symbol
*
identifier
q
symbol
=
symbol
(
identifier
enum
identifier
quat
symbol
)
symbol
(
symbol
(
symbol
*
identifier
q
symbol
+
integerConstant
4
symbol
)
integerConstant
8
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
enum
identifier
quat
identifier
quat
identifier
lmul
symbol
(
identifier
enum
identifier
quat
symbol
*
identifier
q
symbol
,
identifier
enum
identifier
quat
identifier
l
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
bool
identifier
neg
symbol
=
keyword
false
symbol
;
identifier
NewLine
keyword
if
symbol
(
symbol
*
identifier
q
symbol
>
symbol
=
integerConstant
4
symbol
)
symbol
{
identifier
NewLine
identifier
neg
symbol
=
identifier
neg
symbol
;
identifier
NewLine
symbol
*
identifier
q
symbol
=
symbol
(
identifier
enum
identifier
quat
symbol
)
symbol
(
symbol
*
identifier
q
symbol
-
integerConstant
4
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
l
symbol
>
symbol
=
integerConstant
4
symbol
)
symbol
{
identifier
NewLine
identifier
neg
symbol
=
identifier
neg
symbol
;
identifier
NewLine
identifier
l
symbol
=
symbol
(
identifier
enum
identifier
quat
symbol
)
symbol
(
identifier
l
symbol
-
integerConstant
4
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
switch
symbol
(
identifier
l
symbol
)
symbol
{
identifier
NewLine
identifier
break
symbol
;
identifier
case
identifier
QUAT
integerConstant
1
identifier
switch
symbol
(
symbol
*
identifier
q
symbol
)
symbol
{
identifier
NewLine
identifier
break
symbol
;
identifier
case
identifier
QUAT
integerConstant
1
symbol
*
identifier
q
symbol
=
identifier
QUAT
integerConstant
1
symbol
;
identifier
NewLine
identifier
break
symbol
;
identifier
case
identifier
QUAT
identifier
I
symbol
*
identifier
q
symbol
=
identifier
QUAT
identifier
I
symbol
;
identifier
NewLine
identifier
break
symbol
;
identifier
case
identifier
QUAT
identifier
J
symbol
*
identifier
q
symbol
=
identifier
QUAT
identifier
J
symbol
;
identifier
NewLine
identifier
break
symbol
;
identifier
case
identifier
QUAT
identifier
K
symbol
*
identifier
q
symbol
=
identifier
QUAT
identifier
K
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
break
symbol
;
identifier
case
identifier
QUAT
identifier
I
identifier
switch
symbol
(
symbol
*
identifier
q
symbol
)
symbol
{
identifier
NewLine
identifier
break
symbol
;
identifier
case
identifier
QUAT
integerConstant
1
symbol
*
identifier
q
symbol
=
identifier
QUAT
identifier
I
symbol
;
identifier
NewLine
identifier
break
symbol
;
identifier
case
identifier
QUAT
identifier
I
symbol
*
identifier
q
symbol
=
identifier
QUAT
integerConstant
1
identifier
NEG
symbol
;
identifier
NewLine
identifier
break
symbol
;
identifier
case
identifier
QUAT
identifier
J
symbol
*
identifier
q
symbol
=
identifier
QUAT
identifier
K
symbol
;
identifier
NewLine
identifier
break
symbol
;
identifier
case
identifier
QUAT
identifier
K
symbol
*
identifier
q
symbol
=
identifier
QUAT
identifier
J
identifier
NEG
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
break
symbol
;
identifier
case
identifier
QUAT
identifier
J
identifier
switch
symbol
(
symbol
*
identifier
q
symbol
)
symbol
{
identifier
NewLine
identifier
break
symbol
;
identifier
case
identifier
QUAT
integerConstant
1
symbol
*
identifier
q
symbol
=
identifier
QUAT
identifier
J
symbol
;
identifier
NewLine
identifier
break
symbol
;
identifier
case
identifier
QUAT
identifier
I
symbol
*
identifier
q
symbol
=
identifier
QUAT
identifier
K
identifier
NEG
symbol
;
identifier
NewLine
identifier
break
symbol
;
identifier
case
identifier
QUAT
identifier
J
symbol
*
identifier
q
symbol
=
identifier
QUAT
integerConstant
1
identifier
NEG
symbol
;
identifier
NewLine
identifier
break
symbol
;
identifier
case
identifier
QUAT
identifier
K
symbol
*
identifier
q
symbol
=
identifier
QUAT
identifier
I
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
break
symbol
;
identifier
case
identifier
QUAT
identifier
K
identifier
switch
symbol
(
symbol
*
identifier
q
symbol
)
symbol
{
identifier
NewLine
identifier
break
symbol
;
identifier
case
identifier
QUAT
integerConstant
1
symbol
*
identifier
q
symbol
=
identifier
QUAT
identifier
K
symbol
;
identifier
NewLine
identifier
break
symbol
;
identifier
case
identifier
QUAT
identifier
I
symbol
*
identifier
q
symbol
=
identifier
QUAT
identifier
J
symbol
;
identifier
NewLine
identifier
break
symbol
;
identifier
case
identifier
QUAT
identifier
J
symbol
*
identifier
q
symbol
=
identifier
QUAT
identifier
I
identifier
NEG
symbol
;
identifier
NewLine
identifier
break
symbol
;
identifier
case
identifier
QUAT
identifier
K
symbol
*
identifier
q
symbol
=
identifier
QUAT
integerConstant
1
identifier
NEG
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
neg
symbol
)
symbol
{
identifier
NewLine
identifier
neg
symbol
=
identifier
neg
symbol
;
identifier
NewLine
symbol
*
identifier
q
symbol
=
symbol
(
identifier
enum
identifier
quat
symbol
)
symbol
(
symbol
(
symbol
*
identifier
q
symbol
+
integerConstant
4
symbol
)
integerConstant
8
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
bool
identifier
solve
symbol
(
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
int
identifier
l
symbol
;
identifier
NewLine
identifier
long
identifier
long
identifier
x
symbol
;
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%i%lli%s
symbol
,
symbol
&
identifier
l
symbol
,
symbol
&
identifier
x
symbol
,
identifier
str
symbol
)
symbol
;
identifier
NewLine
keyword
int
identifier
y
symbol
=
symbol
(
keyword
int
symbol
)
symbol
(
identifier
x
integerConstant
4
symbol
)
symbol
;
identifier
NewLine
identifier
enum
identifier
quat
identifier
total
symbol
=
identifier
QUAT
integerConstant
1
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
y
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
j
symbol
=
integerConstant
0
symbol
;
identifier
j
symbol
<
identifier
l
symbol
;
identifier
j
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
quat
identifier
rmul
symbol
(
symbol
&
identifier
total
symbol
,
identifier
quat
identifier
letter
symbol
(
identifier
str
symbol
[
identifier
j
symbol
]
symbol
)
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
QUAT
integerConstant
1
identifier
NEG
symbol
=
symbol
=
identifier
total
symbol
)
identifier
NewLine
identifier
goto
identifier
a
symbol
;
identifier
NewLine
keyword
return
keyword
false
symbol
;
identifier
NewLine
identifier
a
identifier
NewLine
identifier
enum
identifier
quat
identifier
left
symbol
=
identifier
QUAT
integerConstant
1
symbol
;
identifier
NewLine
keyword
int
identifier
left
identifier
pos
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
integerConstant
4
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
j
symbol
=
integerConstant
0
symbol
;
identifier
j
symbol
<
identifier
l
symbol
;
identifier
j
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
left
identifier
pos
symbol
+
symbol
+
symbol
;
identifier
NewLine
identifier
quat
identifier
rmul
symbol
(
symbol
&
identifier
left
symbol
,
identifier
quat
identifier
letter
symbol
(
identifier
str
symbol
[
identifier
j
symbol
]
symbol
)
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
QUAT
identifier
I
symbol
=
symbol
=
identifier
left
symbol
)
identifier
NewLine
identifier
goto
identifier
b
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
keyword
false
symbol
;
identifier
NewLine
identifier
b
identifier
NewLine
identifier
enum
identifier
quat
identifier
right
symbol
=
identifier
QUAT
integerConstant
1
symbol
;
identifier
NewLine
keyword
int
identifier
right
identifier
pos
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
integerConstant
4
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
j
symbol
=
integerConstant
0
symbol
;
identifier
j
symbol
<
identifier
l
symbol
;
identifier
j
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
right
identifier
pos
symbol
+
symbol
+
symbol
;
identifier
NewLine
identifier
quat
identifier
lmul
symbol
(
symbol
&
identifier
right
symbol
,
identifier
quat
identifier
letter
symbol
(
identifier
str
symbol
[
identifier
l
symbol
-
identifier
j
symbol
-
integerConstant
1
symbol
]
symbol
)
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
QUAT
identifier
K
symbol
=
symbol
=
identifier
right
symbol
)
identifier
NewLine
identifier
goto
identifier
c
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
keyword
false
symbol
;
identifier
NewLine
identifier
c
identifier
NewLine
keyword
return
identifier
left
identifier
pos
symbol
+
identifier
right
identifier
pos
symbol
<
identifier
l
symbol
*
identifier
x
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
int
identifier
t
symbol
;
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%i
symbol
,
symbol
&
identifier
t
symbol
)
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
t
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%i: 
symbol
,
identifier
i
symbol
+
integerConstant
1
symbol
)
symbol
;
identifier
NewLine
identifier
printf
symbol
(
stringConstant
%s
symbol
,
identifier
solve
symbol
(
symbol
)
stringConstant
YES
stringConstant
NO
symbol
)
symbol
;
identifier
NewLine
identifier
printf
symbol
(
stringConstant
\n
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/AntiForest.0.cpp file...

identifier
include
symbol
<
identifier
bits
symbol
/
identifier
stdc
symbol
+
symbol
+
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
NewLine
identifier
define
identifier
INF
integerConstant
1000000010
identifier
NewLine
identifier
define
identifier
FO
symbol
(
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
for
symbol
(
keyword
int
symbol
(
identifier
i
symbol
)
symbol
=
symbol
(
identifier
a
symbol
)
symbol
;
symbol
(
identifier
i
symbol
)
symbol
<
symbol
(
identifier
b
symbol
)
symbol
;
symbol
+
symbol
+
symbol
(
identifier
i
symbol
)
symbol
)
identifier
NewLine
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
define
identifier
mp
identifier
make
identifier
pair
identifier
NewLine
identifier
define
identifier
fi
identifier
first
identifier
NewLine
identifier
define
identifier
se
identifier
second
identifier
NewLine
identifier
typedef
identifier
pair
symbol
<
keyword
int
symbol
,
keyword
int
symbol
>
identifier
pii
symbol
;
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
NewLine
keyword
int
identifier
T
symbol
,
identifier
N
symbol
;
identifier
NewLine
keyword
char
identifier
inp
symbol
[
integerConstant
1005
symbol
]
symbol
;
identifier
NewLine
keyword
int
identifier
sCoun
symbol
[
integerConstant
1005
symbol
]
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
symbol
{
identifier
NewLine
identifier
freopen
symbol
(
stringConstant
q1.in
symbol
,
stringConstant
r
symbol
,
identifier
stdin
symbol
)
symbol
;
identifier
NewLine
identifier
freopen
symbol
(
stringConstant
q1.out
symbol
,
stringConstant
w
symbol
,
identifier
stdout
symbol
)
symbol
;
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
T
symbol
)
symbol
;
identifier
NewLine
identifier
FO
symbol
(
identifier
z
symbol
,
integerConstant
0
symbol
,
identifier
T
symbol
)
symbol
{
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: 
symbol
,
identifier
z
symbol
+
integerConstant
1
symbol
)
symbol
;
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
 %d %s 
symbol
,
symbol
&
identifier
N
symbol
,
identifier
inp
symbol
)
symbol
;
identifier
NewLine
identifier
FO
symbol
(
identifier
i
symbol
,
integerConstant
0
symbol
,
identifier
N
symbol
+
integerConstant
1
symbol
)
identifier
sCoun
symbol
[
identifier
i
symbol
]
symbol
=
identifier
inp
symbol
[
identifier
i
symbol
]
symbol
-
integerConstant
0
symbol
;
identifier
NewLine
keyword
int
identifier
ans
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
keyword
int
identifier
soFar
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
FO
symbol
(
identifier
i
symbol
,
integerConstant
0
symbol
,
identifier
N
symbol
+
integerConstant
1
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
soFar
symbol
<
identifier
i
symbol
)
symbol
{
identifier
NewLine
identifier
ans
symbol
+
symbol
=
identifier
i
symbol
-
identifier
soFar
symbol
;
identifier
NewLine
identifier
soFar
symbol
=
identifier
i
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
soFar
symbol
+
symbol
=
identifier
sCoun
symbol
[
identifier
i
symbol
]
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
printf
symbol
(
stringConstant
%d\n
symbol
,
identifier
ans
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/AntiForest.1.cpp file...

identifier
include
symbol
<
identifier
bits
symbol
/
identifier
stdc
symbol
+
symbol
+
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
NewLine
identifier
define
identifier
INF
integerConstant
1000000010
identifier
NewLine
identifier
define
identifier
FO
symbol
(
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
for
symbol
(
keyword
int
symbol
(
identifier
i
symbol
)
symbol
=
symbol
(
identifier
a
symbol
)
symbol
;
symbol
(
identifier
i
symbol
)
symbol
<
symbol
(
identifier
b
symbol
)
symbol
;
symbol
+
symbol
+
symbol
(
identifier
i
symbol
)
symbol
)
identifier
NewLine
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
define
identifier
mp
identifier
make
identifier
pair
identifier
NewLine
identifier
define
identifier
fi
identifier
first
identifier
NewLine
identifier
define
identifier
se
identifier
second
identifier
NewLine
identifier
typedef
identifier
pair
symbol
<
keyword
int
symbol
,
keyword
int
symbol
>
identifier
pii
symbol
;
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
NewLine
keyword
int
identifier
T
symbol
,
identifier
D
symbol
,
identifier
P
symbol
[
integerConstant
1005
symbol
]
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
symbol
{
identifier
NewLine
identifier
freopen
symbol
(
stringConstant
q2.in
symbol
,
stringConstant
r
symbol
,
identifier
stdin
symbol
)
symbol
;
identifier
NewLine
identifier
freopen
symbol
(
stringConstant
q2.out
symbol
,
stringConstant
w
symbol
,
identifier
stdout
symbol
)
symbol
;
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
T
symbol
)
symbol
;
identifier
NewLine
identifier
FO
symbol
(
identifier
z
symbol
,
integerConstant
0
symbol
,
identifier
T
symbol
)
symbol
{
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: 
symbol
,
identifier
z
symbol
+
integerConstant
1
symbol
)
symbol
;
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
D
symbol
)
symbol
;
identifier
NewLine
keyword
int
identifier
ans
symbol
=
identifier
INF
symbol
;
identifier
NewLine
identifier
FO
symbol
(
identifier
i
symbol
,
integerConstant
0
symbol
,
identifier
D
symbol
)
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
P
symbol
[
identifier
i
symbol
]
symbol
)
symbol
;
identifier
NewLine
identifier
FO
symbol
(
identifier
i
symbol
,
integerConstant
1
symbol
,
integerConstant
1001
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
nSpec
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
FO
symbol
(
identifier
p
symbol
,
integerConstant
0
symbol
,
identifier
D
symbol
)
symbol
{
identifier
NewLine
identifier
nSpec
symbol
+
symbol
=
symbol
(
identifier
P
symbol
[
identifier
p
symbol
]
symbol
/
identifier
i
symbol
)
symbol
+
symbol
(
symbol
(
identifier
P
symbol
[
identifier
p
symbol
]
identifier
i
symbol
)
symbol
>
integerConstant
0
symbol
)
symbol
-
integerConstant
1
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
ans
symbol
=
identifier
min
symbol
(
identifier
ans
symbol
,
identifier
nSpec
symbol
+
identifier
i
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
printf
symbol
(
stringConstant
%d\n
symbol
,
identifier
ans
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/AntiForest.2.cpp file...

identifier
include
symbol
<
identifier
bits
symbol
/
identifier
stdc
symbol
+
symbol
+
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
NewLine
identifier
define
identifier
INF
integerConstant
1000000010
identifier
NewLine
identifier
define
identifier
FO
symbol
(
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
for
symbol
(
keyword
int
symbol
(
identifier
i
symbol
)
symbol
=
symbol
(
identifier
a
symbol
)
symbol
;
symbol
(
identifier
i
symbol
)
symbol
<
symbol
(
identifier
b
symbol
)
symbol
;
symbol
+
symbol
+
symbol
(
identifier
i
symbol
)
symbol
)
identifier
NewLine
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
define
identifier
mp
identifier
make
identifier
pair
identifier
NewLine
identifier
define
identifier
fi
identifier
first
identifier
NewLine
identifier
define
identifier
se
identifier
second
identifier
NewLine
identifier
typedef
identifier
pair
symbol
<
keyword
int
symbol
,
keyword
int
symbol
>
identifier
pii
symbol
;
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
define
identifier
TARGET
symbol
-
integerConstant
1
identifier
NewLine
identifier
define
identifier
MAX
identifier
L
integerConstant
10005
identifier
NewLine
keyword
int
identifier
T
symbol
;
identifier
NewLine
identifier
long
identifier
long
identifier
L
symbol
,
identifier
X
symbol
;
identifier
NewLine
keyword
char
identifier
inp
symbol
[
identifier
MAX
identifier
L
symbol
]
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
multM
symbol
[
integerConstant
5
symbol
]
symbol
[
integerConstant
5
symbol
]
symbol
=
symbol
{
identifier
NewLine
symbol
{
integerConstant
0
symbol
,
integerConstant
0
symbol
,
integerConstant
0
symbol
,
integerConstant
0
symbol
,
integerConstant
0
symbol
}
symbol
,
identifier
NewLine
symbol
{
integerConstant
0
symbol
,
integerConstant
1
symbol
,
integerConstant
2
symbol
,
integerConstant
3
symbol
,
integerConstant
4
symbol
}
symbol
,
identifier
NewLine
symbol
{
integerConstant
0
symbol
,
integerConstant
2
symbol
,
symbol
-
integerConstant
1
symbol
,
integerConstant
4
symbol
,
symbol
-
integerConstant
3
symbol
}
symbol
,
identifier
NewLine
symbol
{
integerConstant
0
symbol
,
integerConstant
3
symbol
,
symbol
-
integerConstant
4
symbol
,
symbol
-
integerConstant
1
symbol
,
integerConstant
2
symbol
}
symbol
,
identifier
NewLine
symbol
{
integerConstant
0
symbol
,
integerConstant
4
symbol
,
integerConstant
3
symbol
,
symbol
-
integerConstant
2
symbol
,
symbol
-
integerConstant
1
symbol
}
identifier
NewLine
symbol
}
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
quarMult
symbol
(
keyword
int
identifier
a
symbol
,
keyword
int
identifier
b
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
sgn
symbol
=
symbol
(
identifier
a
symbol
*
identifier
b
symbol
)
symbol
<
integerConstant
0
symbol
;
identifier
NewLine
identifier
a
symbol
=
identifier
abs
symbol
(
identifier
a
symbol
)
symbol
;
identifier
NewLine
identifier
b
symbol
=
identifier
abs
symbol
(
identifier
b
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
sgn
symbol
)
keyword
return
symbol
-
identifier
multM
symbol
[
identifier
a
symbol
]
symbol
[
identifier
b
symbol
]
symbol
;
identifier
NewLine
keyword
else
keyword
return
identifier
multM
symbol
[
identifier
a
symbol
]
symbol
[
identifier
b
symbol
]
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
int
identifier
nYes
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
symbol
{
identifier
NewLine
identifier
freopen
symbol
(
stringConstant
q3.in
symbol
,
stringConstant
r
symbol
,
identifier
stdin
symbol
)
symbol
;
identifier
NewLine
identifier
freopen
symbol
(
stringConstant
q3.out
symbol
,
stringConstant
w
symbol
,
identifier
stdout
symbol
)
symbol
;
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
T
symbol
)
symbol
;
identifier
NewLine
identifier
FO
symbol
(
identifier
z
symbol
,
integerConstant
0
symbol
,
identifier
T
symbol
)
symbol
{
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: 
symbol
,
identifier
z
symbol
+
integerConstant
1
symbol
)
symbol
;
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%lld %lld
symbol
,
symbol
&
identifier
L
symbol
,
symbol
&
identifier
X
symbol
)
symbol
;
identifier
NewLine
identifier
long
identifier
long
identifier
totLength
symbol
=
identifier
L
symbol
*
identifier
X
symbol
;
identifier
NewLine
identifier
long
identifier
long
identifier
m4
symbol
=
identifier
X
integerConstant
4
symbol
;
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
 %s
symbol
,
identifier
inp
symbol
)
symbol
;
identifier
NewLine
identifier
FO
symbol
(
identifier
i
symbol
,
integerConstant
0
symbol
,
identifier
L
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
inp
symbol
[
identifier
i
symbol
]
symbol
=
symbol
=
identifier
i
symbol
)
identifier
inp
symbol
[
identifier
i
symbol
]
symbol
=
integerConstant
2
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
inp
symbol
[
identifier
i
symbol
]
symbol
=
symbol
=
identifier
j
symbol
)
identifier
inp
symbol
[
identifier
i
symbol
]
symbol
=
integerConstant
3
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
inp
symbol
[
identifier
i
symbol
]
symbol
=
symbol
=
identifier
k
symbol
)
identifier
inp
symbol
[
identifier
i
symbol
]
symbol
=
integerConstant
4
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
int
identifier
strRep
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
identifier
FO
symbol
(
identifier
i
symbol
,
integerConstant
0
symbol
,
identifier
L
symbol
)
symbol
{
identifier
NewLine
identifier
strRep
symbol
=
identifier
quarMult
symbol
(
identifier
strRep
symbol
,
identifier
inp
symbol
[
identifier
i
symbol
]
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
int
identifier
fRep
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
identifier
FO
symbol
(
identifier
i
symbol
,
integerConstant
0
symbol
,
identifier
m4
symbol
)
symbol
{
identifier
NewLine
identifier
fRep
symbol
=
identifier
quarMult
symbol
(
identifier
fRep
symbol
,
identifier
strRep
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
fRep
symbol
=
identifier
TARGET
symbol
)
symbol
{
identifier
NewLine
identifier
printf
symbol
(
stringConstant
NO\n
symbol
)
symbol
;
identifier
NewLine
identifier
continue
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
int
identifier
startRep
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
identifier
long
identifier
long
identifier
fStar
symbol
=
symbol
-
integerConstant
1
symbol
;
identifier
NewLine
identifier
for
symbol
(
identifier
long
identifier
long
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
min
symbol
(
identifier
totLength
symbol
,
integerConstant
5
symbol
*
identifier
L
symbol
)
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
startRep
symbol
=
identifier
quarMult
symbol
(
identifier
startRep
symbol
,
identifier
inp
symbol
[
identifier
i
identifier
L
symbol
]
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
startRep
symbol
=
symbol
=
integerConstant
2
symbol
)
symbol
{
identifier
NewLine
identifier
fStar
symbol
=
identifier
i
symbol
;
identifier
NewLine
identifier
break
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
startRep
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
identifier
long
identifier
long
identifier
sStar
symbol
=
symbol
-
integerConstant
1
symbol
;
identifier
NewLine
identifier
for
symbol
(
identifier
long
identifier
long
identifier
i
symbol
=
identifier
totLength
symbol
-
integerConstant
1
symbol
;
identifier
i
symbol
>
symbol
=
identifier
max
symbol
(
integerConstant
0
identifier
ll
symbol
,
identifier
totLength
symbol
-
integerConstant
5
symbol
*
identifier
L
symbol
)
symbol
;
identifier
i
symbol
-
symbol
-
symbol
)
symbol
{
identifier
NewLine
identifier
startRep
symbol
=
identifier
quarMult
symbol
(
identifier
inp
symbol
[
identifier
i
identifier
L
symbol
]
symbol
,
identifier
startRep
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
startRep
symbol
=
symbol
=
integerConstant
4
symbol
)
symbol
{
identifier
NewLine
identifier
sStar
symbol
=
identifier
i
symbol
;
identifier
NewLine
identifier
break
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
fStar
symbol
=
symbol
=
symbol
-
integerConstant
1
symbol
|
symbol
|
identifier
sStar
symbol
=
symbol
=
symbol
-
integerConstant
1
symbol
)
symbol
{
identifier
NewLine
identifier
printf
symbol
(
stringConstant
NO\n
symbol
)
symbol
;
identifier
NewLine
identifier
continue
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
fStar
symbol
<
identifier
sStar
symbol
)
symbol
{
identifier
NewLine
identifier
printf
symbol
(
stringConstant
YES\n
symbol
)
symbol
;
identifier
NewLine
identifier
nYes
symbol
+
symbol
+
symbol
;
identifier
NewLine
symbol
}
keyword
else
symbol
{
identifier
NewLine
identifier
printf
symbol
(
stringConstant
NO\n
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/apiad.0.cpp file...

identifier
include
symbol
<
identifier
bits
symbol
/
identifier
stdc
symbol
+
symbol
+
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
define
identifier
rep
symbol
(
identifier
i
symbol
,
identifier
a
symbol
,
identifier
n
symbol
)
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
identifier
a
symbol
;
identifier
i
symbol
<
identifier
n
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
define
identifier
per
symbol
(
identifier
i
symbol
,
identifier
a
symbol
,
identifier
n
symbol
)
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
identifier
n
symbol
-
integerConstant
1
symbol
;
identifier
i
symbol
>
symbol
=
identifier
a
symbol
;
identifier
i
symbol
-
symbol
-
symbol
)
identifier
NewLine
identifier
define
identifier
pb
identifier
push
identifier
back
identifier
NewLine
identifier
define
identifier
mp
identifier
make
identifier
pair
identifier
NewLine
identifier
define
identifier
all
symbol
(
identifier
x
symbol
)
symbol
(
identifier
x
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
,
symbol
(
identifier
x
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
identifier
NewLine
identifier
define
identifier
SZ
symbol
(
identifier
x
symbol
)
symbol
(
symbol
(
keyword
int
symbol
)
symbol
(
identifier
x
symbol
)
symbol
.
identifier
size
symbol
(
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
fi
identifier
first
identifier
NewLine
identifier
define
identifier
se
identifier
second
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
keyword
int
symbol
>
identifier
VI
symbol
;
identifier
NewLine
identifier
typedef
identifier
long
identifier
long
identifier
ll
symbol
;
identifier
NewLine
identifier
typedef
identifier
pair
symbol
<
keyword
int
symbol
,
keyword
int
symbol
>
identifier
PII
symbol
;
identifier
NewLine
identifier
const
identifier
ll
identifier
mod
symbol
=
integerConstant
1000000007
symbol
;
identifier
NewLine
identifier
ll
identifier
powmod
symbol
(
identifier
ll
identifier
a
symbol
,
identifier
ll
identifier
b
symbol
)
symbol
{
identifier
ll
identifier
res
symbol
=
integerConstant
1
symbol
;
identifier
a
symbol
=
identifier
mod
symbol
;
identifier
for
symbol
(
symbol
;
identifier
b
symbol
;
identifier
b
symbol
>
symbol
>
symbol
=
integerConstant
1
symbol
)
symbol
{
keyword
if
symbol
(
identifier
b
symbol
&
integerConstant
1
symbol
)
identifier
res
symbol
=
identifier
res
symbol
*
identifier
a
identifier
mod
symbol
;
identifier
a
symbol
=
identifier
a
symbol
*
identifier
a
identifier
mod
symbol
;
symbol
}
keyword
return
identifier
res
symbol
;
symbol
}
identifier
NewLine
identifier
NewLine
keyword
int
symbol
,
symbol
,
identifier
n
symbol
;
identifier
NewLine
keyword
char
identifier
s
symbol
[
integerConstant
10100
symbol
]
symbol
;
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
symbol
{
identifier
NewLine
identifier
for
symbol
(
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
symbol
)
symbol
;
symbol
;
symbol
-
symbol
-
symbol
)
symbol
{
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d%s
symbol
,
symbol
&
identifier
n
symbol
,
identifier
s
symbol
)
symbol
;
identifier
NewLine
keyword
int
identifier
ss
symbol
=
integerConstant
0
symbol
,
identifier
ans
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
rep
symbol
(
identifier
i
symbol
,
integerConstant
0
symbol
,
identifier
n
symbol
+
integerConstant
1
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
ss
symbol
<
identifier
i
symbol
&
symbol
&
identifier
s
symbol
[
identifier
i
symbol
]
symbol
=
integerConstant
0
symbol
)
identifier
ans
symbol
+
symbol
=
identifier
i
symbol
-
identifier
ss
symbol
,
identifier
ss
symbol
=
identifier
i
symbol
;
identifier
NewLine
identifier
ss
symbol
+
symbol
=
identifier
s
symbol
[
identifier
i
symbol
]
symbol
-
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: %d\n
symbol
,
symbol
+
symbol
+
symbol
,
identifier
ans
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/apiad.1.cpp file...

identifier
include
symbol
<
identifier
bits
symbol
/
identifier
stdc
symbol
+
symbol
+
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
define
identifier
rep
symbol
(
identifier
i
symbol
,
identifier
a
symbol
,
identifier
n
symbol
)
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
identifier
a
symbol
;
identifier
i
symbol
<
identifier
n
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
define
identifier
per
symbol
(
identifier
i
symbol
,
identifier
a
symbol
,
identifier
n
symbol
)
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
identifier
n
symbol
-
integerConstant
1
symbol
;
identifier
i
symbol
>
symbol
=
identifier
a
symbol
;
identifier
i
symbol
-
symbol
-
symbol
)
identifier
NewLine
identifier
define
identifier
pb
identifier
push
identifier
back
identifier
NewLine
identifier
define
identifier
mp
identifier
make
identifier
pair
identifier
NewLine
identifier
define
identifier
all
symbol
(
identifier
x
symbol
)
symbol
(
identifier
x
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
,
symbol
(
identifier
x
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
identifier
NewLine
identifier
define
identifier
SZ
symbol
(
identifier
x
symbol
)
symbol
(
symbol
(
keyword
int
symbol
)
symbol
(
identifier
x
symbol
)
symbol
.
identifier
size
symbol
(
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
fi
identifier
first
identifier
NewLine
identifier
define
identifier
se
identifier
second
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
keyword
int
symbol
>
identifier
VI
symbol
;
identifier
NewLine
identifier
typedef
identifier
long
identifier
long
identifier
ll
symbol
;
identifier
NewLine
identifier
typedef
identifier
pair
symbol
<
keyword
int
symbol
,
keyword
int
symbol
>
identifier
PII
symbol
;
identifier
NewLine
identifier
const
identifier
ll
identifier
mod
symbol
=
integerConstant
1000000007
symbol
;
identifier
NewLine
identifier
ll
identifier
powmod
symbol
(
identifier
ll
identifier
a
symbol
,
identifier
ll
identifier
b
symbol
)
symbol
{
identifier
ll
identifier
res
symbol
=
integerConstant
1
symbol
;
identifier
a
symbol
=
identifier
mod
symbol
;
identifier
for
symbol
(
symbol
;
identifier
b
symbol
;
identifier
b
symbol
>
symbol
>
symbol
=
integerConstant
1
symbol
)
symbol
{
keyword
if
symbol
(
identifier
b
symbol
&
integerConstant
1
symbol
)
identifier
res
symbol
=
identifier
res
symbol
*
identifier
a
identifier
mod
symbol
;
identifier
a
symbol
=
identifier
a
symbol
*
identifier
a
identifier
mod
symbol
;
symbol
}
keyword
return
identifier
res
symbol
;
symbol
}
identifier
NewLine
identifier
NewLine
keyword
int
symbol
,
identifier
n
symbol
,
symbol
,
identifier
a
symbol
[
integerConstant
10100
symbol
]
symbol
;
identifier
NewLine
keyword
int
identifier
gao
symbol
(
keyword
int
identifier
x
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
s
symbol
=
identifier
x
symbol
;
identifier
NewLine
identifier
rep
symbol
(
identifier
i
symbol
,
integerConstant
0
symbol
,
identifier
n
symbol
)
identifier
s
symbol
+
symbol
=
symbol
(
identifier
a
symbol
[
identifier
i
symbol
]
symbol
-
integerConstant
1
symbol
)
symbol
/
identifier
x
symbol
;
identifier
NewLine
keyword
return
identifier
s
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
symbol
{
identifier
NewLine
identifier
for
symbol
(
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
symbol
)
symbol
;
symbol
;
symbol
-
symbol
-
symbol
)
symbol
{
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
n
symbol
)
symbol
;
identifier
NewLine
identifier
rep
symbol
(
identifier
i
symbol
,
integerConstant
0
symbol
,
identifier
n
symbol
)
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
identifier
a
symbol
+
identifier
i
symbol
)
symbol
;
identifier
NewLine
keyword
int
identifier
ans
symbol
=
identifier
gao
symbol
(
integerConstant
1
symbol
)
symbol
;
identifier
NewLine
identifier
rep
symbol
(
identifier
i
symbol
,
integerConstant
2
symbol
,
integerConstant
1001
symbol
)
identifier
ans
symbol
=
identifier
min
symbol
(
identifier
ans
symbol
,
identifier
gao
symbol
(
identifier
i
symbol
)
symbol
)
symbol
;
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: %d\n
symbol
,
symbol
+
symbol
+
symbol
,
identifier
ans
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/apiad.2.cpp file...

identifier
include
symbol
<
identifier
bits
symbol
/
identifier
stdc
symbol
+
symbol
+
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
define
identifier
rep
symbol
(
identifier
i
symbol
,
identifier
a
symbol
,
identifier
n
symbol
)
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
identifier
a
symbol
;
identifier
i
symbol
<
identifier
n
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
define
identifier
per
symbol
(
identifier
i
symbol
,
identifier
a
symbol
,
identifier
n
symbol
)
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
identifier
n
symbol
-
integerConstant
1
symbol
;
identifier
i
symbol
>
symbol
=
identifier
a
symbol
;
identifier
i
symbol
-
symbol
-
symbol
)
identifier
NewLine
identifier
define
identifier
pb
identifier
push
identifier
back
identifier
NewLine
identifier
define
identifier
mp
identifier
make
identifier
pair
identifier
NewLine
identifier
define
identifier
all
symbol
(
identifier
x
symbol
)
symbol
(
identifier
x
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
,
symbol
(
identifier
x
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
identifier
NewLine
identifier
define
identifier
SZ
symbol
(
identifier
x
symbol
)
symbol
(
symbol
(
keyword
int
symbol
)
symbol
(
identifier
x
symbol
)
symbol
.
identifier
size
symbol
(
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
fi
identifier
first
identifier
NewLine
identifier
define
identifier
se
identifier
second
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
keyword
int
symbol
>
identifier
VI
symbol
;
identifier
NewLine
identifier
typedef
identifier
long
identifier
long
identifier
ll
symbol
;
identifier
NewLine
identifier
typedef
identifier
pair
symbol
<
keyword
int
symbol
,
keyword
int
symbol
>
identifier
PII
symbol
;
identifier
NewLine
identifier
const
identifier
ll
identifier
mod
symbol
=
integerConstant
1000000007
symbol
;
identifier
NewLine
identifier
ll
identifier
powmod
symbol
(
identifier
ll
identifier
a
symbol
,
identifier
ll
identifier
b
symbol
)
symbol
{
identifier
ll
identifier
res
symbol
=
integerConstant
1
symbol
;
identifier
a
symbol
=
identifier
mod
symbol
;
identifier
for
symbol
(
symbol
;
identifier
b
symbol
;
identifier
b
symbol
>
symbol
>
symbol
=
integerConstant
1
symbol
)
symbol
{
keyword
if
symbol
(
identifier
b
symbol
&
integerConstant
1
symbol
)
identifier
res
symbol
=
identifier
res
symbol
*
identifier
a
identifier
mod
symbol
;
identifier
a
symbol
=
identifier
a
symbol
*
identifier
a
identifier
mod
symbol
;
symbol
}
keyword
return
identifier
res
symbol
;
symbol
}
identifier
NewLine
identifier
NewLine
keyword
int
identifier
bb
symbol
[
integerConstant
4
symbol
]
symbol
[
integerConstant
4
symbol
]
symbol
=
symbol
{
symbol
{
integerConstant
0
symbol
,
integerConstant
1
symbol
,
integerConstant
2
symbol
,
integerConstant
3
symbol
}
symbol
,
symbol
{
integerConstant
1
symbol
,
integerConstant
4
symbol
,
integerConstant
3
symbol
,
integerConstant
6
symbol
}
symbol
,
symbol
{
integerConstant
2
symbol
,
integerConstant
7
symbol
,
integerConstant
4
symbol
,
integerConstant
1
symbol
}
symbol
,
symbol
{
integerConstant
3
symbol
,
integerConstant
2
symbol
,
integerConstant
5
symbol
,
integerConstant
4
symbol
}
symbol
}
symbol
;
identifier
NewLine
keyword
int
identifier
b
symbol
[
integerConstant
10
symbol
]
symbol
[
integerConstant
10
symbol
]
symbol
;
identifier
NewLine
keyword
int
identifier
n
symbol
,
identifier
t
symbol
[
integerConstant
10100
symbol
]
symbol
,
symbol
,
symbol
;
identifier
NewLine
keyword
char
identifier
s
symbol
[
integerConstant
10100
symbol
]
symbol
;
identifier
NewLine
identifier
ll
identifier
k
symbol
;
identifier
NewLine
identifier
bool
identifier
gao
symbol
(
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
r
symbol
=
integerConstant
0
symbol
,
identifier
pt
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
keyword
while
symbol
(
identifier
pt
symbol
<
identifier
k
symbol
*
identifier
n
symbol
&
symbol
&
identifier
r
symbol
=
integerConstant
1
symbol
)
identifier
r
symbol
=
identifier
b
symbol
[
identifier
r
symbol
]
symbol
[
identifier
t
symbol
[
symbol
(
identifier
pt
symbol
+
symbol
+
symbol
)
identifier
n
symbol
]
symbol
]
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
pt
symbol
=
symbol
=
identifier
k
symbol
*
identifier
n
symbol
)
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
keyword
while
symbol
(
identifier
pt
symbol
<
identifier
k
symbol
*
identifier
n
symbol
&
symbol
&
identifier
r
symbol
=
integerConstant
3
symbol
)
identifier
r
symbol
=
identifier
b
symbol
[
identifier
r
symbol
]
symbol
[
identifier
t
symbol
[
symbol
(
identifier
pt
symbol
+
symbol
+
symbol
)
identifier
n
symbol
]
symbol
]
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
pt
symbol
=
symbol
=
identifier
k
symbol
*
identifier
n
symbol
)
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
keyword
while
symbol
(
identifier
pt
symbol
<
identifier
k
symbol
*
identifier
n
symbol
)
identifier
r
symbol
=
identifier
b
symbol
[
identifier
r
symbol
]
symbol
[
identifier
t
symbol
[
symbol
(
identifier
pt
symbol
+
symbol
+
symbol
)
identifier
n
symbol
]
symbol
]
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
r
symbol
=
integerConstant
4
symbol
)
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
keyword
return
integerConstant
1
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
symbol
{
identifier
NewLine
identifier
rep
symbol
(
identifier
i
symbol
,
integerConstant
0
symbol
,
integerConstant
8
symbol
)
identifier
rep
symbol
(
identifier
j
symbol
,
integerConstant
0
symbol
,
integerConstant
8
symbol
)
keyword
if
symbol
(
symbol
(
identifier
i
symbol
<
integerConstant
4
symbol
)
symbol
(
identifier
j
symbol
<
integerConstant
4
symbol
)
symbol
)
identifier
b
symbol
[
identifier
i
symbol
]
symbol
[
identifier
j
symbol
]
symbol
=
identifier
bb
symbol
[
identifier
i
integerConstant
4
symbol
]
symbol
[
identifier
j
integerConstant
4
symbol
]
integerConstant
4
symbol
;
identifier
NewLine
keyword
else
identifier
b
symbol
[
identifier
i
symbol
]
symbol
[
identifier
j
symbol
]
symbol
=
identifier
bb
symbol
[
identifier
i
integerConstant
4
symbol
]
symbol
[
identifier
j
integerConstant
4
symbol
]
symbol
;
identifier
NewLine
identifier
for
symbol
(
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
symbol
)
symbol
;
symbol
;
symbol
-
symbol
-
symbol
)
symbol
{
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d%I64d
symbol
,
symbol
&
identifier
n
symbol
,
symbol
&
identifier
k
symbol
)
symbol
;
identifier
NewLine
identifier
k
symbol
=
identifier
min
symbol
(
identifier
k
symbol
,
integerConstant
20
symbol
+
identifier
k
integerConstant
4
symbol
)
symbol
;
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%s
symbol
,
identifier
s
symbol
)
symbol
;
identifier
NewLine
identifier
rep
symbol
(
identifier
i
symbol
,
integerConstant
0
symbol
,
identifier
n
symbol
)
keyword
if
symbol
(
identifier
s
symbol
[
identifier
i
symbol
]
symbol
=
symbol
=
identifier
i
symbol
)
identifier
t
symbol
[
identifier
i
symbol
]
symbol
=
integerConstant
1
symbol
;
keyword
else
keyword
if
symbol
(
identifier
s
symbol
[
identifier
i
symbol
]
symbol
=
symbol
=
identifier
j
symbol
)
identifier
t
symbol
[
identifier
i
symbol
]
symbol
=
integerConstant
2
symbol
;
keyword
else
identifier
t
symbol
[
identifier
i
symbol
]
symbol
=
integerConstant
3
symbol
;
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: %s\n
symbol
,
symbol
+
symbol
+
symbol
,
identifier
gao
symbol
(
symbol
)
stringConstant
YES
stringConstant
NO
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/azaky.0.cpp file...

identifier
include
symbol
<
identifier
vector
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
map
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
set
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
queue
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
deque
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
stack
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
algorithm
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
utility
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
numeric
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
sstream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
iostream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
iomanip
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstdio
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstring
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cmath
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstdlib
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
ctime
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cassert
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
limits
symbol
>
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
identifier
ifdef
identifier
DEBUG
identifier
NewLine
identifier
define
identifier
debug
symbol
(
symbol
.
symbol
.
symbol
.
symbol
)
identifier
printf
symbol
(
identifier
VA
identifier
ARGS
symbol
)
identifier
NewLine
identifier
define
identifier
GetTime
symbol
(
symbol
)
identifier
fprintf
symbol
(
identifier
stderr
symbol
,
stringConstant
Running time: %.3lf second\n
symbol
,
symbol
(
symbol
(
identifier
double
symbol
)
identifier
clock
symbol
(
symbol
)
symbol
)
symbol
/
identifier
CLOCKS
identifier
PER
identifier
SEC
symbol
)
identifier
NewLine
keyword
else
identifier
NewLine
identifier
define
identifier
debug
symbol
(
symbol
.
symbol
.
symbol
.
symbol
)
identifier
NewLine
identifier
define
identifier
GetTime
symbol
(
symbol
)
identifier
NewLine
identifier
endif
identifier
NewLine
identifier
NewLine
identifier
typedef
identifier
long
identifier
long
identifier
ll
symbol
;
identifier
NewLine
identifier
typedef
identifier
double
identifier
db
symbol
;
identifier
NewLine
identifier
typedef
identifier
pair
symbol
<
keyword
int
symbol
,
keyword
int
symbol
>
identifier
pii
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
keyword
int
symbol
>
identifier
vint
symbol
;
identifier
NewLine
identifier
NewLine
identifier
define
identifier
A
identifier
first
identifier
NewLine
identifier
define
identifier
B
identifier
second
identifier
NewLine
identifier
define
identifier
MP
identifier
make
identifier
pair
identifier
NewLine
identifier
define
identifier
PB
identifier
push
identifier
back
identifier
NewLine
identifier
NewLine
identifier
define
identifier
REP
symbol
(
identifier
i
symbol
,
identifier
n
symbol
)
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
symbol
(
identifier
n
symbol
)
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
identifier
NewLine
identifier
define
identifier
REPD
symbol
(
identifier
i
symbol
,
identifier
n
symbol
)
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
symbol
(
identifier
n
symbol
)
symbol
-
integerConstant
1
symbol
;
integerConstant
0
symbol
<
symbol
=
identifier
i
symbol
;
symbol
-
symbol
-
identifier
i
symbol
)
identifier
NewLine
identifier
define
identifier
FOR
symbol
(
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
symbol
(
identifier
a
symbol
)
symbol
;
identifier
i
symbol
<
symbol
=
symbol
(
identifier
b
symbol
)
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
identifier
NewLine
identifier
define
identifier
FORD
symbol
(
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
symbol
(
identifier
a
symbol
)
symbol
;
symbol
(
identifier
b
symbol
)
symbol
<
symbol
=
identifier
i
symbol
;
symbol
-
symbol
-
identifier
i
symbol
)
identifier
NewLine
identifier
define
identifier
FORIT
symbol
(
identifier
it
symbol
,
identifier
c
symbol
)
identifier
for
symbol
(
identifier
typeof
symbol
(
symbol
(
identifier
c
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
)
identifier
it
symbol
=
symbol
(
identifier
c
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
;
identifier
it
symbol
=
symbol
(
identifier
c
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
symbol
;
identifier
it
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
define
identifier
ALL
symbol
(
identifier
a
symbol
)
symbol
(
identifier
a
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
,
symbol
(
identifier
a
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
identifier
NewLine
identifier
define
identifier
SZ
symbol
(
identifier
a
symbol
)
symbol
(
symbol
(
keyword
int
symbol
)
symbol
(
identifier
a
symbol
)
symbol
.
identifier
size
symbol
(
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
RESET
symbol
(
identifier
a
symbol
,
identifier
x
symbol
)
identifier
memset
symbol
(
identifier
a
symbol
,
identifier
x
symbol
,
identifier
sizeof
symbol
(
identifier
a
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
EXIST
symbol
(
identifier
a
symbol
,
identifier
s
symbol
)
symbol
(
symbol
(
identifier
s
symbol
)
symbol
.
identifier
find
symbol
(
identifier
a
symbol
)
symbol
=
symbol
(
identifier
s
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
MX
symbol
(
identifier
a
symbol
,
identifier
b
symbol
)
identifier
a
symbol
=
identifier
max
symbol
(
symbol
(
identifier
a
symbol
)
symbol
,
symbol
(
identifier
b
symbol
)
symbol
)
symbol
;
identifier
NewLine
identifier
define
identifier
MN
symbol
(
identifier
a
symbol
,
identifier
b
symbol
)
identifier
a
symbol
=
identifier
min
symbol
(
symbol
(
identifier
a
symbol
)
symbol
,
symbol
(
identifier
b
symbol
)
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
identifier
inline
keyword
void
identifier
OPEN
symbol
(
identifier
const
identifier
string
symbol
&
identifier
s
symbol
)
symbol
{
identifier
NewLine
identifier
freopen
symbol
(
symbol
(
identifier
s
symbol
+
symbol
.in
symbol
)
symbol
.
identifier
c
identifier
str
symbol
(
symbol
)
symbol
,
stringConstant
r
symbol
,
identifier
stdin
symbol
)
symbol
;
identifier
NewLine
identifier
freopen
symbol
(
symbol
(
identifier
s
symbol
+
symbol
.out
symbol
)
symbol
.
identifier
c
identifier
str
symbol
(
symbol
)
symbol
,
stringConstant
w
symbol
,
identifier
stdout
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
define
identifier
MAXN
integerConstant
100100
identifier
NewLine
keyword
int
identifier
ntc
symbol
,
identifier
n
symbol
;
identifier
NewLine
keyword
char
identifier
s
symbol
[
identifier
MAXN
symbol
]
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
keyword
int
identifier
argc
symbol
,
keyword
char
symbol
*
symbol
*
identifier
argv
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
argc
symbol
=
integerConstant
1
symbol
)
symbol
{
identifier
NewLine
identifier
OPEN
symbol
(
identifier
argv
symbol
[
integerConstant
1
symbol
]
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
ntc
symbol
)
symbol
;
identifier
NewLine
identifier
FOR
symbol
(
identifier
itc
symbol
,
integerConstant
1
symbol
,
identifier
ntc
symbol
)
symbol
{
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d%s
symbol
,
symbol
&
identifier
n
symbol
,
identifier
s
symbol
)
symbol
;
identifier
NewLine
keyword
int
identifier
ans
symbol
=
integerConstant
0
symbol
,
identifier
standing
symbol
=
identifier
s
symbol
[
integerConstant
0
symbol
]
symbol
-
integerConstant
0
symbol
;
identifier
NewLine
identifier
FOR
symbol
(
identifier
i
symbol
,
integerConstant
1
symbol
,
identifier
n
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
standing
symbol
<
identifier
i
symbol
)
symbol
{
identifier
NewLine
identifier
ans
symbol
+
symbol
=
identifier
i
symbol
-
identifier
standing
symbol
;
identifier
NewLine
identifier
standing
symbol
=
identifier
i
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
standing
symbol
+
symbol
=
identifier
s
symbol
[
identifier
i
symbol
]
symbol
-
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: %d\n
symbol
,
identifier
itc
symbol
,
identifier
ans
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
symbol
}
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/azaky.1.cpp file...

identifier
include
symbol
<
identifier
vector
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
map
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
set
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
queue
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
deque
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
stack
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
algorithm
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
utility
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
numeric
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
sstream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
iostream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
iomanip
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstdio
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstring
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cmath
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstdlib
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
ctime
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cassert
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
limits
symbol
>
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
identifier
ifdef
identifier
DEBUG
identifier
NewLine
identifier
define
identifier
debug
symbol
(
symbol
.
symbol
.
symbol
.
symbol
)
identifier
printf
symbol
(
identifier
VA
identifier
ARGS
symbol
)
identifier
NewLine
identifier
define
identifier
GetTime
symbol
(
symbol
)
identifier
fprintf
symbol
(
identifier
stderr
symbol
,
stringConstant
Running time: %.3lf second\n
symbol
,
symbol
(
symbol
(
identifier
double
symbol
)
identifier
clock
symbol
(
symbol
)
symbol
)
symbol
/
identifier
CLOCKS
identifier
PER
identifier
SEC
symbol
)
identifier
NewLine
keyword
else
identifier
NewLine
identifier
define
identifier
debug
symbol
(
symbol
.
symbol
.
symbol
.
symbol
)
identifier
NewLine
identifier
define
identifier
GetTime
symbol
(
symbol
)
identifier
NewLine
identifier
endif
identifier
NewLine
identifier
NewLine
identifier
typedef
identifier
long
identifier
long
identifier
ll
symbol
;
identifier
NewLine
identifier
typedef
identifier
double
identifier
db
symbol
;
identifier
NewLine
identifier
typedef
identifier
pair
symbol
<
keyword
int
symbol
,
keyword
int
symbol
>
identifier
pii
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
keyword
int
symbol
>
identifier
vint
symbol
;
identifier
NewLine
identifier
NewLine
identifier
define
identifier
A
identifier
first
identifier
NewLine
identifier
define
identifier
B
identifier
second
identifier
NewLine
identifier
define
identifier
MP
identifier
make
identifier
pair
identifier
NewLine
identifier
define
identifier
PB
identifier
push
identifier
back
identifier
NewLine
identifier
NewLine
identifier
define
identifier
REP
symbol
(
identifier
i
symbol
,
identifier
n
symbol
)
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
symbol
(
identifier
n
symbol
)
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
identifier
NewLine
identifier
define
identifier
REPD
symbol
(
identifier
i
symbol
,
identifier
n
symbol
)
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
symbol
(
identifier
n
symbol
)
symbol
-
integerConstant
1
symbol
;
integerConstant
0
symbol
<
symbol
=
identifier
i
symbol
;
symbol
-
symbol
-
identifier
i
symbol
)
identifier
NewLine
identifier
define
identifier
FOR
symbol
(
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
symbol
(
identifier
a
symbol
)
symbol
;
identifier
i
symbol
<
symbol
=
symbol
(
identifier
b
symbol
)
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
identifier
NewLine
identifier
define
identifier
FORD
symbol
(
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
symbol
(
identifier
a
symbol
)
symbol
;
symbol
(
identifier
b
symbol
)
symbol
<
symbol
=
identifier
i
symbol
;
symbol
-
symbol
-
identifier
i
symbol
)
identifier
NewLine
identifier
define
identifier
FORIT
symbol
(
identifier
it
symbol
,
identifier
c
symbol
)
identifier
for
symbol
(
identifier
typeof
symbol
(
symbol
(
identifier
c
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
)
identifier
it
symbol
=
symbol
(
identifier
c
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
;
identifier
it
symbol
=
symbol
(
identifier
c
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
symbol
;
identifier
it
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
define
identifier
ALL
symbol
(
identifier
a
symbol
)
symbol
(
identifier
a
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
,
symbol
(
identifier
a
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
identifier
NewLine
identifier
define
identifier
SZ
symbol
(
identifier
a
symbol
)
symbol
(
symbol
(
keyword
int
symbol
)
symbol
(
identifier
a
symbol
)
symbol
.
identifier
size
symbol
(
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
RESET
symbol
(
identifier
a
symbol
,
identifier
x
symbol
)
identifier
memset
symbol
(
identifier
a
symbol
,
identifier
x
symbol
,
identifier
sizeof
symbol
(
identifier
a
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
EXIST
symbol
(
identifier
a
symbol
,
identifier
s
symbol
)
symbol
(
symbol
(
identifier
s
symbol
)
symbol
.
identifier
find
symbol
(
identifier
a
symbol
)
symbol
=
symbol
(
identifier
s
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
MX
symbol
(
identifier
a
symbol
,
identifier
b
symbol
)
identifier
a
symbol
=
identifier
max
symbol
(
symbol
(
identifier
a
symbol
)
symbol
,
symbol
(
identifier
b
symbol
)
symbol
)
symbol
;
identifier
NewLine
identifier
define
identifier
MN
symbol
(
identifier
a
symbol
,
identifier
b
symbol
)
identifier
a
symbol
=
identifier
min
symbol
(
symbol
(
identifier
a
symbol
)
symbol
,
symbol
(
identifier
b
symbol
)
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
identifier
inline
keyword
void
identifier
OPEN
symbol
(
identifier
const
identifier
string
symbol
&
identifier
s
symbol
)
symbol
{
identifier
NewLine
identifier
freopen
symbol
(
symbol
(
identifier
s
symbol
+
symbol
.in
symbol
)
symbol
.
identifier
c
identifier
str
symbol
(
symbol
)
symbol
,
stringConstant
r
symbol
,
identifier
stdin
symbol
)
symbol
;
identifier
NewLine
identifier
freopen
symbol
(
symbol
(
identifier
s
symbol
+
symbol
.out
symbol
)
symbol
.
identifier
c
identifier
str
symbol
(
symbol
)
symbol
,
stringConstant
w
symbol
,
identifier
stdout
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
define
identifier
MAXN
integerConstant
1100
identifier
NewLine
keyword
int
identifier
ntc
symbol
,
identifier
n
symbol
,
identifier
a
symbol
[
identifier
MAXN
symbol
]
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
keyword
int
identifier
argc
symbol
,
keyword
char
symbol
*
symbol
*
identifier
argv
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
argc
symbol
=
integerConstant
1
symbol
)
symbol
{
identifier
NewLine
identifier
OPEN
symbol
(
identifier
argv
symbol
[
integerConstant
1
symbol
]
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
ntc
symbol
)
symbol
;
identifier
NewLine
identifier
FOR
symbol
(
identifier
itc
symbol
,
integerConstant
1
symbol
,
identifier
ntc
symbol
)
symbol
{
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
n
symbol
)
symbol
;
identifier
NewLine
identifier
REP
symbol
(
identifier
i
symbol
,
identifier
n
symbol
)
symbol
{
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
a
symbol
[
identifier
i
symbol
]
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
int
identifier
ans
symbol
=
integerConstant
1000
symbol
;
identifier
NewLine
identifier
FOR
symbol
(
identifier
cut
symbol
,
integerConstant
1
symbol
,
integerConstant
1000
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
interrupt
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
REP
symbol
(
identifier
i
symbol
,
identifier
n
symbol
)
symbol
{
identifier
NewLine
identifier
interrupt
symbol
+
symbol
=
symbol
(
identifier
a
symbol
[
identifier
i
symbol
]
symbol
-
integerConstant
1
symbol
)
symbol
/
identifier
cut
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
MN
symbol
(
identifier
ans
symbol
,
identifier
interrupt
symbol
+
identifier
cut
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: %d\n
symbol
,
identifier
itc
symbol
,
identifier
ans
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
symbol
}
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/azaky.2.cpp file...

identifier
include
symbol
<
identifier
vector
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
map
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
set
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
queue
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
deque
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
stack
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
algorithm
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
utility
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
numeric
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
sstream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
iostream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
iomanip
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstdio
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstring
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cmath
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstdlib
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
ctime
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cassert
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
limits
symbol
>
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
identifier
ifdef
identifier
DEBUG
identifier
NewLine
identifier
define
identifier
debug
symbol
(
symbol
.
symbol
.
symbol
.
symbol
)
identifier
printf
symbol
(
identifier
VA
identifier
ARGS
symbol
)
identifier
NewLine
identifier
define
identifier
GetTime
symbol
(
symbol
)
identifier
fprintf
symbol
(
identifier
stderr
symbol
,
stringConstant
Running time: %.3lf second\n
symbol
,
symbol
(
symbol
(
identifier
double
symbol
)
identifier
clock
symbol
(
symbol
)
symbol
)
symbol
/
identifier
CLOCKS
identifier
PER
identifier
SEC
symbol
)
identifier
NewLine
keyword
else
identifier
NewLine
identifier
define
identifier
debug
symbol
(
symbol
.
symbol
.
symbol
.
symbol
)
identifier
NewLine
identifier
define
identifier
GetTime
symbol
(
symbol
)
identifier
NewLine
identifier
endif
identifier
NewLine
identifier
NewLine
identifier
typedef
identifier
long
identifier
long
identifier
ll
symbol
;
identifier
NewLine
identifier
typedef
identifier
double
identifier
db
symbol
;
identifier
NewLine
identifier
typedef
identifier
pair
symbol
<
keyword
int
symbol
,
keyword
int
symbol
>
identifier
pii
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
keyword
int
symbol
>
identifier
vint
symbol
;
identifier
NewLine
identifier
NewLine
identifier
define
identifier
A
identifier
first
identifier
NewLine
identifier
define
identifier
B
identifier
second
identifier
NewLine
identifier
define
identifier
MP
identifier
make
identifier
pair
identifier
NewLine
identifier
define
identifier
PB
identifier
push
identifier
back
identifier
NewLine
identifier
NewLine
identifier
define
identifier
REP
symbol
(
identifier
i
symbol
,
identifier
n
symbol
)
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
symbol
(
identifier
n
symbol
)
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
identifier
NewLine
identifier
define
identifier
REPD
symbol
(
identifier
i
symbol
,
identifier
n
symbol
)
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
symbol
(
identifier
n
symbol
)
symbol
-
integerConstant
1
symbol
;
integerConstant
0
symbol
<
symbol
=
identifier
i
symbol
;
symbol
-
symbol
-
identifier
i
symbol
)
identifier
NewLine
identifier
define
identifier
FOR
symbol
(
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
symbol
(
identifier
a
symbol
)
symbol
;
identifier
i
symbol
<
symbol
=
symbol
(
identifier
b
symbol
)
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
identifier
NewLine
identifier
define
identifier
FORD
symbol
(
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
symbol
(
identifier
a
symbol
)
symbol
;
symbol
(
identifier
b
symbol
)
symbol
<
symbol
=
identifier
i
symbol
;
symbol
-
symbol
-
identifier
i
symbol
)
identifier
NewLine
identifier
define
identifier
FORIT
symbol
(
identifier
it
symbol
,
identifier
c
symbol
)
identifier
for
symbol
(
identifier
typeof
symbol
(
symbol
(
identifier
c
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
)
identifier
it
symbol
=
symbol
(
identifier
c
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
;
identifier
it
symbol
=
symbol
(
identifier
c
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
symbol
;
identifier
it
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
define
identifier
ALL
symbol
(
identifier
a
symbol
)
symbol
(
identifier
a
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
,
symbol
(
identifier
a
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
identifier
NewLine
identifier
define
identifier
SZ
symbol
(
identifier
a
symbol
)
symbol
(
symbol
(
keyword
int
symbol
)
symbol
(
identifier
a
symbol
)
symbol
.
identifier
size
symbol
(
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
RESET
symbol
(
identifier
a
symbol
,
identifier
x
symbol
)
identifier
memset
symbol
(
identifier
a
symbol
,
identifier
x
symbol
,
identifier
sizeof
symbol
(
identifier
a
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
EXIST
symbol
(
identifier
a
symbol
,
identifier
s
symbol
)
symbol
(
symbol
(
identifier
s
symbol
)
symbol
.
identifier
find
symbol
(
identifier
a
symbol
)
symbol
=
symbol
(
identifier
s
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
MX
symbol
(
identifier
a
symbol
,
identifier
b
symbol
)
identifier
a
symbol
=
identifier
max
symbol
(
symbol
(
identifier
a
symbol
)
symbol
,
symbol
(
identifier
b
symbol
)
symbol
)
symbol
;
identifier
NewLine
identifier
define
identifier
MN
symbol
(
identifier
a
symbol
,
identifier
b
symbol
)
identifier
a
symbol
=
identifier
min
symbol
(
symbol
(
identifier
a
symbol
)
symbol
,
symbol
(
identifier
b
symbol
)
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
identifier
inline
keyword
void
identifier
OPEN
symbol
(
identifier
const
identifier
string
symbol
&
identifier
s
symbol
)
symbol
{
identifier
NewLine
identifier
freopen
symbol
(
symbol
(
identifier
s
symbol
+
symbol
.in
symbol
)
symbol
.
identifier
c
identifier
str
symbol
(
symbol
)
symbol
,
stringConstant
r
symbol
,
identifier
stdin
symbol
)
symbol
;
identifier
NewLine
identifier
freopen
symbol
(
symbol
(
identifier
s
symbol
+
symbol
.out
symbol
)
symbol
.
identifier
c
identifier
str
symbol
(
symbol
)
symbol
,
stringConstant
w
symbol
,
identifier
stdout
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
const
keyword
int
identifier
qvalue
symbol
[
integerConstant
4
symbol
]
symbol
[
integerConstant
4
symbol
]
symbol
=
symbol
{
identifier
NewLine
symbol
{
integerConstant
0
symbol
,
integerConstant
1
symbol
,
integerConstant
2
symbol
,
integerConstant
3
symbol
}
symbol
,
identifier
NewLine
symbol
{
integerConstant
1
symbol
,
integerConstant
0
symbol
,
integerConstant
3
symbol
,
integerConstant
2
symbol
}
symbol
,
identifier
NewLine
symbol
{
integerConstant
2
symbol
,
integerConstant
3
symbol
,
integerConstant
0
symbol
,
integerConstant
1
symbol
}
symbol
,
identifier
NewLine
symbol
{
integerConstant
3
symbol
,
integerConstant
2
symbol
,
integerConstant
1
symbol
,
integerConstant
0
symbol
}
identifier
NewLine
symbol
}
symbol
;
identifier
NewLine
identifier
const
keyword
int
identifier
qsign
symbol
[
integerConstant
4
symbol
]
symbol
[
integerConstant
4
symbol
]
symbol
=
symbol
{
identifier
NewLine
symbol
{
integerConstant
1
symbol
,
integerConstant
1
symbol
,
integerConstant
1
symbol
,
integerConstant
1
symbol
}
symbol
,
identifier
NewLine
symbol
{
integerConstant
1
symbol
,
symbol
-
integerConstant
1
symbol
,
integerConstant
1
symbol
,
symbol
-
integerConstant
1
symbol
}
symbol
,
identifier
NewLine
symbol
{
integerConstant
1
symbol
,
symbol
-
integerConstant
1
symbol
,
symbol
-
integerConstant
1
symbol
,
integerConstant
1
symbol
}
symbol
,
identifier
NewLine
symbol
{
integerConstant
1
symbol
,
integerConstant
1
symbol
,
symbol
-
integerConstant
1
symbol
,
symbol
-
integerConstant
1
symbol
}
identifier
NewLine
symbol
}
symbol
;
identifier
NewLine
identifier
NewLine
identifier
struct
identifier
Quaternion
symbol
{
identifier
NewLine
identifier
Quaternion
symbol
(
keyword
int
identifier
sign
symbol
=
integerConstant
1
symbol
,
keyword
int
identifier
value
symbol
=
integerConstant
0
symbol
)
symbol
{
identifier
NewLine
keyword
this
symbol
-
symbol
>
identifier
sign
symbol
=
identifier
sign
symbol
;
identifier
NewLine
keyword
this
symbol
-
symbol
>
identifier
value
symbol
=
identifier
value
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
int
identifier
sign
symbol
;
keyword
int
identifier
value
symbol
;
symbol
}
symbol
;
identifier
NewLine
identifier
NewLine
keyword
void
identifier
print
symbol
(
identifier
Quaternion
identifier
q
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
q
symbol
.
identifier
sign
symbol
=
symbol
=
symbol
-
integerConstant
1
symbol
)
identifier
printf
symbol
(
symbol
-
symbol
)
symbol
;
identifier
NewLine
identifier
switch
symbol
(
identifier
q
symbol
.
identifier
value
symbol
)
symbol
{
identifier
NewLine
identifier
case
integerConstant
0
identifier
printf
symbol
(
stringConstant
1
symbol
)
symbol
;
identifier
break
symbol
;
identifier
NewLine
identifier
case
integerConstant
1
identifier
printf
symbol
(
stringConstant
i
symbol
)
symbol
;
identifier
break
symbol
;
identifier
NewLine
identifier
case
integerConstant
2
identifier
printf
symbol
(
stringConstant
j
symbol
)
symbol
;
identifier
break
symbol
;
identifier
NewLine
identifier
case
integerConstant
3
identifier
printf
symbol
(
stringConstant
k
symbol
)
symbol
;
identifier
break
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
Quaternion
identifier
operator
symbol
*
symbol
(
identifier
const
identifier
Quaternion
symbol
&
identifier
a
symbol
,
identifier
const
identifier
Quaternion
symbol
&
identifier
b
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
sign
symbol
=
identifier
qsign
symbol
[
identifier
a
symbol
.
identifier
value
symbol
]
symbol
[
identifier
b
symbol
.
identifier
value
symbol
]
symbol
*
identifier
a
symbol
.
identifier
sign
symbol
*
identifier
b
symbol
.
identifier
sign
symbol
;
identifier
NewLine
keyword
int
identifier
value
symbol
=
identifier
qvalue
symbol
[
identifier
a
symbol
.
identifier
value
symbol
]
symbol
[
identifier
b
symbol
.
identifier
value
symbol
]
symbol
;
identifier
NewLine
identifier
Quaternion
identifier
result
symbol
(
identifier
qsign
symbol
[
identifier
a
symbol
.
identifier
value
symbol
]
symbol
[
identifier
b
symbol
.
identifier
value
symbol
]
symbol
*
identifier
a
symbol
.
identifier
sign
symbol
*
identifier
b
symbol
.
identifier
sign
symbol
,
identifier
qvalue
symbol
[
identifier
a
symbol
.
identifier
value
symbol
]
symbol
[
identifier
b
symbol
.
identifier
value
symbol
]
symbol
)
symbol
;
identifier
NewLine
keyword
return
identifier
result
symbol
;
identifier
NewLine
keyword
return
identifier
Quaternion
symbol
(
identifier
qsign
symbol
[
identifier
a
symbol
.
identifier
value
symbol
]
symbol
[
identifier
b
symbol
.
identifier
value
symbol
]
symbol
*
identifier
a
symbol
.
identifier
sign
symbol
*
identifier
b
symbol
.
identifier
sign
symbol
,
identifier
qvalue
symbol
[
identifier
a
symbol
.
identifier
value
symbol
]
symbol
[
identifier
b
symbol
.
identifier
value
symbol
]
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
Quaternion
identifier
power
symbol
(
identifier
Quaternion
identifier
a
symbol
,
identifier
ll
identifier
p
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
p
symbol
)
symbol
{
identifier
NewLine
keyword
return
identifier
Quaternion
symbol
(
symbol
)
symbol
;
identifier
NewLine
symbol
}
keyword
else
symbol
{
identifier
NewLine
identifier
Quaternion
identifier
result
symbol
=
identifier
power
symbol
(
identifier
a
symbol
*
identifier
a
symbol
,
identifier
p
symbol
>
symbol
>
integerConstant
1
identifier
LL
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
p
symbol
&
integerConstant
1
identifier
LL
symbol
)
identifier
result
symbol
=
identifier
result
symbol
*
identifier
a
symbol
;
identifier
NewLine
keyword
return
identifier
result
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
define
identifier
MAXN
integerConstant
100100
identifier
NewLine
identifier
NewLine
keyword
int
identifier
ntc
symbol
;
identifier
NewLine
identifier
ll
identifier
l
symbol
,
identifier
x
symbol
;
identifier
NewLine
identifier
Quaternion
identifier
m
symbol
[
identifier
MAXN
symbol
]
symbol
;
identifier
NewLine
keyword
char
identifier
s
symbol
[
identifier
MAXN
symbol
]
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
keyword
int
identifier
argc
symbol
,
keyword
char
symbol
*
symbol
*
identifier
argv
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
argc
symbol
=
integerConstant
1
symbol
)
symbol
{
identifier
NewLine
identifier
OPEN
symbol
(
identifier
argv
symbol
[
integerConstant
1
symbol
]
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
ntc
symbol
)
symbol
;
identifier
NewLine
identifier
FOR
symbol
(
identifier
itc
symbol
,
integerConstant
1
symbol
,
identifier
ntc
symbol
)
symbol
{
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%lld%lld
symbol
,
symbol
&
identifier
l
symbol
,
symbol
&
identifier
x
symbol
)
symbol
;
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%s
symbol
,
identifier
s
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
identifier
m
symbol
[
integerConstant
0
symbol
]
symbol
=
identifier
Quaternion
symbol
(
symbol
)
symbol
;
identifier
NewLine
identifier
FOR
symbol
(
identifier
i
symbol
,
integerConstant
1
symbol
,
identifier
l
symbol
)
symbol
{
identifier
NewLine
identifier
Quaternion
identifier
temp
symbol
;
identifier
NewLine
identifier
switch
symbol
(
identifier
s
symbol
[
identifier
i
symbol
-
integerConstant
1
symbol
]
symbol
)
symbol
{
identifier
NewLine
identifier
case
identifier
i
identifier
temp
symbol
.
identifier
value
symbol
=
integerConstant
1
symbol
;
identifier
break
symbol
;
identifier
NewLine
identifier
case
identifier
j
identifier
temp
symbol
.
identifier
value
symbol
=
integerConstant
2
symbol
;
identifier
break
symbol
;
identifier
NewLine
identifier
case
identifier
k
identifier
temp
symbol
.
identifier
value
symbol
=
integerConstant
3
symbol
;
identifier
break
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
m
symbol
[
identifier
i
symbol
]
symbol
=
identifier
m
symbol
[
identifier
i
symbol
-
integerConstant
1
symbol
]
symbol
*
identifier
temp
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
Quaternion
identifier
all
symbol
=
identifier
power
symbol
(
identifier
m
symbol
[
identifier
l
symbol
]
symbol
,
identifier
x
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
all
symbol
.
identifier
sign
symbol
=
symbol
-
integerConstant
1
symbol
|
symbol
|
identifier
all
symbol
.
identifier
value
symbol
=
integerConstant
0
symbol
)
symbol
{
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: NO\n
symbol
,
identifier
itc
symbol
)
symbol
;
identifier
NewLine
identifier
continue
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
Quaternion
identifier
map
symbol
[
integerConstant
4
symbol
]
symbol
;
identifier
NewLine
identifier
FOR
symbol
(
identifier
i
symbol
,
integerConstant
1
symbol
,
integerConstant
3
symbol
)
symbol
{
identifier
NewLine
identifier
map
symbol
[
identifier
i
symbol
]
symbol
=
identifier
map
symbol
[
identifier
i
symbol
-
integerConstant
1
symbol
]
symbol
*
identifier
m
symbol
[
identifier
l
symbol
]
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
pii
identifier
occi
symbol
,
identifier
occj
symbol
;
identifier
NewLine
identifier
occi
symbol
=
identifier
MP
symbol
(
integerConstant
4
symbol
,
integerConstant
0
symbol
)
symbol
;
identifier
NewLine
identifier
FOR
symbol
(
identifier
i
symbol
,
integerConstant
1
symbol
,
identifier
l
symbol
)
symbol
{
identifier
NewLine
identifier
REP
symbol
(
identifier
d
symbol
,
integerConstant
4
symbol
)
symbol
{
identifier
NewLine
identifier
Quaternion
identifier
temp
symbol
=
identifier
map
symbol
[
identifier
d
symbol
]
symbol
*
identifier
m
symbol
[
identifier
i
symbol
]
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
temp
symbol
.
identifier
sign
symbol
=
symbol
=
integerConstant
1
symbol
&
symbol
&
identifier
temp
symbol
.
identifier
value
symbol
=
symbol
=
integerConstant
1
symbol
)
symbol
{
identifier
NewLine
identifier
MN
symbol
(
identifier
occi
symbol
,
identifier
MP
symbol
(
identifier
d
symbol
,
identifier
i
symbol
)
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
if
symbol
(
identifier
occi
symbol
.
identifier
A
symbol
=
symbol
=
integerConstant
4
symbol
|
symbol
|
symbol
(
identifier
ll
symbol
)
identifier
occi
symbol
.
identifier
A
symbol
>
symbol
=
identifier
x
symbol
)
symbol
{
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: NO\n
symbol
,
identifier
itc
symbol
)
symbol
;
identifier
NewLine
identifier
continue
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
occj
symbol
=
identifier
MP
symbol
(
integerConstant
8
symbol
,
integerConstant
0
symbol
)
symbol
;
identifier
NewLine
identifier
FOR
symbol
(
identifier
i
symbol
,
integerConstant
1
symbol
,
identifier
l
symbol
)
symbol
{
identifier
NewLine
identifier
REP
symbol
(
identifier
d
symbol
,
integerConstant
4
symbol
)
symbol
{
identifier
NewLine
identifier
Quaternion
identifier
temp
symbol
=
identifier
map
symbol
[
identifier
d
symbol
]
symbol
*
identifier
m
symbol
[
identifier
i
symbol
]
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
temp
symbol
.
identifier
sign
symbol
=
symbol
=
integerConstant
1
symbol
&
symbol
&
identifier
temp
symbol
.
identifier
value
symbol
=
symbol
=
integerConstant
3
symbol
)
symbol
{
identifier
NewLine
identifier
pii
identifier
now
symbol
=
identifier
MP
symbol
(
identifier
d
symbol
,
identifier
i
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
now
symbol
<
identifier
occi
symbol
)
identifier
now
symbol
=
identifier
MP
symbol
(
identifier
d
symbol
+
integerConstant
4
symbol
,
identifier
i
symbol
)
symbol
;
identifier
NewLine
identifier
MN
symbol
(
identifier
occj
symbol
,
identifier
now
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
if
symbol
(
identifier
occj
symbol
.
identifier
A
symbol
=
symbol
=
integerConstant
8
symbol
|
symbol
|
symbol
(
identifier
ll
symbol
)
identifier
occj
symbol
.
identifier
A
symbol
>
symbol
=
identifier
x
symbol
)
symbol
{
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: NO\n
symbol
,
identifier
itc
symbol
)
symbol
;
identifier
NewLine
identifier
continue
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: YES\n
symbol
,
identifier
itc
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
symbol
}
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/azariamuh.0.cpp file...

identifier
NewLine
identifier
include
symbol
<
identifier
iostream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstdio
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
algorithm
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cmath
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstdlib
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
string
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstring
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
vector
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cassert
symbol
>
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
inf
symbol
=
integerConstant
1000000000
symbol
;
identifier
NewLine
identifier
typedef
identifier
long
identifier
long
identifier
LL
symbol
;
identifier
NewLine
identifier
NewLine
identifier
define
identifier
forn
symbol
(
identifier
a
symbol
,
identifier
b
symbol
,
identifier
c
symbol
)
identifier
for
symbol
(
keyword
int
symbol
(
identifier
a
symbol
)
symbol
=
symbol
(
identifier
b
symbol
)
symbol
;
symbol
(
identifier
a
symbol
)
symbol
<
symbol
=
symbol
(
identifier
c
symbol
)
symbol
;
symbol
+
symbol
+
symbol
(
identifier
a
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
reset
symbol
(
identifier
a
symbol
,
identifier
b
symbol
)
identifier
memset
symbol
(
identifier
a
symbol
,
identifier
b
symbol
,
identifier
sizeof
symbol
(
identifier
a
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
fi
identifier
first
identifier
NewLine
identifier
define
identifier
se
identifier
second
identifier
NewLine
identifier
define
identifier
mp
identifier
make
identifier
pair
identifier
NewLine
identifier
define
identifier
pb
identifier
push
identifier
back
identifier
NewLine
identifier
define
identifier
all
symbol
(
identifier
v
symbol
)
identifier
v
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
,
identifier
v
symbol
.
identifier
end
symbol
(
symbol
)
identifier
NewLine
identifier
NewLine
keyword
int
identifier
T
symbol
,
identifier
n
symbol
;
identifier
NewLine
identifier
string
identifier
s
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
T
symbol
)
symbol
;
identifier
NewLine
identifier
forn
symbol
(
identifier
cases
symbol
,
integerConstant
1
symbol
,
identifier
T
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
n
symbol
)
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
s
symbol
;
identifier
NewLine
keyword
int
identifier
cek
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
keyword
int
identifier
ans
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
forn
symbol
(
identifier
i
symbol
,
integerConstant
0
symbol
,
identifier
s
symbol
.
identifier
size
symbol
(
symbol
)
symbol
-
integerConstant
1
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
cek
symbol
<
identifier
i
symbol
)
symbol
{
identifier
NewLine
symbol
+
symbol
+
identifier
ans
symbol
;
identifier
NewLine
identifier
cek
symbol
=
identifier
i
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
cek
symbol
+
symbol
=
identifier
s
symbol
[
identifier
i
symbol
]
symbol
-
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: %d\n
symbol
,
identifier
cases
symbol
,
identifier
ans
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/azariamuh.1.cpp file...

identifier
NewLine
identifier
include
symbol
<
identifier
iostream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstdio
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
algorithm
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cmath
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstdlib
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
string
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstring
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
vector
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cassert
symbol
>
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
inf
symbol
=
integerConstant
1000000000
symbol
;
identifier
NewLine
identifier
typedef
identifier
long
identifier
long
identifier
LL
symbol
;
identifier
NewLine
identifier
NewLine
identifier
define
identifier
forn
symbol
(
identifier
a
symbol
,
identifier
b
symbol
,
identifier
c
symbol
)
identifier
for
symbol
(
keyword
int
symbol
(
identifier
a
symbol
)
symbol
=
symbol
(
identifier
b
symbol
)
symbol
;
symbol
(
identifier
a
symbol
)
symbol
<
symbol
=
symbol
(
identifier
c
symbol
)
symbol
;
symbol
+
symbol
+
symbol
(
identifier
a
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
reset
symbol
(
identifier
a
symbol
,
identifier
b
symbol
)
identifier
memset
symbol
(
identifier
a
symbol
,
identifier
b
symbol
,
identifier
sizeof
symbol
(
identifier
a
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
fi
identifier
first
identifier
NewLine
identifier
define
identifier
se
identifier
second
identifier
NewLine
identifier
define
identifier
mp
identifier
make
identifier
pair
identifier
NewLine
identifier
define
identifier
pb
identifier
push
identifier
back
identifier
NewLine
identifier
define
identifier
all
symbol
(
identifier
v
symbol
)
identifier
v
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
,
identifier
v
symbol
.
identifier
end
symbol
(
symbol
)
identifier
NewLine
identifier
NewLine
keyword
int
identifier
T
symbol
,
identifier
n
symbol
,
identifier
ans
symbol
;
identifier
NewLine
keyword
int
identifier
dp
symbol
[
integerConstant
1005
symbol
]
symbol
[
integerConstant
1005
symbol
]
symbol
;
identifier
NewLine
keyword
int
identifier
data
symbol
[
integerConstant
1005
symbol
]
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
T
symbol
)
symbol
;
identifier
NewLine
identifier
forn
symbol
(
identifier
i
symbol
,
integerConstant
0
symbol
,
integerConstant
1000
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
forn
symbol
(
identifier
j
symbol
,
integerConstant
0
symbol
,
identifier
i
symbol
)
identifier
dp
symbol
[
identifier
i
symbol
]
symbol
[
identifier
j
symbol
]
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
forn
symbol
(
identifier
j
symbol
,
identifier
i
symbol
+
integerConstant
1
symbol
,
integerConstant
1000
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
dp
symbol
[
identifier
i
symbol
]
symbol
[
identifier
j
symbol
]
symbol
=
identifier
dp
symbol
[
identifier
i
symbol
]
symbol
[
identifier
j
symbol
-
integerConstant
1
symbol
]
symbol
+
integerConstant
1
symbol
;
identifier
NewLine
identifier
forn
symbol
(
identifier
k
symbol
,
integerConstant
1
symbol
,
identifier
j
symbol
-
integerConstant
1
symbol
)
identifier
dp
symbol
[
identifier
i
symbol
]
symbol
[
identifier
j
symbol
]
symbol
=
identifier
min
symbol
(
identifier
dp
symbol
[
identifier
i
symbol
]
symbol
[
identifier
j
symbol
]
symbol
,
identifier
dp
symbol
[
identifier
i
symbol
]
symbol
[
identifier
j
symbol
-
identifier
k
symbol
]
symbol
+
identifier
dp
symbol
[
identifier
i
symbol
]
symbol
[
identifier
k
symbol
]
symbol
+
integerConstant
1
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
forn
symbol
(
identifier
cases
symbol
,
integerConstant
1
symbol
,
identifier
T
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
n
symbol
)
symbol
;
identifier
NewLine
identifier
ans
symbol
=
identifier
inf
symbol
;
identifier
NewLine
keyword
int
identifier
x
symbol
;
identifier
NewLine
identifier
forn
symbol
(
identifier
i
symbol
,
integerConstant
1
symbol
,
identifier
n
symbol
)
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
data
symbol
[
identifier
i
symbol
]
symbol
)
symbol
;
identifier
NewLine
identifier
forn
symbol
(
identifier
i
symbol
,
integerConstant
1
symbol
,
integerConstant
1000
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
int
identifier
tot
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
forn
symbol
(
identifier
j
symbol
,
integerConstant
1
symbol
,
identifier
n
symbol
)
identifier
tot
symbol
+
symbol
=
identifier
dp
symbol
[
identifier
i
symbol
]
symbol
[
identifier
data
symbol
[
identifier
j
symbol
]
symbol
]
symbol
;
identifier
NewLine
identifier
ans
symbol
=
identifier
min
symbol
(
identifier
ans
symbol
,
identifier
tot
symbol
+
identifier
i
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: %d\n
symbol
,
identifier
cases
symbol
,
identifier
ans
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/azariamuh.2.cpp file...

identifier
NewLine
identifier
include
symbol
<
identifier
iostream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstdio
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
algorithm
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cmath
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstdlib
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
string
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstring
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
vector
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cassert
symbol
>
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
inf
symbol
=
integerConstant
1000000000
symbol
;
identifier
NewLine
identifier
typedef
identifier
long
identifier
long
identifier
LL
symbol
;
identifier
NewLine
identifier
NewLine
identifier
define
identifier
forn
symbol
(
identifier
a
symbol
,
identifier
b
symbol
,
identifier
c
symbol
)
identifier
for
symbol
(
keyword
int
symbol
(
identifier
a
symbol
)
symbol
=
symbol
(
identifier
b
symbol
)
symbol
;
symbol
(
identifier
a
symbol
)
symbol
<
symbol
=
symbol
(
identifier
c
symbol
)
symbol
;
symbol
+
symbol
+
symbol
(
identifier
a
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
ford
symbol
(
identifier
a
symbol
,
identifier
b
symbol
,
identifier
c
symbol
)
identifier
for
symbol
(
keyword
int
symbol
(
identifier
a
symbol
)
symbol
=
symbol
(
identifier
b
symbol
)
symbol
;
symbol
(
identifier
a
symbol
)
symbol
>
symbol
=
symbol
(
identifier
c
symbol
)
symbol
;
symbol
-
symbol
-
symbol
(
identifier
a
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
reset
symbol
(
identifier
a
symbol
,
identifier
b
symbol
)
identifier
memset
symbol
(
identifier
a
symbol
,
identifier
b
symbol
,
identifier
sizeof
symbol
(
identifier
a
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
fi
identifier
first
identifier
NewLine
identifier
define
identifier
se
identifier
second
identifier
NewLine
identifier
define
identifier
mp
identifier
make
identifier
pair
identifier
NewLine
identifier
define
identifier
pb
identifier
push
identifier
back
identifier
NewLine
identifier
define
identifier
all
symbol
(
identifier
v
symbol
)
identifier
v
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
,
identifier
v
symbol
.
identifier
end
symbol
(
symbol
)
identifier
NewLine
identifier
NewLine
keyword
int
identifier
T
symbol
;
identifier
NewLine
keyword
int
identifier
kali
symbol
[
integerConstant
6
symbol
]
symbol
[
integerConstant
6
symbol
]
symbol
=
symbol
{
symbol
{
integerConstant
1
symbol
,
integerConstant
2
symbol
,
integerConstant
3
symbol
,
integerConstant
4
symbol
}
symbol
,
symbol
{
integerConstant
2
symbol
,
symbol
-
integerConstant
1
symbol
,
integerConstant
4
symbol
,
symbol
-
integerConstant
3
symbol
}
symbol
,
symbol
{
integerConstant
3
symbol
,
symbol
-
integerConstant
4
symbol
,
symbol
-
integerConstant
1
symbol
,
integerConstant
2
symbol
}
symbol
,
symbol
{
integerConstant
4
symbol
,
integerConstant
3
symbol
,
symbol
-
integerConstant
2
symbol
,
symbol
-
integerConstant
1
symbol
}
symbol
}
symbol
;
identifier
NewLine
keyword
int
identifier
n
symbol
;
identifier
NewLine
identifier
long
identifier
long
identifier
x
symbol
;
identifier
NewLine
identifier
string
identifier
s
symbol
;
identifier
NewLine
keyword
int
identifier
pre
symbol
[
integerConstant
10005
symbol
]
symbol
;
identifier
NewLine
keyword
int
identifier
suf
symbol
[
integerConstant
10005
symbol
]
symbol
;
identifier
NewLine
identifier
long
identifier
long
identifier
kecil
symbol
,
identifier
besar
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
mul
symbol
(
keyword
int
identifier
a
symbol
,
keyword
int
identifier
b
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
int
identifier
res
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
a
symbol
<
integerConstant
0
symbol
)
identifier
res
symbol
*
symbol
=
symbol
-
integerConstant
1
symbol
,
identifier
a
symbol
*
symbol
=
symbol
-
integerConstant
1
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
b
symbol
<
integerConstant
0
symbol
)
identifier
res
symbol
*
symbol
=
symbol
-
integerConstant
1
symbol
,
identifier
b
symbol
*
symbol
=
symbol
-
integerConstant
1
symbol
;
identifier
NewLine
keyword
return
symbol
(
identifier
res
symbol
*
identifier
kali
symbol
[
identifier
a
symbol
-
integerConstant
1
symbol
]
symbol
[
identifier
b
symbol
-
integerConstant
1
symbol
]
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
int
identifier
ubah
symbol
(
keyword
char
identifier
x
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
x
symbol
=
symbol
=
identifier
i
symbol
)
keyword
return
integerConstant
2
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
x
symbol
=
symbol
=
identifier
j
symbol
)
keyword
return
integerConstant
3
symbol
;
identifier
NewLine
keyword
return
integerConstant
4
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
int
identifier
pangkat
symbol
(
keyword
int
identifier
x
symbol
,
identifier
long
identifier
long
identifier
y
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
y
symbol
=
symbol
=
integerConstant
1
symbol
)
keyword
return
identifier
x
symbol
;
identifier
NewLine
keyword
int
identifier
temp
symbol
=
identifier
pangkat
symbol
(
identifier
x
symbol
,
identifier
y
symbol
/
integerConstant
2
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
y
integerConstant
2
symbol
=
symbol
=
integerConstant
0
symbol
)
keyword
return
identifier
mul
symbol
(
identifier
temp
symbol
,
identifier
temp
symbol
)
symbol
;
identifier
NewLine
keyword
return
identifier
mul
symbol
(
identifier
mul
symbol
(
identifier
temp
symbol
,
identifier
temp
symbol
)
symbol
,
identifier
x
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
T
symbol
)
symbol
;
identifier
NewLine
identifier
forn
symbol
(
identifier
cases
symbol
,
integerConstant
1
symbol
,
identifier
T
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: 
symbol
,
identifier
cases
symbol
)
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
n
symbol
>
symbol
>
identifier
x
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
s
symbol
;
identifier
NewLine
identifier
pre
symbol
[
integerConstant
0
symbol
]
symbol
=
identifier
ubah
symbol
(
identifier
s
symbol
[
integerConstant
0
symbol
]
symbol
)
symbol
;
identifier
NewLine
identifier
forn
symbol
(
identifier
i
symbol
,
integerConstant
1
symbol
,
identifier
n
symbol
-
integerConstant
1
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
pre
symbol
[
identifier
i
symbol
]
symbol
=
identifier
mul
symbol
(
identifier
pre
symbol
[
identifier
i
symbol
-
integerConstant
1
symbol
]
symbol
,
identifier
ubah
symbol
(
identifier
s
symbol
[
identifier
i
symbol
]
symbol
)
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
pangkat
symbol
(
identifier
pre
symbol
[
identifier
n
symbol
-
integerConstant
1
symbol
]
symbol
,
identifier
x
symbol
)
symbol
=
symbol
-
integerConstant
1
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
puts
symbol
(
stringConstant
NO
symbol
)
symbol
;
identifier
NewLine
identifier
continue
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
suf
symbol
[
identifier
n
symbol
-
integerConstant
1
symbol
]
symbol
=
identifier
ubah
symbol
(
identifier
s
symbol
[
identifier
n
symbol
-
integerConstant
1
symbol
]
symbol
)
symbol
;
identifier
NewLine
identifier
ford
symbol
(
identifier
i
symbol
,
identifier
n
symbol
-
integerConstant
2
symbol
,
integerConstant
0
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
suf
symbol
[
identifier
i
symbol
]
symbol
=
identifier
mul
symbol
(
identifier
ubah
symbol
(
identifier
s
symbol
[
identifier
i
symbol
]
symbol
)
symbol
,
identifier
suf
symbol
[
identifier
i
symbol
+
integerConstant
1
symbol
]
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
kecil
symbol
=
identifier
besar
symbol
=
symbol
-
integerConstant
1
symbol
;
identifier
NewLine
keyword
int
identifier
now
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
identifier
forn
symbol
(
identifier
i
symbol
,
integerConstant
0
symbol
,
identifier
min
symbol
(
integerConstant
32
identifier
LL
symbol
,
identifier
x
symbol
-
integerConstant
1
symbol
)
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
forn
symbol
(
identifier
j
symbol
,
integerConstant
0
symbol
,
identifier
n
symbol
-
integerConstant
1
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
mul
symbol
(
identifier
now
symbol
,
identifier
pre
symbol
[
identifier
j
symbol
]
symbol
)
symbol
=
symbol
=
integerConstant
2
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
kecil
symbol
=
identifier
i
symbol
*
identifier
n
symbol
+
identifier
j
symbol
;
identifier
NewLine
identifier
break
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
kecil
symbol
=
symbol
-
integerConstant
1
symbol
)
identifier
break
symbol
;
identifier
NewLine
identifier
now
symbol
=
identifier
mul
symbol
(
identifier
now
symbol
,
identifier
pre
symbol
[
identifier
n
symbol
-
integerConstant
1
symbol
]
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
now
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
identifier
forn
symbol
(
identifier
i
symbol
,
integerConstant
0
symbol
,
identifier
min
symbol
(
integerConstant
32
identifier
LL
symbol
,
identifier
x
symbol
-
integerConstant
1
symbol
)
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
forn
symbol
(
identifier
j
symbol
,
integerConstant
0
symbol
,
identifier
n
symbol
-
integerConstant
1
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
mul
symbol
(
identifier
suf
symbol
[
identifier
n
symbol
-
integerConstant
1
symbol
-
identifier
j
symbol
]
symbol
,
identifier
now
symbol
)
symbol
=
symbol
=
integerConstant
4
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
besar
symbol
=
identifier
x
symbol
*
identifier
n
symbol
-
symbol
(
identifier
i
symbol
*
identifier
n
symbol
+
identifier
j
symbol
)
symbol
-
integerConstant
1
symbol
;
identifier
NewLine
identifier
break
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
besar
symbol
=
symbol
-
integerConstant
1
symbol
)
identifier
break
symbol
;
identifier
NewLine
identifier
now
symbol
=
identifier
mul
symbol
(
identifier
suf
symbol
[
integerConstant
0
symbol
]
symbol
,
identifier
now
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
puts
symbol
(
identifier
kecil
symbol
<
identifier
besar
stringConstant
YES
stringConstant
NO
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/bmerry.0.cpp file...

identifier
include
symbol
<
identifier
bits
symbol
/
identifier
stdc
symbol
+
symbol
+
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
fcntl
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
unistd
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
keyword
int
symbol
>
identifier
vi
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
identifier
string
symbol
>
identifier
vs
symbol
;
identifier
NewLine
identifier
typedef
identifier
long
identifier
long
identifier
ll
symbol
;
identifier
NewLine
identifier
typedef
identifier
complex
symbol
<
identifier
double
symbol
>
identifier
pnt
symbol
;
identifier
NewLine
identifier
typedef
identifier
pair
symbol
<
keyword
int
symbol
,
keyword
int
symbol
>
identifier
pii
symbol
;
identifier
NewLine
identifier
NewLine
identifier
define
identifier
RA
symbol
(
identifier
x
symbol
)
identifier
begin
symbol
(
identifier
x
symbol
)
symbol
,
identifier
end
symbol
(
identifier
x
symbol
)
identifier
NewLine
identifier
define
identifier
FE
symbol
(
identifier
i
symbol
,
identifier
x
symbol
)
identifier
for
symbol
(
identifier
auto
identifier
i
symbol
=
identifier
begin
symbol
(
identifier
x
symbol
)
symbol
;
identifier
i
symbol
=
identifier
end
symbol
(
identifier
x
symbol
)
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
identifier
NewLine
identifier
define
identifier
SZ
symbol
(
identifier
x
symbol
)
symbol
(
symbol
(
keyword
int
symbol
)
symbol
(
identifier
x
symbol
)
symbol
.
identifier
size
symbol
(
symbol
)
symbol
)
identifier
NewLine
identifier
NewLine
identifier
template
symbol
<
keyword
class
identifier
T
symbol
>
identifier
NewLine
identifier
vector
symbol
<
identifier
T
symbol
>
identifier
splitstr
symbol
(
identifier
const
identifier
string
symbol
&
identifier
s
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
istringstream
identifier
in
symbol
(
identifier
s
symbol
)
symbol
;
identifier
NewLine
identifier
vector
symbol
<
identifier
T
symbol
>
identifier
out
symbol
;
identifier
NewLine
identifier
copy
symbol
(
identifier
istream
identifier
iterator
symbol
<
identifier
T
symbol
>
symbol
(
identifier
in
symbol
)
symbol
,
identifier
istream
identifier
iterator
symbol
<
identifier
T
symbol
>
symbol
(
symbol
)
symbol
,
identifier
back
identifier
inserter
symbol
(
identifier
out
symbol
)
symbol
)
symbol
;
identifier
NewLine
keyword
return
identifier
out
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
template
symbol
<
keyword
class
identifier
T
symbol
>
identifier
T
identifier
gcd
symbol
(
identifier
T
identifier
a
symbol
,
identifier
T
identifier
b
symbol
)
symbol
{
keyword
return
identifier
b
identifier
gcd
symbol
(
identifier
b
symbol
,
identifier
a
identifier
b
symbol
)
identifier
a
symbol
;
symbol
}
identifier
NewLine
identifier
NewLine
keyword
static
keyword
void
identifier
redirect
symbol
(
keyword
int
identifier
argc
symbol
,
identifier
const
keyword
char
symbol
*
symbol
*
identifier
argv
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
argc
symbol
>
integerConstant
1
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
int
identifier
fd
symbol
=
identifier
open
symbol
(
identifier
argv
symbol
[
integerConstant
1
symbol
]
symbol
,
identifier
O
identifier
RDONLY
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
fd
symbol
=
symbol
=
symbol
-
integerConstant
1
symbol
)
symbol
{
identifier
perror
symbol
(
identifier
argv
symbol
[
integerConstant
1
symbol
]
symbol
)
symbol
;
identifier
exit
symbol
(
integerConstant
1
symbol
)
symbol
;
symbol
}
identifier
NewLine
keyword
if
symbol
(
symbol
-
integerConstant
1
symbol
=
symbol
=
identifier
dup2
symbol
(
identifier
fd
symbol
,
integerConstant
0
symbol
)
symbol
)
symbol
{
identifier
perror
symbol
(
identifier
argv
symbol
[
integerConstant
1
symbol
]
symbol
)
symbol
;
identifier
exit
symbol
(
integerConstant
1
symbol
)
symbol
;
symbol
}
identifier
NewLine
keyword
if
symbol
(
symbol
-
integerConstant
1
symbol
=
symbol
=
identifier
close
symbol
(
identifier
fd
symbol
)
symbol
)
symbol
{
identifier
perror
symbol
(
identifier
argv
symbol
[
integerConstant
1
symbol
]
symbol
)
symbol
;
identifier
exit
symbol
(
integerConstant
1
symbol
)
symbol
;
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
if
symbol
(
identifier
argc
symbol
>
integerConstant
2
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
int
identifier
fd
symbol
=
identifier
open
symbol
(
identifier
argv
symbol
[
integerConstant
2
symbol
]
symbol
,
identifier
O
identifier
WRONLY
symbol
|
identifier
O
identifier
CREAT
symbol
,
integerConstant
0666
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
fd
symbol
=
symbol
=
symbol
-
integerConstant
1
symbol
)
symbol
{
identifier
perror
symbol
(
identifier
argv
symbol
[
integerConstant
2
symbol
]
symbol
)
symbol
;
identifier
exit
symbol
(
integerConstant
1
symbol
)
symbol
;
symbol
}
identifier
NewLine
keyword
if
symbol
(
symbol
-
integerConstant
1
symbol
=
symbol
=
identifier
dup2
symbol
(
identifier
fd
symbol
,
integerConstant
1
symbol
)
symbol
)
symbol
{
identifier
perror
symbol
(
identifier
argv
symbol
[
integerConstant
2
symbol
]
symbol
)
symbol
;
identifier
exit
symbol
(
integerConstant
1
symbol
)
symbol
;
symbol
}
identifier
NewLine
keyword
if
symbol
(
symbol
-
integerConstant
1
symbol
=
symbol
=
identifier
close
symbol
(
identifier
fd
symbol
)
symbol
)
symbol
{
identifier
perror
symbol
(
identifier
argv
symbol
[
integerConstant
2
symbol
]
symbol
)
symbol
;
identifier
exit
symbol
(
integerConstant
1
symbol
)
symbol
;
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
ios
identifier
sync
identifier
with
identifier
stdio
symbol
(
keyword
false
symbol
)
symbol
;
identifier
NewLine
identifier
cin
symbol
.
identifier
exceptions
symbol
(
identifier
ios
identifier
failbit
symbol
|
identifier
ios
identifier
badbit
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
keyword
int
identifier
argc
symbol
,
identifier
const
keyword
char
symbol
*
symbol
*
identifier
argv
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
redirect
symbol
(
identifier
argc
symbol
,
identifier
argv
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
cases
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
cases
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
cas
symbol
=
integerConstant
0
symbol
;
identifier
cas
symbol
<
identifier
cases
symbol
;
identifier
cas
symbol
+
symbol
+
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
int
identifier
Sm
symbol
;
identifier
NewLine
identifier
string
identifier
freq
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
Sm
symbol
>
symbol
>
identifier
freq
symbol
;
identifier
NewLine
keyword
int
identifier
ans
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
keyword
int
identifier
stand
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
symbol
=
identifier
Sm
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
freq
symbol
[
identifier
i
symbol
]
symbol
=
integerConstant
0
symbol
&
symbol
&
identifier
stand
symbol
<
identifier
i
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
ans
symbol
+
symbol
=
identifier
i
symbol
-
identifier
stand
symbol
;
identifier
NewLine
identifier
stand
symbol
=
identifier
i
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
stand
symbol
+
symbol
=
identifier
freq
symbol
[
identifier
i
symbol
]
symbol
-
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
cout
symbol
<
symbol
<
stringConstant
Case #
symbol
<
symbol
<
identifier
cas
symbol
+
integerConstant
1
symbol
<
symbol
<
stringConstant
: 
symbol
<
symbol
<
identifier
ans
symbol
<
symbol
<
stringConstant
\n
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/bmerry.1.cpp file...

identifier
include
symbol
<
identifier
bits
symbol
/
identifier
stdc
symbol
+
symbol
+
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
fcntl
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
unistd
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
keyword
int
symbol
>
identifier
vi
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
identifier
string
symbol
>
identifier
vs
symbol
;
identifier
NewLine
identifier
typedef
identifier
long
identifier
long
identifier
ll
symbol
;
identifier
NewLine
identifier
typedef
identifier
complex
symbol
<
identifier
double
symbol
>
identifier
pnt
symbol
;
identifier
NewLine
identifier
typedef
identifier
pair
symbol
<
keyword
int
symbol
,
keyword
int
symbol
>
identifier
pii
symbol
;
identifier
NewLine
identifier
NewLine
identifier
define
identifier
RA
symbol
(
identifier
x
symbol
)
identifier
begin
symbol
(
identifier
x
symbol
)
symbol
,
identifier
end
symbol
(
identifier
x
symbol
)
identifier
NewLine
identifier
define
identifier
FE
symbol
(
identifier
i
symbol
,
identifier
x
symbol
)
identifier
for
symbol
(
identifier
auto
identifier
i
symbol
=
identifier
begin
symbol
(
identifier
x
symbol
)
symbol
;
identifier
i
symbol
=
identifier
end
symbol
(
identifier
x
symbol
)
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
identifier
NewLine
identifier
define
identifier
SZ
symbol
(
identifier
x
symbol
)
symbol
(
symbol
(
keyword
int
symbol
)
symbol
(
identifier
x
symbol
)
symbol
.
identifier
size
symbol
(
symbol
)
symbol
)
identifier
NewLine
identifier
NewLine
identifier
template
symbol
<
keyword
class
identifier
T
symbol
>
identifier
NewLine
identifier
vector
symbol
<
identifier
T
symbol
>
identifier
splitstr
symbol
(
identifier
const
identifier
string
symbol
&
identifier
s
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
istringstream
identifier
in
symbol
(
identifier
s
symbol
)
symbol
;
identifier
NewLine
identifier
vector
symbol
<
identifier
T
symbol
>
identifier
out
symbol
;
identifier
NewLine
identifier
copy
symbol
(
identifier
istream
identifier
iterator
symbol
<
identifier
T
symbol
>
symbol
(
identifier
in
symbol
)
symbol
,
identifier
istream
identifier
iterator
symbol
<
identifier
T
symbol
>
symbol
(
symbol
)
symbol
,
identifier
back
identifier
inserter
symbol
(
identifier
out
symbol
)
symbol
)
symbol
;
identifier
NewLine
keyword
return
identifier
out
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
template
symbol
<
keyword
class
identifier
T
symbol
>
identifier
T
identifier
gcd
symbol
(
identifier
T
identifier
a
symbol
,
identifier
T
identifier
b
symbol
)
symbol
{
keyword
return
identifier
b
identifier
gcd
symbol
(
identifier
b
symbol
,
identifier
a
identifier
b
symbol
)
identifier
a
symbol
;
symbol
}
identifier
NewLine
identifier
NewLine
keyword
static
keyword
void
identifier
redirect
symbol
(
keyword
int
identifier
argc
symbol
,
identifier
const
keyword
char
symbol
*
symbol
*
identifier
argv
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
argc
symbol
>
integerConstant
1
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
int
identifier
fd
symbol
=
identifier
open
symbol
(
identifier
argv
symbol
[
integerConstant
1
symbol
]
symbol
,
identifier
O
identifier
RDONLY
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
fd
symbol
=
symbol
=
symbol
-
integerConstant
1
symbol
)
symbol
{
identifier
perror
symbol
(
identifier
argv
symbol
[
integerConstant
1
symbol
]
symbol
)
symbol
;
identifier
exit
symbol
(
integerConstant
1
symbol
)
symbol
;
symbol
}
identifier
NewLine
keyword
if
symbol
(
symbol
-
integerConstant
1
symbol
=
symbol
=
identifier
dup2
symbol
(
identifier
fd
symbol
,
integerConstant
0
symbol
)
symbol
)
symbol
{
identifier
perror
symbol
(
identifier
argv
symbol
[
integerConstant
1
symbol
]
symbol
)
symbol
;
identifier
exit
symbol
(
integerConstant
1
symbol
)
symbol
;
symbol
}
identifier
NewLine
keyword
if
symbol
(
symbol
-
integerConstant
1
symbol
=
symbol
=
identifier
close
symbol
(
identifier
fd
symbol
)
symbol
)
symbol
{
identifier
perror
symbol
(
identifier
argv
symbol
[
integerConstant
1
symbol
]
symbol
)
symbol
;
identifier
exit
symbol
(
integerConstant
1
symbol
)
symbol
;
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
if
symbol
(
identifier
argc
symbol
>
integerConstant
2
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
int
identifier
fd
symbol
=
identifier
open
symbol
(
identifier
argv
symbol
[
integerConstant
2
symbol
]
symbol
,
identifier
O
identifier
WRONLY
symbol
|
identifier
O
identifier
CREAT
symbol
,
integerConstant
0666
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
fd
symbol
=
symbol
=
symbol
-
integerConstant
1
symbol
)
symbol
{
identifier
perror
symbol
(
identifier
argv
symbol
[
integerConstant
2
symbol
]
symbol
)
symbol
;
identifier
exit
symbol
(
integerConstant
1
symbol
)
symbol
;
symbol
}
identifier
NewLine
keyword
if
symbol
(
symbol
-
integerConstant
1
symbol
=
symbol
=
identifier
dup2
symbol
(
identifier
fd
symbol
,
integerConstant
1
symbol
)
symbol
)
symbol
{
identifier
perror
symbol
(
identifier
argv
symbol
[
integerConstant
2
symbol
]
symbol
)
symbol
;
identifier
exit
symbol
(
integerConstant
1
symbol
)
symbol
;
symbol
}
identifier
NewLine
keyword
if
symbol
(
symbol
-
integerConstant
1
symbol
=
symbol
=
identifier
close
symbol
(
identifier
fd
symbol
)
symbol
)
symbol
{
identifier
perror
symbol
(
identifier
argv
symbol
[
integerConstant
2
symbol
]
symbol
)
symbol
;
identifier
exit
symbol
(
integerConstant
1
symbol
)
symbol
;
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
ios
identifier
sync
identifier
with
identifier
stdio
symbol
(
keyword
false
symbol
)
symbol
;
identifier
NewLine
identifier
cin
symbol
.
identifier
exceptions
symbol
(
identifier
ios
identifier
failbit
symbol
|
identifier
ios
identifier
badbit
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
keyword
int
identifier
argc
symbol
,
identifier
const
keyword
char
symbol
*
symbol
*
identifier
argv
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
redirect
symbol
(
identifier
argc
symbol
,
identifier
argv
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
cases
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
cases
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
cas
symbol
=
integerConstant
0
symbol
;
identifier
cas
symbol
<
identifier
cases
symbol
;
identifier
cas
symbol
+
symbol
+
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
int
identifier
N
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
N
symbol
;
identifier
NewLine
identifier
vector
symbol
<
keyword
int
symbol
>
identifier
p
symbol
(
identifier
N
symbol
)
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
N
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
p
symbol
[
identifier
i
symbol
]
symbol
;
identifier
NewLine
identifier
sort
symbol
(
identifier
RA
symbol
(
identifier
p
symbol
)
symbol
)
symbol
;
identifier
NewLine
keyword
int
identifier
ans
symbol
=
identifier
INT
identifier
MAX
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
t
symbol
=
integerConstant
1
symbol
;
identifier
t
symbol
<
symbol
=
identifier
p
symbol
.
identifier
back
symbol
(
symbol
)
symbol
;
identifier
t
symbol
+
symbol
+
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
int
identifier
cost
symbol
=
identifier
t
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
N
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
cost
symbol
+
symbol
=
symbol
(
identifier
p
symbol
[
identifier
i
symbol
]
symbol
-
integerConstant
1
symbol
)
symbol
/
identifier
t
symbol
;
identifier
NewLine
identifier
ans
symbol
=
identifier
min
symbol
(
identifier
ans
symbol
,
identifier
cost
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
cout
symbol
<
symbol
<
stringConstant
Case #
symbol
<
symbol
<
identifier
cas
symbol
+
integerConstant
1
symbol
<
symbol
<
stringConstant
: 
symbol
<
symbol
<
identifier
ans
symbol
<
symbol
<
stringConstant
\n
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/bmerry.2.cpp file...

identifier
include
symbol
<
identifier
bits
symbol
/
identifier
stdc
symbol
+
symbol
+
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
fcntl
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
unistd
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
keyword
int
symbol
>
identifier
vi
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
identifier
string
symbol
>
identifier
vs
symbol
;
identifier
NewLine
identifier
typedef
identifier
long
identifier
long
identifier
ll
symbol
;
identifier
NewLine
identifier
typedef
identifier
complex
symbol
<
identifier
double
symbol
>
identifier
pnt
symbol
;
identifier
NewLine
identifier
typedef
identifier
pair
symbol
<
keyword
int
symbol
,
keyword
int
symbol
>
identifier
pii
symbol
;
identifier
NewLine
identifier
NewLine
identifier
define
identifier
RA
symbol
(
identifier
x
symbol
)
identifier
begin
symbol
(
identifier
x
symbol
)
symbol
,
identifier
end
symbol
(
identifier
x
symbol
)
identifier
NewLine
identifier
define
identifier
FE
symbol
(
identifier
i
symbol
,
identifier
x
symbol
)
identifier
for
symbol
(
identifier
auto
identifier
i
symbol
=
identifier
begin
symbol
(
identifier
x
symbol
)
symbol
;
identifier
i
symbol
=
identifier
end
symbol
(
identifier
x
symbol
)
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
identifier
NewLine
identifier
define
identifier
SZ
symbol
(
identifier
x
symbol
)
symbol
(
symbol
(
keyword
int
symbol
)
symbol
(
identifier
x
symbol
)
symbol
.
identifier
size
symbol
(
symbol
)
symbol
)
identifier
NewLine
identifier
NewLine
identifier
template
symbol
<
keyword
class
identifier
T
symbol
>
identifier
NewLine
identifier
vector
symbol
<
identifier
T
symbol
>
identifier
splitstr
symbol
(
identifier
const
identifier
string
symbol
&
identifier
s
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
istringstream
identifier
in
symbol
(
identifier
s
symbol
)
symbol
;
identifier
NewLine
identifier
vector
symbol
<
identifier
T
symbol
>
identifier
out
symbol
;
identifier
NewLine
identifier
copy
symbol
(
identifier
istream
identifier
iterator
symbol
<
identifier
T
symbol
>
symbol
(
identifier
in
symbol
)
symbol
,
identifier
istream
identifier
iterator
symbol
<
identifier
T
symbol
>
symbol
(
symbol
)
symbol
,
identifier
back
identifier
inserter
symbol
(
identifier
out
symbol
)
symbol
)
symbol
;
identifier
NewLine
keyword
return
identifier
out
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
template
symbol
<
keyword
class
identifier
T
symbol
>
identifier
T
identifier
gcd
symbol
(
identifier
T
identifier
a
symbol
,
identifier
T
identifier
b
symbol
)
symbol
{
keyword
return
identifier
b
identifier
gcd
symbol
(
identifier
b
symbol
,
identifier
a
identifier
b
symbol
)
identifier
a
symbol
;
symbol
}
identifier
NewLine
identifier
NewLine
keyword
static
keyword
void
identifier
redirect
symbol
(
keyword
int
identifier
argc
symbol
,
identifier
const
keyword
char
symbol
*
symbol
*
identifier
argv
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
argc
symbol
>
integerConstant
1
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
int
identifier
fd
symbol
=
identifier
open
symbol
(
identifier
argv
symbol
[
integerConstant
1
symbol
]
symbol
,
identifier
O
identifier
RDONLY
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
fd
symbol
=
symbol
=
symbol
-
integerConstant
1
symbol
)
symbol
{
identifier
perror
symbol
(
identifier
argv
symbol
[
integerConstant
1
symbol
]
symbol
)
symbol
;
identifier
exit
symbol
(
integerConstant
1
symbol
)
symbol
;
symbol
}
identifier
NewLine
keyword
if
symbol
(
symbol
-
integerConstant
1
symbol
=
symbol
=
identifier
dup2
symbol
(
identifier
fd
symbol
,
integerConstant
0
symbol
)
symbol
)
symbol
{
identifier
perror
symbol
(
identifier
argv
symbol
[
integerConstant
1
symbol
]
symbol
)
symbol
;
identifier
exit
symbol
(
integerConstant
1
symbol
)
symbol
;
symbol
}
identifier
NewLine
keyword
if
symbol
(
symbol
-
integerConstant
1
symbol
=
symbol
=
identifier
close
symbol
(
identifier
fd
symbol
)
symbol
)
symbol
{
identifier
perror
symbol
(
identifier
argv
symbol
[
integerConstant
1
symbol
]
symbol
)
symbol
;
identifier
exit
symbol
(
integerConstant
1
symbol
)
symbol
;
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
if
symbol
(
identifier
argc
symbol
>
integerConstant
2
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
int
identifier
fd
symbol
=
identifier
open
symbol
(
identifier
argv
symbol
[
integerConstant
2
symbol
]
symbol
,
identifier
O
identifier
WRONLY
symbol
|
identifier
O
identifier
CREAT
symbol
,
integerConstant
0666
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
fd
symbol
=
symbol
=
symbol
-
integerConstant
1
symbol
)
symbol
{
identifier
perror
symbol
(
identifier
argv
symbol
[
integerConstant
2
symbol
]
symbol
)
symbol
;
identifier
exit
symbol
(
integerConstant
1
symbol
)
symbol
;
symbol
}
identifier
NewLine
keyword
if
symbol
(
symbol
-
integerConstant
1
symbol
=
symbol
=
identifier
dup2
symbol
(
identifier
fd
symbol
,
integerConstant
1
symbol
)
symbol
)
symbol
{
identifier
perror
symbol
(
identifier
argv
symbol
[
integerConstant
2
symbol
]
symbol
)
symbol
;
identifier
exit
symbol
(
integerConstant
1
symbol
)
symbol
;
symbol
}
identifier
NewLine
keyword
if
symbol
(
symbol
-
integerConstant
1
symbol
=
symbol
=
identifier
close
symbol
(
identifier
fd
symbol
)
symbol
)
symbol
{
identifier
perror
symbol
(
identifier
argv
symbol
[
integerConstant
2
symbol
]
symbol
)
symbol
;
identifier
exit
symbol
(
integerConstant
1
symbol
)
symbol
;
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
ios
identifier
sync
identifier
with
identifier
stdio
symbol
(
keyword
false
symbol
)
symbol
;
identifier
NewLine
identifier
cin
symbol
.
identifier
exceptions
symbol
(
identifier
ios
identifier
failbit
symbol
|
identifier
ios
identifier
badbit
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
NewLine
keyword
int
identifier
ptable
symbol
[
integerConstant
4
symbol
]
symbol
[
integerConstant
4
symbol
]
symbol
=
identifier
NewLine
symbol
{
identifier
NewLine
symbol
{
integerConstant
0
symbol
,
integerConstant
1
symbol
,
integerConstant
2
symbol
,
integerConstant
3
symbol
}
symbol
,
identifier
NewLine
symbol
{
integerConstant
1
symbol
,
integerConstant
4
symbol
,
integerConstant
3
symbol
,
integerConstant
6
symbol
}
symbol
,
identifier
NewLine
symbol
{
integerConstant
2
symbol
,
integerConstant
7
symbol
,
integerConstant
4
symbol
,
integerConstant
1
symbol
}
symbol
,
identifier
NewLine
symbol
{
integerConstant
3
symbol
,
integerConstant
2
symbol
,
integerConstant
5
symbol
,
integerConstant
4
symbol
}
identifier
NewLine
symbol
}
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
keyword
int
identifier
argc
symbol
,
identifier
const
keyword
char
symbol
*
symbol
*
identifier
argv
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
redirect
symbol
(
identifier
argc
symbol
,
identifier
argv
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
table
symbol
[
integerConstant
8
symbol
]
symbol
[
integerConstant
8
symbol
]
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
integerConstant
4
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
j
symbol
=
integerConstant
0
symbol
;
identifier
j
symbol
<
integerConstant
4
symbol
;
identifier
j
symbol
+
symbol
+
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
table
symbol
[
identifier
i
symbol
]
symbol
[
identifier
j
symbol
]
symbol
=
identifier
ptable
symbol
[
identifier
i
symbol
]
symbol
[
identifier
j
symbol
]
symbol
;
identifier
NewLine
identifier
table
symbol
[
identifier
i
symbol
+
integerConstant
4
symbol
]
symbol
[
identifier
j
symbol
]
symbol
=
identifier
ptable
symbol
[
identifier
i
symbol
]
symbol
[
identifier
j
symbol
]
integerConstant
4
symbol
;
identifier
NewLine
identifier
table
symbol
[
identifier
i
symbol
]
symbol
[
identifier
j
symbol
+
integerConstant
4
symbol
]
symbol
=
identifier
ptable
symbol
[
identifier
i
symbol
]
symbol
[
identifier
j
symbol
]
integerConstant
4
symbol
;
identifier
NewLine
identifier
table
symbol
[
identifier
i
symbol
+
integerConstant
4
symbol
]
symbol
[
identifier
j
symbol
+
integerConstant
4
symbol
]
symbol
=
identifier
ptable
symbol
[
identifier
i
symbol
]
symbol
[
identifier
j
symbol
]
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
int
identifier
cases
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
cases
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
cas
symbol
=
integerConstant
0
symbol
;
identifier
cas
symbol
<
identifier
cases
symbol
;
identifier
cas
symbol
+
symbol
+
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
int
identifier
L
symbol
;
identifier
NewLine
identifier
ll
identifier
X
symbol
;
identifier
NewLine
identifier
string
identifier
word
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
L
symbol
>
symbol
>
identifier
X
symbol
>
symbol
>
identifier
word
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
X
symbol
>
symbol
=
integerConstant
36
symbol
)
identifier
NewLine
identifier
X
symbol
=
identifier
X
integerConstant
4
symbol
+
integerConstant
32
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
need
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
keyword
int
identifier
cur
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
keyword
int
identifier
tcur
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
for
symbol
(
identifier
ll
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
X
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
for
symbol
(
keyword
char
identifier
c
identifier
word
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
int
identifier
idx
symbol
=
identifier
c
symbol
-
identifier
h
symbol
;
identifier
NewLine
identifier
cur
symbol
=
identifier
table
symbol
[
identifier
cur
symbol
]
symbol
[
identifier
idx
symbol
]
symbol
;
identifier
NewLine
identifier
tcur
symbol
=
identifier
table
symbol
[
identifier
tcur
symbol
]
symbol
[
identifier
idx
symbol
]
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
cur
symbol
=
symbol
=
identifier
need
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
cur
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
need
symbol
+
symbol
+
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
bool
identifier
ans
symbol
=
identifier
need
symbol
>
integerConstant
3
symbol
&
symbol
&
identifier
tcur
symbol
=
symbol
=
integerConstant
4
symbol
;
identifier
NewLine
identifier
cout
symbol
<
symbol
<
stringConstant
Case #
symbol
<
symbol
<
identifier
cas
symbol
+
integerConstant
1
symbol
<
symbol
<
stringConstant
: 
symbol
<
symbol
<
symbol
(
identifier
ans
stringConstant
YES
stringConstant
NO
symbol
)
symbol
<
symbol
<
stringConstant
\n
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/climpet.0.cpp file...

identifier
include
symbol
<
identifier
cstdlib
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cmath
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
climits
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cfloat
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
map
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
utility
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
set
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
iostream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
memory
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
string
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
vector
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
algorithm
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
functional
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
sstream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
deque
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
complex
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
stack
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
queue
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstdio
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cctype
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstring
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
ctime
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
iterator
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
bitset
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
numeric
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
list
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
iomanip
symbol
>
identifier
NewLine
identifier
NewLine
keyword
if
identifier
cplusplus
symbol
>
symbol
=
integerConstant
201103
identifier
L
identifier
NewLine
identifier
include
symbol
<
identifier
array
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
tuple
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
initializer
identifier
list
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
unordered
identifier
set
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
unordered
identifier
map
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
forward
identifier
list
symbol
>
identifier
NewLine
identifier
NewLine
identifier
define
identifier
cauto
identifier
const
identifier
auto
symbol
&
identifier
NewLine
identifier
endif
identifier
NewLine
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
namespace
symbol
{
identifier
NewLine
identifier
NewLine
identifier
typedef
identifier
long
identifier
long
identifier
LL
symbol
;
identifier
NewLine
identifier
typedef
identifier
pair
symbol
<
keyword
int
symbol
,
keyword
int
symbol
>
identifier
pii
symbol
;
identifier
NewLine
identifier
typedef
identifier
pair
symbol
<
identifier
LL
symbol
,
identifier
LL
symbol
>
identifier
pll
symbol
;
identifier
NewLine
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
keyword
int
symbol
>
identifier
vint
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
identifier
vector
symbol
<
keyword
int
symbol
>
symbol
>
identifier
vvint
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
identifier
long
identifier
long
symbol
>
identifier
vll
symbol
,
identifier
vLL
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
identifier
vector
symbol
<
identifier
long
identifier
long
symbol
>
symbol
>
identifier
vvll
symbol
,
identifier
vvLL
symbol
;
identifier
NewLine
identifier
NewLine
identifier
define
identifier
VV
symbol
(
identifier
T
symbol
)
identifier
vector
symbol
<
identifier
vector
symbol
<
identifier
T
symbol
>
symbol
>
identifier
NewLine
identifier
NewLine
identifier
template
symbol
<
keyword
class
identifier
T
symbol
>
identifier
NewLine
keyword
void
identifier
initvv
symbol
(
identifier
vector
symbol
<
identifier
vector
symbol
<
identifier
T
symbol
>
symbol
>
symbol
&
identifier
v
symbol
,
keyword
int
identifier
a
symbol
,
keyword
int
identifier
b
symbol
,
identifier
const
identifier
T
symbol
&
identifier
t
symbol
=
identifier
T
symbol
(
symbol
)
symbol
)
symbol
{
identifier
NewLine
identifier
v
symbol
.
identifier
assign
symbol
(
identifier
a
symbol
,
identifier
vector
symbol
<
identifier
T
symbol
>
symbol
(
identifier
b
symbol
,
identifier
t
symbol
)
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
template
symbol
<
keyword
class
identifier
F
symbol
,
keyword
class
identifier
T
symbol
>
identifier
NewLine
keyword
void
identifier
convert
symbol
(
identifier
const
identifier
F
symbol
&
identifier
f
symbol
,
identifier
T
symbol
&
identifier
t
symbol
)
symbol
{
identifier
NewLine
identifier
stringstream
identifier
ss
symbol
;
identifier
NewLine
identifier
ss
symbol
<
symbol
<
identifier
f
symbol
;
identifier
NewLine
identifier
ss
symbol
>
symbol
>
identifier
t
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
define
identifier
REP
symbol
(
identifier
i
symbol
,
identifier
n
symbol
)
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
keyword
int
symbol
(
identifier
n
symbol
)
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
identifier
NewLine
identifier
define
identifier
ALL
symbol
(
identifier
v
symbol
)
symbol
(
identifier
v
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
,
symbol
(
identifier
v
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
identifier
NewLine
identifier
define
identifier
RALL
symbol
(
identifier
v
symbol
)
symbol
(
identifier
v
symbol
)
symbol
.
identifier
rbegin
symbol
(
symbol
)
symbol
,
symbol
(
identifier
v
symbol
)
symbol
.
identifier
rend
symbol
(
symbol
)
identifier
NewLine
identifier
define
identifier
PB
identifier
push
identifier
back
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
define
identifier
MOD
integerConstant
1000000009
identifier
LL
identifier
NewLine
identifier
define
identifier
EPS
integerConstant
1
identifier
e
symbol
-
integerConstant
8
identifier
NewLine
identifier
NewLine
identifier
NewLine
keyword
void
identifier
prepare
symbol
(
symbol
)
symbol
{
identifier
NewLine
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
LL
identifier
solve
symbol
(
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
n
symbol
;
identifier
NewLine
identifier
string
identifier
s
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
n
symbol
>
symbol
>
identifier
s
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
ans
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
keyword
int
identifier
sum
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
symbol
=
identifier
n
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
symbol
{
identifier
NewLine
identifier
ans
symbol
=
identifier
max
symbol
(
identifier
ans
symbol
,
identifier
i
symbol
-
identifier
sum
symbol
)
symbol
;
identifier
NewLine
identifier
sum
symbol
+
symbol
=
identifier
s
symbol
[
identifier
i
symbol
]
symbol
-
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
return
identifier
ans
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
NewLine
symbol
}
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
symbol
{
identifier
NewLine
identifier
cout
symbol
<
symbol
<
identifier
fixed
symbol
<
symbol
<
identifier
setprecision
symbol
(
integerConstant
15
symbol
)
symbol
;
identifier
NewLine
identifier
cerr
symbol
<
symbol
<
identifier
fixed
symbol
<
symbol
<
identifier
setprecision
symbol
(
integerConstant
6
symbol
)
symbol
;
identifier
NewLine
identifier
prepare
symbol
(
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
T
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
T
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
cnum
symbol
=
integerConstant
1
symbol
;
identifier
cnum
symbol
<
symbol
=
identifier
T
symbol
;
symbol
+
symbol
+
identifier
cnum
symbol
)
symbol
{
identifier
NewLine
identifier
fprintf
symbol
(
identifier
stderr
symbol
,
stringConstant
%4d / %d\n
symbol
,
identifier
cnum
symbol
,
identifier
T
symbol
)
symbol
;
identifier
NewLine
identifier
cout
symbol
<
symbol
<
stringConstant
Case #
symbol
<
symbol
<
identifier
cnum
symbol
<
symbol
<
stringConstant
: 
symbol
<
symbol
<
identifier
flush
symbol
;
identifier
NewLine
identifier
auto
identifier
ans
symbol
=
identifier
solve
symbol
(
symbol
)
symbol
;
identifier
NewLine
identifier
cout
symbol
<
symbol
<
identifier
ans
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/climpet.1.cpp file...

identifier
include
symbol
<
identifier
cstdlib
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cmath
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
climits
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cfloat
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
map
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
utility
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
set
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
iostream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
memory
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
string
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
vector
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
algorithm
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
functional
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
sstream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
deque
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
complex
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
stack
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
queue
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstdio
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cctype
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstring
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
ctime
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
iterator
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
bitset
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
numeric
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
list
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
iomanip
symbol
>
identifier
NewLine
identifier
NewLine
keyword
if
identifier
cplusplus
symbol
>
symbol
=
integerConstant
201103
identifier
L
identifier
NewLine
identifier
include
symbol
<
identifier
array
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
tuple
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
initializer
identifier
list
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
unordered
identifier
set
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
unordered
identifier
map
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
forward
identifier
list
symbol
>
identifier
NewLine
identifier
NewLine
identifier
define
identifier
cauto
identifier
const
identifier
auto
symbol
&
identifier
NewLine
identifier
endif
identifier
NewLine
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
namespace
symbol
{
identifier
NewLine
identifier
NewLine
identifier
typedef
identifier
long
identifier
long
identifier
LL
symbol
;
identifier
NewLine
identifier
typedef
identifier
pair
symbol
<
keyword
int
symbol
,
keyword
int
symbol
>
identifier
pii
symbol
;
identifier
NewLine
identifier
typedef
identifier
pair
symbol
<
identifier
LL
symbol
,
identifier
LL
symbol
>
identifier
pll
symbol
;
identifier
NewLine
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
keyword
int
symbol
>
identifier
vint
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
identifier
vector
symbol
<
keyword
int
symbol
>
symbol
>
identifier
vvint
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
identifier
long
identifier
long
symbol
>
identifier
vll
symbol
,
identifier
vLL
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
identifier
vector
symbol
<
identifier
long
identifier
long
symbol
>
symbol
>
identifier
vvll
symbol
,
identifier
vvLL
symbol
;
identifier
NewLine
identifier
NewLine
identifier
define
identifier
VV
symbol
(
identifier
T
symbol
)
identifier
vector
symbol
<
identifier
vector
symbol
<
identifier
T
symbol
>
symbol
>
identifier
NewLine
identifier
NewLine
identifier
template
symbol
<
keyword
class
identifier
T
symbol
>
identifier
NewLine
keyword
void
identifier
initvv
symbol
(
identifier
vector
symbol
<
identifier
vector
symbol
<
identifier
T
symbol
>
symbol
>
symbol
&
identifier
v
symbol
,
keyword
int
identifier
a
symbol
,
keyword
int
identifier
b
symbol
,
identifier
const
identifier
T
symbol
&
identifier
t
symbol
=
identifier
T
symbol
(
symbol
)
symbol
)
symbol
{
identifier
NewLine
identifier
v
symbol
.
identifier
assign
symbol
(
identifier
a
symbol
,
identifier
vector
symbol
<
identifier
T
symbol
>
symbol
(
identifier
b
symbol
,
identifier
t
symbol
)
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
template
symbol
<
keyword
class
identifier
F
symbol
,
keyword
class
identifier
T
symbol
>
identifier
NewLine
keyword
void
identifier
convert
symbol
(
identifier
const
identifier
F
symbol
&
identifier
f
symbol
,
identifier
T
symbol
&
identifier
t
symbol
)
symbol
{
identifier
NewLine
identifier
stringstream
identifier
ss
symbol
;
identifier
NewLine
identifier
ss
symbol
<
symbol
<
identifier
f
symbol
;
identifier
NewLine
identifier
ss
symbol
>
symbol
>
identifier
t
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
define
identifier
REP
symbol
(
identifier
i
symbol
,
identifier
n
symbol
)
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
keyword
int
symbol
(
identifier
n
symbol
)
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
identifier
NewLine
identifier
define
identifier
ALL
symbol
(
identifier
v
symbol
)
symbol
(
identifier
v
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
,
symbol
(
identifier
v
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
identifier
NewLine
identifier
define
identifier
RALL
symbol
(
identifier
v
symbol
)
symbol
(
identifier
v
symbol
)
symbol
.
identifier
rbegin
symbol
(
symbol
)
symbol
,
symbol
(
identifier
v
symbol
)
symbol
.
identifier
rend
symbol
(
symbol
)
identifier
NewLine
identifier
define
identifier
PB
identifier
push
identifier
back
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
define
identifier
MOD
integerConstant
1000000009
identifier
LL
identifier
NewLine
identifier
define
identifier
EPS
integerConstant
1
identifier
e
symbol
-
integerConstant
8
identifier
NewLine
identifier
NewLine
identifier
NewLine
keyword
void
identifier
prepare
symbol
(
symbol
)
symbol
{
identifier
NewLine
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
LL
identifier
solve
symbol
(
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
n
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
n
symbol
;
identifier
NewLine
identifier
vll
identifier
p
symbol
(
identifier
n
symbol
)
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
n
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
symbol
{
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
p
symbol
[
identifier
i
symbol
]
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
LL
identifier
ans
symbol
=
identifier
LLONG
identifier
MAX
symbol
;
identifier
NewLine
identifier
for
symbol
(
identifier
LL
identifier
x
symbol
=
integerConstant
1
symbol
;
identifier
x
symbol
<
integerConstant
1010
symbol
;
symbol
+
symbol
+
identifier
x
symbol
)
symbol
{
identifier
NewLine
identifier
LL
identifier
s
symbol
=
identifier
x
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
n
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
symbol
{
identifier
NewLine
identifier
s
symbol
+
symbol
=
symbol
(
identifier
p
symbol
[
identifier
i
symbol
]
symbol
-
integerConstant
1
symbol
)
symbol
/
identifier
x
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
ans
symbol
=
identifier
min
symbol
(
identifier
ans
symbol
,
identifier
s
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
return
identifier
ans
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
NewLine
symbol
}
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
symbol
{
identifier
NewLine
identifier
cout
symbol
<
symbol
<
identifier
fixed
symbol
<
symbol
<
identifier
setprecision
symbol
(
integerConstant
15
symbol
)
symbol
;
identifier
NewLine
identifier
cerr
symbol
<
symbol
<
identifier
fixed
symbol
<
symbol
<
identifier
setprecision
symbol
(
integerConstant
6
symbol
)
symbol
;
identifier
NewLine
identifier
prepare
symbol
(
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
T
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
T
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
cnum
symbol
=
integerConstant
1
symbol
;
identifier
cnum
symbol
<
symbol
=
identifier
T
symbol
;
symbol
+
symbol
+
identifier
cnum
symbol
)
symbol
{
identifier
NewLine
identifier
fprintf
symbol
(
identifier
stderr
symbol
,
stringConstant
%4d / %d\n
symbol
,
identifier
cnum
symbol
,
identifier
T
symbol
)
symbol
;
identifier
NewLine
identifier
cout
symbol
<
symbol
<
stringConstant
Case #
symbol
<
symbol
<
identifier
cnum
symbol
<
symbol
<
stringConstant
: 
symbol
<
symbol
<
identifier
flush
symbol
;
identifier
NewLine
identifier
auto
identifier
ans
symbol
=
identifier
solve
symbol
(
symbol
)
symbol
;
identifier
NewLine
identifier
cout
symbol
<
symbol
<
identifier
ans
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/climpet.2.cpp file...

identifier
include
symbol
<
identifier
cstdlib
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cmath
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
climits
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cfloat
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
map
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
utility
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
set
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
iostream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
memory
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
string
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
vector
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
algorithm
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
functional
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
sstream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
deque
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
complex
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
stack
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
queue
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstdio
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cctype
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstring
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
ctime
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
iterator
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
bitset
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
numeric
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
list
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
iomanip
symbol
>
identifier
NewLine
identifier
NewLine
keyword
if
identifier
cplusplus
symbol
>
symbol
=
integerConstant
201103
identifier
L
identifier
NewLine
identifier
include
symbol
<
identifier
array
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
tuple
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
initializer
identifier
list
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
unordered
identifier
set
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
unordered
identifier
map
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
forward
identifier
list
symbol
>
identifier
NewLine
identifier
NewLine
identifier
define
identifier
cauto
identifier
const
identifier
auto
symbol
&
identifier
NewLine
identifier
endif
identifier
NewLine
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
namespace
symbol
{
identifier
NewLine
identifier
NewLine
identifier
typedef
identifier
long
identifier
long
identifier
LL
symbol
;
identifier
NewLine
identifier
typedef
identifier
pair
symbol
<
keyword
int
symbol
,
keyword
int
symbol
>
identifier
pii
symbol
;
identifier
NewLine
identifier
typedef
identifier
pair
symbol
<
identifier
LL
symbol
,
identifier
LL
symbol
>
identifier
pll
symbol
;
identifier
NewLine
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
keyword
int
symbol
>
identifier
vint
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
identifier
vector
symbol
<
keyword
int
symbol
>
symbol
>
identifier
vvint
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
identifier
long
identifier
long
symbol
>
identifier
vll
symbol
,
identifier
vLL
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
identifier
vector
symbol
<
identifier
long
identifier
long
symbol
>
symbol
>
identifier
vvll
symbol
,
identifier
vvLL
symbol
;
identifier
NewLine
identifier
NewLine
identifier
define
identifier
VV
symbol
(
identifier
T
symbol
)
identifier
vector
symbol
<
identifier
vector
symbol
<
identifier
T
symbol
>
symbol
>
identifier
NewLine
identifier
NewLine
identifier
template
symbol
<
keyword
class
identifier
T
symbol
>
identifier
NewLine
keyword
void
identifier
initvv
symbol
(
identifier
vector
symbol
<
identifier
vector
symbol
<
identifier
T
symbol
>
symbol
>
symbol
&
identifier
v
symbol
,
keyword
int
identifier
a
symbol
,
keyword
int
identifier
b
symbol
,
identifier
const
identifier
T
symbol
&
identifier
t
symbol
=
identifier
T
symbol
(
symbol
)
symbol
)
symbol
{
identifier
NewLine
identifier
v
symbol
.
identifier
assign
symbol
(
identifier
a
symbol
,
identifier
vector
symbol
<
identifier
T
symbol
>
symbol
(
identifier
b
symbol
,
identifier
t
symbol
)
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
template
symbol
<
keyword
class
identifier
F
symbol
,
keyword
class
identifier
T
symbol
>
identifier
NewLine
keyword
void
identifier
convert
symbol
(
identifier
const
identifier
F
symbol
&
identifier
f
symbol
,
identifier
T
symbol
&
identifier
t
symbol
)
symbol
{
identifier
NewLine
identifier
stringstream
identifier
ss
symbol
;
identifier
NewLine
identifier
ss
symbol
<
symbol
<
identifier
f
symbol
;
identifier
NewLine
identifier
ss
symbol
>
symbol
>
identifier
t
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
define
identifier
REP
symbol
(
identifier
i
symbol
,
identifier
n
symbol
)
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
keyword
int
symbol
(
identifier
n
symbol
)
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
identifier
NewLine
identifier
define
identifier
ALL
symbol
(
identifier
v
symbol
)
symbol
(
identifier
v
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
,
symbol
(
identifier
v
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
identifier
NewLine
identifier
define
identifier
RALL
symbol
(
identifier
v
symbol
)
symbol
(
identifier
v
symbol
)
symbol
.
identifier
rbegin
symbol
(
symbol
)
symbol
,
symbol
(
identifier
v
symbol
)
symbol
.
identifier
rend
symbol
(
symbol
)
identifier
NewLine
identifier
define
identifier
PB
identifier
push
identifier
back
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
define
identifier
MOD
integerConstant
1000000009
identifier
LL
identifier
NewLine
identifier
define
identifier
EPS
integerConstant
1
identifier
e
symbol
-
integerConstant
8
identifier
NewLine
identifier
NewLine
identifier
NewLine
keyword
int
identifier
tbl
symbol
[
integerConstant
8
symbol
]
symbol
[
integerConstant
8
symbol
]
symbol
=
symbol
{
identifier
NewLine
symbol
{
integerConstant
0
symbol
,
integerConstant
1
symbol
,
integerConstant
2
symbol
,
integerConstant
3
symbol
}
symbol
,
identifier
NewLine
symbol
{
integerConstant
1
symbol
,
integerConstant
4
symbol
,
integerConstant
3
symbol
,
integerConstant
6
symbol
}
symbol
,
identifier
NewLine
symbol
{
integerConstant
2
symbol
,
integerConstant
7
symbol
,
integerConstant
4
symbol
,
integerConstant
1
symbol
}
symbol
,
identifier
NewLine
symbol
{
integerConstant
3
symbol
,
integerConstant
2
symbol
,
integerConstant
5
symbol
,
integerConstant
4
symbol
}
symbol
,
identifier
NewLine
symbol
}
symbol
;
identifier
NewLine
identifier
NewLine
keyword
void
identifier
prepare
symbol
(
symbol
)
symbol
{
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
integerConstant
4
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
symbol
{
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
j
symbol
=
integerConstant
0
symbol
;
identifier
j
symbol
<
integerConstant
4
symbol
;
symbol
+
symbol
+
identifier
j
symbol
)
symbol
{
identifier
NewLine
identifier
tbl
symbol
[
identifier
i
symbol
]
symbol
[
identifier
j
symbol
+
integerConstant
4
symbol
]
symbol
=
symbol
(
identifier
tbl
symbol
[
identifier
i
symbol
]
symbol
[
identifier
j
symbol
]
symbol
+
integerConstant
4
symbol
)
symbol
&
integerConstant
7
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
j
symbol
=
integerConstant
0
symbol
;
identifier
j
symbol
<
integerConstant
8
symbol
;
symbol
+
symbol
+
identifier
j
symbol
)
symbol
{
identifier
NewLine
identifier
tbl
symbol
[
identifier
i
symbol
+
integerConstant
4
symbol
]
symbol
[
identifier
j
symbol
]
symbol
=
symbol
(
identifier
tbl
symbol
[
identifier
i
symbol
]
symbol
[
identifier
j
symbol
]
symbol
+
integerConstant
4
symbol
)
symbol
&
integerConstant
7
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
string
identifier
solve
symbol
(
symbol
)
symbol
{
identifier
NewLine
identifier
bool
identifier
ok
symbol
=
keyword
false
symbol
;
identifier
NewLine
identifier
NewLine
identifier
LL
identifier
len
symbol
,
identifier
x
symbol
;
identifier
NewLine
identifier
string
identifier
s
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
len
symbol
>
symbol
>
identifier
x
symbol
>
symbol
>
identifier
s
symbol
;
identifier
NewLine
identifier
x
symbol
-
symbol
=
identifier
max
symbol
(
identifier
x
symbol
-
integerConstant
20
symbol
,
integerConstant
0
identifier
LL
symbol
)
symbol
/
integerConstant
4
symbol
*
integerConstant
4
symbol
;
identifier
NewLine
identifier
vint
identifier
v
symbol
;
identifier
NewLine
identifier
v
symbol
.
identifier
reserve
symbol
(
identifier
len
symbol
*
identifier
x
symbol
)
symbol
;
identifier
NewLine
keyword
int
identifier
t
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
for
symbol
(
identifier
LL
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
x
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
identifier
NewLine
identifier
for
symbol
(
identifier
LL
identifier
j
symbol
=
integerConstant
0
symbol
;
identifier
j
symbol
<
identifier
len
symbol
;
symbol
+
symbol
+
identifier
j
symbol
)
symbol
{
identifier
NewLine
identifier
v
symbol
.
identifier
push
identifier
back
symbol
(
identifier
s
symbol
[
identifier
j
symbol
]
symbol
-
identifier
h
symbol
)
symbol
;
identifier
NewLine
identifier
t
symbol
=
identifier
tbl
symbol
[
identifier
t
symbol
]
symbol
[
identifier
v
symbol
.
identifier
back
symbol
(
symbol
)
symbol
]
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
if
symbol
(
identifier
t
symbol
=
symbol
=
integerConstant
4
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
mini
symbol
=
integerConstant
1010101010
symbol
,
identifier
maxk
symbol
=
symbol
-
integerConstant
1
symbol
;
identifier
NewLine
identifier
NewLine
identifier
t
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
symbol
(
keyword
int
symbol
)
identifier
v
symbol
.
identifier
size
symbol
(
symbol
)
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
symbol
{
identifier
NewLine
identifier
t
symbol
=
identifier
tbl
symbol
[
identifier
t
symbol
]
symbol
[
identifier
v
symbol
[
identifier
i
symbol
]
symbol
]
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
t
symbol
=
symbol
=
integerConstant
1
symbol
)
symbol
{
identifier
NewLine
identifier
mini
symbol
=
identifier
i
symbol
;
identifier
NewLine
identifier
break
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
t
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
identifier
v
symbol
.
identifier
size
symbol
(
symbol
)
symbol
;
identifier
i
symbol
-
symbol
-
symbol
;
symbol
)
symbol
{
identifier
NewLine
identifier
t
symbol
=
identifier
tbl
symbol
[
identifier
v
symbol
[
identifier
i
symbol
]
symbol
]
symbol
[
identifier
t
symbol
]
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
t
symbol
=
symbol
=
integerConstant
3
symbol
)
symbol
{
identifier
NewLine
identifier
maxk
symbol
=
identifier
i
symbol
;
identifier
NewLine
identifier
break
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
ok
symbol
=
identifier
mini
symbol
+
integerConstant
1
symbol
<
identifier
maxk
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
return
identifier
ok
stringConstant
YES
stringConstant
NO
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
NewLine
symbol
}
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
symbol
{
identifier
NewLine
identifier
cout
symbol
<
symbol
<
identifier
fixed
symbol
<
symbol
<
identifier
setprecision
symbol
(
integerConstant
15
symbol
)
symbol
;
identifier
NewLine
identifier
cerr
symbol
<
symbol
<
identifier
fixed
symbol
<
symbol
<
identifier
setprecision
symbol
(
integerConstant
6
symbol
)
symbol
;
identifier
NewLine
identifier
prepare
symbol
(
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
T
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
T
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
cnum
symbol
=
integerConstant
1
symbol
;
identifier
cnum
symbol
<
symbol
=
identifier
T
symbol
;
symbol
+
symbol
+
identifier
cnum
symbol
)
symbol
{
identifier
NewLine
identifier
fprintf
symbol
(
identifier
stderr
symbol
,
stringConstant
%4d / %d\n
symbol
,
identifier
cnum
symbol
,
identifier
T
symbol
)
symbol
;
identifier
NewLine
identifier
cout
symbol
<
symbol
<
stringConstant
Case #
symbol
<
symbol
<
identifier
cnum
symbol
<
symbol
<
stringConstant
: 
symbol
<
symbol
<
identifier
flush
symbol
;
identifier
NewLine
identifier
auto
identifier
ans
symbol
=
identifier
solve
symbol
(
symbol
)
symbol
;
identifier
NewLine
identifier
cout
symbol
<
symbol
<
identifier
ans
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/ctzsm.0.cpp file...

identifier
include
symbol
<
identifier
cstdio
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstring
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstdlib
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
algorithm
symbol
>
identifier
NewLine
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
T
symbol
,
identifier
n
symbol
;
identifier
NewLine
keyword
int
identifier
p
symbol
[
integerConstant
1005
symbol
]
symbol
;
identifier
NewLine
keyword
char
identifier
s
symbol
[
integerConstant
1005
symbol
]
symbol
;
identifier
NewLine
keyword
void
identifier
solve
symbol
(
symbol
)
symbol
{
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d%s
symbol
,
symbol
&
identifier
n
symbol
,
identifier
s
symbol
)
symbol
;
identifier
NewLine
keyword
int
identifier
ans
symbol
=
integerConstant
0
symbol
,
identifier
sum
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
symbol
=
identifier
n
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
x
symbol
=
identifier
s
symbol
[
identifier
i
symbol
]
symbol
-
integerConstant
0
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
sum
symbol
<
identifier
i
symbol
)
symbol
{
identifier
NewLine
identifier
ans
symbol
+
symbol
=
identifier
i
symbol
-
identifier
sum
symbol
;
identifier
NewLine
identifier
sum
symbol
=
identifier
i
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
sum
symbol
+
symbol
=
identifier
x
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
printf
symbol
(
stringConstant
%d\n
symbol
,
identifier
ans
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
symbol
{
identifier
NewLine
identifier
freopen
symbol
(
stringConstant
A-large.in
symbol
,
stringConstant
r
symbol
,
identifier
stdin
symbol
)
symbol
;
identifier
NewLine
identifier
freopen
symbol
(
stringConstant
A-large.out
symbol
,
stringConstant
w
symbol
,
identifier
stdout
symbol
)
symbol
;
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
T
symbol
)
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
symbol
=
integerConstant
1
symbol
;
symbol
<
symbol
=
identifier
T
symbol
;
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: 
symbol
,
symbol
)
symbol
;
identifier
NewLine
identifier
solve
symbol
(
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
symbol
}
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/ctzsm.1.cpp file...

identifier
include
symbol
<
identifier
set
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstdio
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstring
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstdlib
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
algorithm
symbol
>
identifier
NewLine
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
T
symbol
,
identifier
n
symbol
,
identifier
p
symbol
[
integerConstant
1005
symbol
]
symbol
;
identifier
NewLine
keyword
void
identifier
solve
symbol
(
symbol
)
symbol
{
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
n
symbol
)
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
n
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
p
symbol
[
identifier
i
symbol
]
symbol
)
symbol
;
identifier
NewLine
identifier
sort
symbol
(
identifier
p
symbol
,
identifier
p
symbol
+
identifier
n
symbol
,
identifier
greater
symbol
<
keyword
int
symbol
>
symbol
(
symbol
)
symbol
)
symbol
;
identifier
NewLine
keyword
int
identifier
ans
symbol
=
identifier
p
symbol
[
integerConstant
0
symbol
]
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
m
symbol
=
identifier
p
symbol
[
integerConstant
0
symbol
]
symbol
;
identifier
m
symbol
>
symbol
=
integerConstant
1
symbol
;
symbol
-
symbol
-
identifier
m
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
cnt
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
n
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
identifier
NewLine
identifier
cnt
symbol
+
symbol
=
symbol
(
identifier
p
symbol
[
identifier
i
symbol
]
symbol
-
integerConstant
1
symbol
)
symbol
/
identifier
m
symbol
;
identifier
NewLine
identifier
ans
symbol
=
identifier
min
symbol
(
identifier
ans
symbol
,
identifier
cnt
symbol
+
identifier
m
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
printf
symbol
(
stringConstant
%d\n
symbol
,
identifier
ans
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
symbol
{
identifier
NewLine
identifier
freopen
symbol
(
stringConstant
B-large.in
symbol
,
stringConstant
r
symbol
,
identifier
stdin
symbol
)
symbol
;
identifier
NewLine
identifier
freopen
symbol
(
stringConstant
B-large.out
symbol
,
stringConstant
w
symbol
,
identifier
stdout
symbol
)
symbol
;
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
T
symbol
)
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
symbol
=
integerConstant
1
symbol
;
symbol
<
symbol
=
identifier
T
symbol
;
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: 
symbol
,
symbol
)
symbol
;
identifier
NewLine
identifier
solve
symbol
(
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
symbol
}
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/ctzsm.2.cpp file...

identifier
include
symbol
<
identifier
cassert
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
set
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstdio
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstring
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstdlib
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
algorithm
symbol
>
identifier
NewLine
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
identifier
const
keyword
int
identifier
S
symbol
[
integerConstant
4
symbol
]
symbol
[
integerConstant
4
symbol
]
symbol
=
symbol
{
identifier
NewLine
symbol
{
integerConstant
1
symbol
,
integerConstant
1
symbol
,
integerConstant
1
symbol
,
integerConstant
1
symbol
}
symbol
,
identifier
NewLine
symbol
{
integerConstant
1
symbol
,
symbol
-
integerConstant
1
symbol
,
integerConstant
1
symbol
,
symbol
-
integerConstant
1
symbol
}
symbol
,
identifier
NewLine
symbol
{
integerConstant
1
symbol
,
symbol
-
integerConstant
1
symbol
,
symbol
-
integerConstant
1
symbol
,
integerConstant
1
symbol
}
symbol
,
identifier
NewLine
symbol
{
integerConstant
1
symbol
,
integerConstant
1
symbol
,
symbol
-
integerConstant
1
symbol
,
symbol
-
integerConstant
1
symbol
}
identifier
NewLine
symbol
}
symbol
;
identifier
NewLine
identifier
const
keyword
int
identifier
Y
symbol
[
integerConstant
4
symbol
]
symbol
[
integerConstant
4
symbol
]
symbol
=
symbol
{
identifier
NewLine
symbol
{
integerConstant
0
symbol
,
integerConstant
1
symbol
,
integerConstant
2
symbol
,
integerConstant
3
symbol
}
symbol
,
identifier
NewLine
symbol
{
integerConstant
1
symbol
,
integerConstant
0
symbol
,
integerConstant
3
symbol
,
integerConstant
2
symbol
}
symbol
,
identifier
NewLine
symbol
{
integerConstant
2
symbol
,
integerConstant
3
symbol
,
integerConstant
0
symbol
,
integerConstant
1
symbol
}
symbol
,
identifier
NewLine
symbol
{
integerConstant
3
symbol
,
integerConstant
2
symbol
,
integerConstant
1
symbol
,
integerConstant
0
symbol
}
identifier
NewLine
symbol
}
symbol
;
identifier
NewLine
identifier
struct
identifier
Q
symbol
{
identifier
NewLine
keyword
int
identifier
sign
symbol
,
identifier
n
symbol
;
identifier
NewLine
identifier
Q
symbol
(
symbol
)
symbol
{
symbol
}
identifier
NewLine
identifier
Q
symbol
(
keyword
int
identifier
s
symbol
,
keyword
int
identifier
n
symbol
)
identifier
sign
symbol
(
identifier
s
symbol
)
symbol
,
identifier
n
symbol
(
identifier
n
symbol
)
symbol
{
identifier
NewLine
identifier
assert
symbol
(
identifier
sign
symbol
=
symbol
=
symbol
-
integerConstant
1
symbol
|
symbol
|
identifier
sign
symbol
=
symbol
=
integerConstant
1
symbol
)
symbol
;
identifier
NewLine
identifier
assert
symbol
(
integerConstant
0
symbol
<
symbol
=
identifier
n
symbol
&
symbol
&
identifier
n
symbol
<
integerConstant
4
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
bool
identifier
operator
symbol
=
symbol
(
identifier
const
identifier
Q
symbol
&
identifier
q
symbol
)
symbol
{
identifier
NewLine
keyword
return
identifier
sign
symbol
=
identifier
q
symbol
.
identifier
sign
symbol
|
symbol
|
identifier
n
symbol
=
identifier
q
symbol
.
identifier
n
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
bool
identifier
operator
symbol
=
symbol
=
symbol
(
identifier
const
identifier
Q
symbol
&
identifier
q
symbol
)
symbol
{
identifier
NewLine
keyword
return
identifier
sign
symbol
=
symbol
=
identifier
q
symbol
.
identifier
sign
symbol
&
symbol
&
identifier
n
symbol
=
symbol
=
identifier
q
symbol
.
identifier
n
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
pre
symbol
[
integerConstant
10005
symbol
]
symbol
,
identifier
suf
symbol
[
integerConstant
10005
symbol
]
symbol
;
identifier
NewLine
identifier
Q
identifier
multiply
symbol
(
identifier
const
identifier
Q
symbol
&
identifier
p
symbol
,
identifier
const
identifier
Q
symbol
&
identifier
q
symbol
)
symbol
{
identifier
NewLine
identifier
Q
identifier
res
symbol
(
identifier
p
symbol
.
identifier
sign
symbol
*
identifier
q
symbol
.
identifier
sign
symbol
*
identifier
S
symbol
[
identifier
p
symbol
.
identifier
n
symbol
]
symbol
[
identifier
q
symbol
.
identifier
n
symbol
]
symbol
,
identifier
Y
symbol
[
identifier
p
symbol
.
identifier
n
symbol
]
symbol
[
identifier
q
symbol
.
identifier
n
symbol
]
symbol
)
symbol
;
identifier
NewLine
keyword
return
identifier
res
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
Q
identifier
pow
symbol
(
identifier
Q
identifier
p
symbol
,
identifier
long
identifier
long
identifier
k
symbol
)
symbol
{
identifier
NewLine
identifier
Q
identifier
res
symbol
(
integerConstant
1
symbol
,
integerConstant
0
symbol
)
symbol
;
identifier
NewLine
keyword
while
symbol
(
identifier
k
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
k
symbol
&
integerConstant
1
symbol
)
identifier
res
symbol
=
identifier
multiply
symbol
(
identifier
res
symbol
,
identifier
p
symbol
)
symbol
;
identifier
NewLine
identifier
p
symbol
=
identifier
multiply
symbol
(
identifier
p
symbol
,
identifier
p
symbol
)
symbol
;
identifier
NewLine
identifier
k
symbol
>
symbol
>
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
identifier
res
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
Q
identifier
I
symbol
(
integerConstant
1
symbol
,
integerConstant
1
symbol
)
symbol
,
identifier
K
symbol
(
integerConstant
1
symbol
,
integerConstant
3
symbol
)
symbol
;
identifier
NewLine
keyword
int
identifier
T
symbol
;
identifier
NewLine
identifier
long
identifier
long
identifier
L
symbol
,
identifier
X
symbol
;
identifier
NewLine
keyword
char
identifier
s
symbol
[
integerConstant
10005
symbol
]
symbol
;
identifier
NewLine
keyword
void
identifier
solve
symbol
(
symbol
)
symbol
{
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%lld%lld%s
symbol
,
symbol
&
identifier
L
symbol
,
symbol
&
identifier
X
symbol
,
identifier
s
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
identifier
pre
symbol
[
integerConstant
0
symbol
]
symbol
=
identifier
Q
symbol
(
integerConstant
1
symbol
,
identifier
s
symbol
[
integerConstant
0
symbol
]
symbol
-
identifier
i
symbol
+
integerConstant
1
symbol
)
symbol
;
identifier
NewLine
identifier
suf
symbol
[
identifier
L
symbol
-
integerConstant
1
symbol
]
symbol
=
identifier
Q
symbol
(
integerConstant
1
symbol
,
identifier
s
symbol
[
identifier
L
symbol
-
integerConstant
1
symbol
]
symbol
-
identifier
i
symbol
+
integerConstant
1
symbol
)
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
1
symbol
;
identifier
i
symbol
<
identifier
L
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
identifier
NewLine
identifier
pre
symbol
[
identifier
i
symbol
]
symbol
=
identifier
multiply
symbol
(
identifier
pre
symbol
[
identifier
i
symbol
-
integerConstant
1
symbol
]
symbol
,
identifier
Q
symbol
(
integerConstant
1
symbol
,
identifier
s
symbol
[
identifier
i
symbol
]
symbol
-
identifier
i
symbol
+
integerConstant
1
symbol
)
symbol
)
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
identifier
L
symbol
-
integerConstant
2
symbol
;
identifier
i
symbol
>
symbol
=
integerConstant
0
symbol
;
symbol
-
symbol
-
identifier
i
symbol
)
identifier
NewLine
identifier
suf
symbol
[
identifier
i
symbol
]
symbol
=
identifier
multiply
symbol
(
identifier
Q
symbol
(
integerConstant
1
symbol
,
identifier
s
symbol
[
identifier
i
symbol
]
symbol
-
identifier
i
symbol
+
integerConstant
1
symbol
)
symbol
,
identifier
suf
symbol
[
identifier
i
symbol
+
integerConstant
1
symbol
]
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
identifier
NewLine
keyword
if
symbol
(
identifier
pow
symbol
(
identifier
pre
symbol
[
identifier
L
symbol
-
integerConstant
1
symbol
]
symbol
,
identifier
X
symbol
)
symbol
=
identifier
Q
symbol
(
symbol
-
integerConstant
1
symbol
,
integerConstant
0
symbol
)
symbol
)
symbol
{
identifier
NewLine
identifier
printf
symbol
(
stringConstant
NO\n
symbol
)
symbol
;
identifier
NewLine
keyword
return
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
Q
identifier
w
symbol
[
integerConstant
4
symbol
]
symbol
=
symbol
{
identifier
Q
symbol
(
integerConstant
1
symbol
,
integerConstant
0
symbol
)
symbol
}
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
1
symbol
;
identifier
i
symbol
<
integerConstant
4
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
identifier
w
symbol
[
identifier
i
symbol
]
symbol
=
identifier
multiply
symbol
(
identifier
w
symbol
[
identifier
i
symbol
-
integerConstant
1
symbol
]
symbol
,
identifier
pre
symbol
[
identifier
L
symbol
-
integerConstant
1
symbol
]
symbol
)
symbol
;
identifier
NewLine
identifier
long
identifier
long
identifier
is
symbol
=
symbol
-
integerConstant
1
symbol
,
identifier
il
symbol
=
symbol
-
integerConstant
1
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
integerConstant
4
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
w
symbol
[
identifier
i
symbol
]
symbol
=
symbol
=
identifier
I
symbol
)
symbol
{
identifier
NewLine
identifier
is
symbol
=
identifier
i
symbol
,
identifier
il
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
break
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
j
symbol
=
integerConstant
0
symbol
;
identifier
j
symbol
<
identifier
L
symbol
;
symbol
+
symbol
+
identifier
j
symbol
)
identifier
NewLine
keyword
if
symbol
(
identifier
multiply
symbol
(
identifier
w
symbol
[
identifier
i
symbol
]
symbol
,
identifier
pre
symbol
[
identifier
j
symbol
]
symbol
)
symbol
=
symbol
=
identifier
I
symbol
)
symbol
{
identifier
NewLine
identifier
is
symbol
=
identifier
i
symbol
,
identifier
il
symbol
=
identifier
j
symbol
+
integerConstant
1
symbol
;
identifier
NewLine
identifier
break
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
is
symbol
=
symbol
-
integerConstant
1
symbol
)
identifier
break
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
long
identifier
long
identifier
ks
symbol
=
symbol
-
integerConstant
1
symbol
,
identifier
kl
symbol
=
symbol
-
integerConstant
1
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
integerConstant
4
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
w
symbol
[
identifier
i
symbol
]
symbol
=
symbol
=
identifier
K
symbol
)
symbol
{
identifier
NewLine
identifier
ks
symbol
=
identifier
i
symbol
,
identifier
kl
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
break
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
j
symbol
=
identifier
L
symbol
-
integerConstant
1
symbol
;
identifier
j
symbol
>
symbol
=
integerConstant
0
symbol
;
symbol
-
symbol
-
identifier
j
symbol
)
identifier
NewLine
keyword
if
symbol
(
identifier
multiply
symbol
(
identifier
suf
symbol
[
identifier
j
symbol
]
symbol
,
identifier
w
symbol
[
identifier
i
symbol
]
symbol
)
symbol
=
symbol
=
identifier
K
symbol
)
symbol
{
identifier
NewLine
identifier
ks
symbol
=
identifier
i
symbol
,
identifier
kl
symbol
=
identifier
L
symbol
-
identifier
j
symbol
;
identifier
NewLine
identifier
break
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
ks
symbol
=
symbol
-
integerConstant
1
symbol
)
identifier
break
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
is
symbol
=
symbol
=
symbol
-
integerConstant
1
symbol
|
symbol
|
identifier
ks
symbol
=
symbol
=
symbol
-
integerConstant
1
symbol
|
symbol
|
symbol
(
identifier
is
symbol
+
identifier
ks
symbol
)
symbol
*
identifier
L
symbol
+
identifier
il
symbol
+
identifier
kl
symbol
>
symbol
=
identifier
X
symbol
*
identifier
L
symbol
)
symbol
{
identifier
NewLine
identifier
printf
symbol
(
stringConstant
NO\n
symbol
)
symbol
;
identifier
NewLine
keyword
return
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
printf
symbol
(
stringConstant
YES\n
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
symbol
{
identifier
NewLine
identifier
freopen
symbol
(
stringConstant
C-large.in
symbol
,
stringConstant
r
symbol
,
identifier
stdin
symbol
)
symbol
;
identifier
NewLine
identifier
freopen
symbol
(
stringConstant
C-large.out
symbol
,
stringConstant
w
symbol
,
identifier
stdout
symbol
)
symbol
;
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
T
symbol
)
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
symbol
=
integerConstant
1
symbol
;
symbol
<
symbol
=
identifier
T
symbol
;
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: 
symbol
,
symbol
)
symbol
;
identifier
NewLine
identifier
solve
symbol
(
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
symbol
}
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/DanilC.0.cpp file...

identifier
include
symbol
<
identifier
exception
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
iostream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
iomanip
symbol
>
identifier
NewLine
identifier
NewLine
identifier
template
symbol
<
identifier
typename
identifier
T
symbol
>
identifier
NewLine
keyword
void
identifier
validate
symbol
(
identifier
T
identifier
parameter
symbol
,
identifier
T
identifier
min
symbol
,
identifier
T
identifier
max
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
parameter
symbol
<
identifier
min
symbol
&
symbol
&
identifier
parameter
symbol
>
identifier
max
symbol
)
identifier
NewLine
identifier
throw
identifier
std
identifier
exception
symbol
(
stringConstant
invalid parameter
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
class
identifier
Problem
symbol
{
identifier
NewLine
keyword
int
symbol
*
identifier
s
symbol
;
identifier
NewLine
keyword
int
identifier
smax
symbol
;
identifier
NewLine
keyword
int
identifier
extra
symbol
;
identifier
NewLine
identifier
public
identifier
NewLine
identifier
Problem
symbol
(
symbol
)
symbol
{
identifier
NewLine
identifier
s
symbol
=
identifier
nullptr
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
~
identifier
Problem
symbol
(
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
nullptr
symbol
=
identifier
s
symbol
)
identifier
delete
symbol
[
symbol
]
identifier
s
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
void
identifier
read
symbol
(
identifier
std
identifier
istream
symbol
&
identifier
in
symbol
)
symbol
{
identifier
NewLine
identifier
in
symbol
>
symbol
>
identifier
smax
symbol
;
identifier
NewLine
identifier
s
symbol
=
identifier
new
keyword
int
symbol
[
identifier
smax
symbol
+
integerConstant
1
symbol
]
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
symbol
=
identifier
smax
symbol
;
symbol
)
symbol
{
identifier
NewLine
keyword
char
identifier
c
symbol
;
identifier
NewLine
identifier
in
symbol
>
symbol
>
identifier
c
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
c
symbol
>
symbol
=
integerConstant
0
symbol
&
symbol
&
identifier
c
symbol
<
symbol
=
integerConstant
9
symbol
)
identifier
s
symbol
[
identifier
i
symbol
+
symbol
+
symbol
]
symbol
=
identifier
c
symbol
-
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
keyword
void
identifier
solve
symbol
(
symbol
)
symbol
{
identifier
NewLine
identifier
extra
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
keyword
int
identifier
total
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
symbol
=
identifier
smax
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
delta
identifier
extra
symbol
=
symbol
(
identifier
total
symbol
<
identifier
i
symbol
)
symbol
(
identifier
i
symbol
-
identifier
total
symbol
)
integerConstant
0
symbol
;
identifier
NewLine
identifier
total
symbol
+
symbol
=
identifier
s
symbol
[
identifier
i
symbol
]
symbol
;
identifier
NewLine
identifier
total
symbol
+
symbol
=
identifier
delta
identifier
extra
symbol
;
identifier
NewLine
identifier
extra
symbol
+
symbol
=
identifier
delta
identifier
extra
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
keyword
void
identifier
print
symbol
(
identifier
std
identifier
ostream
symbol
&
identifier
out
symbol
)
symbol
{
identifier
NewLine
identifier
out
symbol
<
symbol
<
identifier
extra
symbol
<
symbol
<
identifier
std
identifier
endl
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
symbol
;
identifier
NewLine
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
keyword
int
identifier
argc
symbol
,
keyword
char
symbol
*
symbol
*
identifier
argv
symbol
)
symbol
{
identifier
NewLine
identifier
try
symbol
{
identifier
NewLine
keyword
int
identifier
T
symbol
;
identifier
NewLine
identifier
std
identifier
cin
symbol
>
symbol
>
identifier
T
symbol
;
identifier
NewLine
identifier
validate
symbol
(
identifier
T
symbol
,
integerConstant
1
symbol
,
integerConstant
100
symbol
)
symbol
;
identifier
NewLine
identifier
std
identifier
cout
symbol
<
symbol
<
identifier
std
identifier
setprecision
symbol
(
integerConstant
7
symbol
)
symbol
<
symbol
<
identifier
std
identifier
fixed
symbol
;
identifier
NewLine
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
iT
symbol
=
integerConstant
1
symbol
;
identifier
iT
symbol
<
symbol
=
identifier
T
symbol
;
symbol
+
symbol
+
identifier
iT
symbol
)
symbol
{
identifier
NewLine
identifier
Problem
identifier
p
symbol
;
identifier
NewLine
identifier
p
symbol
.
identifier
read
symbol
(
identifier
std
identifier
cin
symbol
)
symbol
;
identifier
NewLine
identifier
p
symbol
.
identifier
solve
symbol
(
symbol
)
symbol
;
identifier
NewLine
identifier
std
identifier
cout
symbol
<
symbol
<
stringConstant
Case #
symbol
<
symbol
<
identifier
iT
symbol
<
symbol
<
stringConstant
: 
symbol
;
identifier
NewLine
identifier
p
symbol
.
identifier
print
symbol
(
identifier
std
identifier
cout
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
symbol
}
identifier
NewLine
identifier
catch
symbol
(
identifier
std
identifier
exception
symbol
&
identifier
x
symbol
)
symbol
{
identifier
NewLine
identifier
std
identifier
cerr
symbol
<
symbol
<
stringConstant
something went wrong: 
symbol
<
symbol
<
identifier
x
symbol
.
identifier
what
symbol
(
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
symbol
}
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/DanilC.1.cpp file...

identifier
include
symbol
<
identifier
exception
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
iostream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
iomanip
symbol
>
identifier
NewLine
identifier
NewLine
identifier
template
symbol
<
identifier
typename
identifier
T
symbol
>
identifier
NewLine
keyword
void
identifier
validate
symbol
(
identifier
T
identifier
parameter
symbol
,
identifier
T
identifier
min
symbol
,
identifier
T
identifier
max
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
parameter
symbol
<
identifier
min
symbol
&
symbol
&
identifier
parameter
symbol
>
identifier
max
symbol
)
identifier
NewLine
identifier
throw
identifier
std
identifier
exception
symbol
(
stringConstant
invalid parameter
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
class
identifier
Problem
symbol
{
identifier
NewLine
keyword
int
identifier
D
symbol
;
identifier
NewLine
keyword
int
identifier
min
identifier
minutes
symbol
;
identifier
NewLine
keyword
int
symbol
*
identifier
P
symbol
;
identifier
NewLine
identifier
public
identifier
NewLine
identifier
Problem
symbol
(
symbol
)
symbol
{
identifier
P
symbol
=
identifier
nullptr
symbol
;
symbol
}
identifier
NewLine
symbol
~
identifier
Problem
symbol
(
symbol
)
symbol
{
keyword
if
symbol
(
identifier
P
symbol
)
identifier
delete
symbol
[
symbol
]
identifier
P
symbol
;
symbol
}
identifier
NewLine
keyword
void
identifier
read
symbol
(
identifier
std
identifier
istream
symbol
&
identifier
in
symbol
)
symbol
{
identifier
NewLine
identifier
in
symbol
>
symbol
>
identifier
D
symbol
;
identifier
NewLine
identifier
min
identifier
minutes
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
validate
symbol
(
identifier
D
symbol
,
integerConstant
1
symbol
,
integerConstant
1000
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
keyword
if
symbol
(
identifier
P
symbol
)
identifier
delete
symbol
[
symbol
]
identifier
P
symbol
;
identifier
NewLine
identifier
P
symbol
=
identifier
new
keyword
int
symbol
[
identifier
D
symbol
]
symbol
;
identifier
NewLine
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
D
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
symbol
{
identifier
NewLine
identifier
in
symbol
>
symbol
>
identifier
P
symbol
[
identifier
i
symbol
]
symbol
;
identifier
NewLine
identifier
validate
symbol
(
identifier
P
symbol
[
identifier
i
symbol
]
symbol
,
integerConstant
1
symbol
,
integerConstant
1000
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
P
symbol
[
identifier
i
symbol
]
symbol
>
identifier
min
identifier
minutes
symbol
)
identifier
NewLine
identifier
min
identifier
minutes
symbol
=
identifier
P
symbol
[
identifier
i
symbol
]
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
keyword
void
identifier
solve
symbol
(
symbol
)
symbol
{
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
eat
symbol
=
integerConstant
1
symbol
;
identifier
eat
symbol
<
identifier
min
identifier
minutes
symbol
;
symbol
+
symbol
+
identifier
eat
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
special
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
D
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
symbol
{
identifier
NewLine
identifier
special
symbol
+
symbol
=
symbol
(
identifier
P
symbol
[
identifier
i
symbol
]
symbol
-
integerConstant
1
symbol
)
symbol
/
identifier
eat
symbol
;
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
special
symbol
+
identifier
eat
symbol
<
identifier
min
identifier
minutes
symbol
)
symbol
{
identifier
NewLine
identifier
min
identifier
minutes
symbol
=
identifier
special
symbol
+
identifier
eat
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
identifier
WRONG
identifier
SOLUTIION
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
special
symbol
=
integerConstant
1
symbol
;
identifier
special
symbol
<
identifier
min
identifier
minutes
symbol
;
symbol
+
symbol
+
identifier
special
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
newP1
symbol
=
identifier
maxP
symbol
/
integerConstant
2
symbol
;
identifier
NewLine
keyword
int
identifier
newP2
symbol
=
identifier
maxP
symbol
-
identifier
newP1
symbol
;
identifier
NewLine
identifier
P
symbol
[
identifier
maxP
symbol
]
symbol
-
symbol
-
symbol
;
identifier
NewLine
identifier
P
symbol
[
identifier
newP1
symbol
]
symbol
+
symbol
+
symbol
;
identifier
NewLine
identifier
P
symbol
[
identifier
newP2
symbol
]
symbol
+
symbol
+
symbol
;
identifier
NewLine
keyword
while
symbol
(
identifier
P
symbol
[
identifier
maxP
symbol
]
symbol
=
symbol
=
integerConstant
0
symbol
)
symbol
-
symbol
-
identifier
maxP
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
special
symbol
+
identifier
maxP
symbol
<
identifier
min
identifier
minutes
symbol
)
symbol
{
identifier
NewLine
identifier
min
identifier
minutes
symbol
=
identifier
special
symbol
+
identifier
maxP
symbol
;
identifier
NewLine
keyword
if
keyword
false
identifier
NewLine
identifier
std
identifier
cerr
symbol
<
symbol
<
identifier
special
symbol
<
symbol
<
symbol
+
symbol
<
symbol
<
identifier
maxP
symbol
<
symbol
<
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
identifier
maxP
symbol
;
identifier
i
symbol
>
integerConstant
0
symbol
;
symbol
-
symbol
-
identifier
i
symbol
)
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
j
symbol
=
integerConstant
0
symbol
;
identifier
j
symbol
<
identifier
P
symbol
[
identifier
i
symbol
]
symbol
;
symbol
+
symbol
+
identifier
j
symbol
)
identifier
NewLine
identifier
std
identifier
cerr
symbol
<
symbol
<
identifier
i
symbol
<
symbol
<
symbol
;
identifier
NewLine
identifier
std
identifier
cerr
symbol
<
symbol
<
identifier
std
identifier
endl
symbol
;
identifier
NewLine
identifier
endif
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
endif
identifier
NewLine
symbol
}
identifier
NewLine
keyword
void
identifier
print
symbol
(
identifier
std
identifier
ostream
symbol
&
identifier
out
symbol
)
symbol
{
identifier
NewLine
identifier
out
symbol
<
symbol
<
identifier
min
identifier
minutes
symbol
<
symbol
<
identifier
std
identifier
endl
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
symbol
;
identifier
NewLine
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
keyword
int
identifier
argc
symbol
,
keyword
char
symbol
*
symbol
*
identifier
argv
symbol
)
symbol
{
identifier
NewLine
identifier
try
symbol
{
identifier
NewLine
keyword
int
identifier
T
symbol
;
identifier
NewLine
identifier
std
identifier
cin
symbol
>
symbol
>
identifier
T
symbol
;
identifier
NewLine
identifier
validate
symbol
(
identifier
T
symbol
,
integerConstant
1
symbol
,
integerConstant
100
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
iT
symbol
=
integerConstant
1
symbol
;
identifier
iT
symbol
<
symbol
=
identifier
T
symbol
;
symbol
+
symbol
+
identifier
iT
symbol
)
symbol
{
identifier
NewLine
identifier
Problem
identifier
p
symbol
;
identifier
NewLine
identifier
p
symbol
.
identifier
read
symbol
(
identifier
std
identifier
cin
symbol
)
symbol
;
identifier
NewLine
identifier
p
symbol
.
identifier
solve
symbol
(
symbol
)
symbol
;
identifier
NewLine
identifier
std
identifier
cout
symbol
<
symbol
<
stringConstant
Case #
symbol
<
symbol
<
identifier
iT
symbol
<
symbol
<
stringConstant
: 
symbol
;
identifier
NewLine
identifier
p
symbol
.
identifier
print
symbol
(
identifier
std
identifier
cout
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
symbol
}
identifier
NewLine
identifier
catch
symbol
(
identifier
std
identifier
exception
symbol
&
identifier
x
symbol
)
symbol
{
identifier
NewLine
identifier
std
identifier
cerr
symbol
<
symbol
<
stringConstant
something went wrong: 
symbol
<
symbol
<
identifier
x
symbol
.
identifier
what
symbol
(
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
symbol
}
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/DanilC.2.cpp file...

identifier
include
symbol
<
identifier
exception
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
iostream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
iomanip
symbol
>
identifier
NewLine
identifier
NewLine
identifier
template
symbol
<
identifier
typename
identifier
T
symbol
>
identifier
NewLine
keyword
void
identifier
validate
symbol
(
identifier
T
identifier
parameter
symbol
,
identifier
T
identifier
min
symbol
,
identifier
T
identifier
max
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
parameter
symbol
<
identifier
min
symbol
&
symbol
&
identifier
parameter
symbol
>
identifier
max
symbol
)
identifier
NewLine
identifier
throw
identifier
std
identifier
exception
symbol
(
stringConstant
invalid parameter
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
enum
identifier
Qmin
symbol
{
identifier
NewLine
identifier
plus
identifier
one
symbol
=
integerConstant
0
symbol
,
identifier
NewLine
identifier
plus
identifier
i
symbol
=
integerConstant
1
symbol
,
identifier
NewLine
identifier
plus
identifier
j
symbol
=
integerConstant
2
symbol
,
identifier
NewLine
identifier
plus
identifier
k
symbol
=
integerConstant
3
symbol
,
identifier
NewLine
identifier
minus
identifier
one
symbol
=
integerConstant
4
symbol
,
identifier
NewLine
identifier
minus
identifier
i
symbol
=
integerConstant
5
symbol
,
identifier
NewLine
identifier
minus
identifier
j
symbol
=
integerConstant
6
symbol
,
identifier
NewLine
identifier
minus
identifier
k
symbol
=
integerConstant
7
identifier
NewLine
symbol
}
symbol
;
identifier
NewLine
identifier
NewLine
keyword
class
identifier
Problem
symbol
{
identifier
NewLine
identifier
Qmin
symbol
*
identifier
str
symbol
;
identifier
NewLine
identifier
long
identifier
long
identifier
X
symbol
;
identifier
NewLine
keyword
int
identifier
L
symbol
;
identifier
NewLine
identifier
Qmin
identifier
sumStr
symbol
;
identifier
NewLine
identifier
NewLine
keyword
static
identifier
Qmin
identifier
multbuff
symbol
[
integerConstant
8
symbol
*
integerConstant
3
symbol
]
symbol
;
identifier
inline
keyword
static
keyword
int
identifier
Qindex
symbol
(
identifier
Qmin
identifier
f
symbol
,
identifier
Qmin
identifier
s
symbol
)
symbol
{
keyword
return
symbol
(
keyword
int
symbol
)
identifier
f
symbol
+
integerConstant
8
symbol
*
symbol
(
symbol
(
keyword
int
symbol
)
identifier
s
symbol
-
integerConstant
1
symbol
)
symbol
;
symbol
}
identifier
NewLine
identifier
public
identifier
NewLine
keyword
static
keyword
void
identifier
prepare
symbol
(
symbol
)
symbol
{
identifier
NewLine
identifier
multbuff
symbol
[
identifier
Qindex
symbol
(
identifier
plus
identifier
one
symbol
,
identifier
plus
identifier
i
symbol
)
symbol
]
symbol
=
identifier
plus
identifier
i
symbol
;
identifier
NewLine
identifier
multbuff
symbol
[
identifier
Qindex
symbol
(
identifier
plus
identifier
i
symbol
,
identifier
plus
identifier
i
symbol
)
symbol
]
symbol
=
identifier
minus
identifier
one
symbol
;
identifier
NewLine
identifier
multbuff
symbol
[
identifier
Qindex
symbol
(
identifier
plus
identifier
j
symbol
,
identifier
plus
identifier
i
symbol
)
symbol
]
symbol
=
identifier
minus
identifier
k
symbol
;
identifier
NewLine
identifier
multbuff
symbol
[
identifier
Qindex
symbol
(
identifier
plus
identifier
k
symbol
,
identifier
plus
identifier
i
symbol
)
symbol
]
symbol
=
identifier
plus
identifier
j
symbol
;
identifier
NewLine
identifier
multbuff
symbol
[
identifier
Qindex
symbol
(
identifier
minus
identifier
one
symbol
,
identifier
plus
identifier
i
symbol
)
symbol
]
symbol
=
identifier
minus
identifier
i
symbol
;
identifier
NewLine
identifier
multbuff
symbol
[
identifier
Qindex
symbol
(
identifier
minus
identifier
i
symbol
,
identifier
plus
identifier
i
symbol
)
symbol
]
symbol
=
identifier
plus
identifier
one
symbol
;
identifier
NewLine
identifier
multbuff
symbol
[
identifier
Qindex
symbol
(
identifier
minus
identifier
j
symbol
,
identifier
plus
identifier
i
symbol
)
symbol
]
symbol
=
identifier
plus
identifier
k
symbol
;
identifier
NewLine
identifier
multbuff
symbol
[
identifier
Qindex
symbol
(
identifier
minus
identifier
k
symbol
,
identifier
plus
identifier
i
symbol
)
symbol
]
symbol
=
identifier
minus
identifier
j
symbol
;
identifier
NewLine
identifier
NewLine
identifier
multbuff
symbol
[
identifier
Qindex
symbol
(
identifier
plus
identifier
one
symbol
,
identifier
plus
identifier
j
symbol
)
symbol
]
symbol
=
identifier
plus
identifier
j
symbol
;
identifier
NewLine
identifier
multbuff
symbol
[
identifier
Qindex
symbol
(
identifier
plus
identifier
i
symbol
,
identifier
plus
identifier
j
symbol
)
symbol
]
symbol
=
identifier
plus
identifier
k
symbol
;
identifier
NewLine
identifier
multbuff
symbol
[
identifier
Qindex
symbol
(
identifier
plus
identifier
j
symbol
,
identifier
plus
identifier
j
symbol
)
symbol
]
symbol
=
identifier
minus
identifier
one
symbol
;
identifier
NewLine
identifier
multbuff
symbol
[
identifier
Qindex
symbol
(
identifier
plus
identifier
k
symbol
,
identifier
plus
identifier
j
symbol
)
symbol
]
symbol
=
identifier
minus
identifier
i
symbol
;
identifier
NewLine
identifier
multbuff
symbol
[
identifier
Qindex
symbol
(
identifier
minus
identifier
one
symbol
,
identifier
plus
identifier
j
symbol
)
symbol
]
symbol
=
identifier
minus
identifier
j
symbol
;
identifier
NewLine
identifier
multbuff
symbol
[
identifier
Qindex
symbol
(
identifier
minus
identifier
i
symbol
,
identifier
plus
identifier
j
symbol
)
symbol
]
symbol
=
identifier
minus
identifier
k
symbol
;
identifier
NewLine
identifier
multbuff
symbol
[
identifier
Qindex
symbol
(
identifier
minus
identifier
j
symbol
,
identifier
plus
identifier
j
symbol
)
symbol
]
symbol
=
identifier
plus
identifier
one
symbol
;
identifier
NewLine
identifier
multbuff
symbol
[
identifier
Qindex
symbol
(
identifier
minus
identifier
k
symbol
,
identifier
plus
identifier
j
symbol
)
symbol
]
symbol
=
identifier
plus
identifier
i
symbol
;
identifier
NewLine
identifier
NewLine
identifier
multbuff
symbol
[
identifier
Qindex
symbol
(
identifier
plus
identifier
one
symbol
,
identifier
plus
identifier
k
symbol
)
symbol
]
symbol
=
identifier
plus
identifier
k
symbol
;
identifier
NewLine
identifier
multbuff
symbol
[
identifier
Qindex
symbol
(
identifier
plus
identifier
i
symbol
,
identifier
plus
identifier
k
symbol
)
symbol
]
symbol
=
identifier
minus
identifier
j
symbol
;
identifier
NewLine
identifier
multbuff
symbol
[
identifier
Qindex
symbol
(
identifier
plus
identifier
j
symbol
,
identifier
plus
identifier
k
symbol
)
symbol
]
symbol
=
identifier
plus
identifier
i
symbol
;
identifier
NewLine
identifier
multbuff
symbol
[
identifier
Qindex
symbol
(
identifier
plus
identifier
k
symbol
,
identifier
plus
identifier
k
symbol
)
symbol
]
symbol
=
identifier
minus
identifier
one
symbol
;
identifier
NewLine
identifier
multbuff
symbol
[
identifier
Qindex
symbol
(
identifier
minus
identifier
one
symbol
,
identifier
plus
identifier
k
symbol
)
symbol
]
symbol
=
identifier
minus
identifier
k
symbol
;
identifier
NewLine
identifier
multbuff
symbol
[
identifier
Qindex
symbol
(
identifier
minus
identifier
i
symbol
,
identifier
plus
identifier
k
symbol
)
symbol
]
symbol
=
identifier
plus
identifier
j
symbol
;
identifier
NewLine
identifier
multbuff
symbol
[
identifier
Qindex
symbol
(
identifier
minus
identifier
j
symbol
,
identifier
plus
identifier
k
symbol
)
symbol
]
symbol
=
identifier
minus
identifier
i
symbol
;
identifier
NewLine
identifier
multbuff
symbol
[
identifier
Qindex
symbol
(
identifier
minus
identifier
k
symbol
,
identifier
plus
identifier
k
symbol
)
symbol
]
symbol
=
identifier
plus
identifier
one
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
static
identifier
inline
identifier
Qmin
identifier
mult
symbol
(
identifier
Qmin
identifier
f
symbol
,
identifier
Qmin
identifier
s
symbol
)
symbol
{
identifier
NewLine
keyword
return
identifier
multbuff
symbol
[
identifier
Qindex
symbol
(
identifier
f
symbol
,
identifier
s
symbol
)
symbol
]
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
static
identifier
inline
identifier
Qmin
identifier
power
symbol
(
identifier
Qmin
identifier
f
symbol
,
keyword
int
identifier
x
symbol
)
symbol
{
identifier
NewLine
identifier
switch
symbol
(
identifier
x
integerConstant
4
symbol
)
symbol
{
identifier
NewLine
identifier
case
integerConstant
0
identifier
NewLine
keyword
return
identifier
plus
identifier
one
symbol
;
identifier
NewLine
identifier
case
integerConstant
1
identifier
NewLine
keyword
return
identifier
f
symbol
;
identifier
NewLine
identifier
case
integerConstant
2
identifier
NewLine
identifier
switch
symbol
(
identifier
f
symbol
)
symbol
{
identifier
NewLine
identifier
case
identifier
plus
identifier
one
identifier
NewLine
identifier
case
identifier
minus
identifier
one
identifier
NewLine
keyword
return
identifier
plus
identifier
one
symbol
;
identifier
NewLine
identifier
default
identifier
NewLine
keyword
return
identifier
minus
identifier
one
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
case
integerConstant
3
identifier
NewLine
identifier
switch
symbol
(
identifier
f
symbol
)
symbol
{
identifier
NewLine
identifier
case
identifier
plus
identifier
one
identifier
NewLine
identifier
case
identifier
minus
identifier
one
identifier
NewLine
keyword
return
identifier
f
symbol
;
identifier
NewLine
identifier
default
identifier
NewLine
keyword
return
symbol
(
identifier
Qmin
symbol
)
symbol
(
symbol
(
symbol
(
keyword
int
symbol
)
identifier
f
symbol
+
integerConstant
4
symbol
)
integerConstant
8
symbol
)
symbol
;
symbol
}
identifier
NewLine
identifier
default
identifier
NewLine
identifier
throw
identifier
new
identifier
std
identifier
exception
symbol
(
stringConstant
should be impossible to have another reminder
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
void
identifier
read
symbol
(
identifier
std
identifier
istream
symbol
&
identifier
in
symbol
)
symbol
{
identifier
NewLine
identifier
in
symbol
>
symbol
>
identifier
L
symbol
>
symbol
>
identifier
X
symbol
;
identifier
NewLine
identifier
validate
symbol
(
identifier
L
symbol
,
integerConstant
1
symbol
,
integerConstant
10000
symbol
)
symbol
;
identifier
NewLine
identifier
validate
symbol
(
identifier
X
symbol
,
integerConstant
1
identifier
ll
symbol
,
integerConstant
1000000000000
identifier
ll
symbol
)
symbol
;
identifier
NewLine
identifier
validate
symbol
(
identifier
X
symbol
*
identifier
L
symbol
,
integerConstant
1
identifier
ll
symbol
,
integerConstant
10000000000000000
identifier
ll
symbol
)
symbol
;
identifier
NewLine
identifier
str
symbol
=
identifier
new
identifier
Qmin
symbol
[
identifier
L
symbol
]
symbol
;
identifier
NewLine
keyword
char
identifier
space
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
L
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
symbol
{
identifier
NewLine
identifier
in
symbol
>
symbol
>
identifier
space
symbol
;
identifier
NewLine
identifier
switch
symbol
(
identifier
space
symbol
)
symbol
{
identifier
NewLine
identifier
case
identifier
i
identifier
str
symbol
[
identifier
i
symbol
]
symbol
=
identifier
plus
identifier
i
symbol
;
identifier
break
symbol
;
identifier
NewLine
identifier
case
identifier
j
identifier
str
symbol
[
identifier
i
symbol
]
symbol
=
identifier
plus
identifier
j
symbol
;
identifier
break
symbol
;
identifier
NewLine
identifier
case
identifier
k
identifier
str
symbol
[
identifier
i
symbol
]
symbol
=
identifier
plus
identifier
k
symbol
;
identifier
break
symbol
;
identifier
NewLine
identifier
default
symbol
-
symbol
-
identifier
i
symbol
;
identifier
break
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
sumStr
symbol
=
identifier
plus
identifier
one
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
L
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
identifier
NewLine
identifier
sumStr
symbol
=
identifier
mult
symbol
(
identifier
sumStr
symbol
,
identifier
str
symbol
[
identifier
i
symbol
]
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
private
identifier
NewLine
keyword
int
identifier
iL
symbol
,
identifier
iX
symbol
;
identifier
NewLine
identifier
bool
identifier
result
symbol
;
identifier
NewLine
identifier
public
identifier
NewLine
identifier
bool
identifier
find
symbol
(
identifier
Qmin
identifier
target
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
iX
symbol
=
symbol
=
identifier
X
symbol
)
identifier
NewLine
keyword
return
keyword
false
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
check
identifier
total
identifier
max
symbol
=
identifier
L
symbol
*
integerConstant
4
symbol
;
identifier
Qmin
identifier
now
symbol
=
identifier
plus
identifier
one
symbol
;
identifier
NewLine
identifier
for
symbol
(
symbol
;
identifier
check
identifier
total
identifier
max
symbol
>
integerConstant
0
symbol
;
symbol
-
symbol
-
identifier
check
identifier
total
identifier
max
symbol
)
symbol
{
identifier
NewLine
identifier
now
symbol
=
identifier
mult
symbol
(
identifier
now
symbol
,
identifier
str
symbol
[
identifier
iL
symbol
]
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
symbol
+
symbol
+
identifier
iL
symbol
=
symbol
=
identifier
L
symbol
)
symbol
{
identifier
NewLine
symbol
+
symbol
+
identifier
iX
symbol
;
identifier
NewLine
identifier
iL
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
now
symbol
=
symbol
=
identifier
target
symbol
)
identifier
NewLine
keyword
return
keyword
true
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
iX
symbol
=
symbol
=
identifier
X
symbol
)
identifier
NewLine
keyword
return
keyword
false
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
keyword
false
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
void
identifier
solve
symbol
(
symbol
)
symbol
{
identifier
NewLine
identifier
iL
symbol
=
identifier
iX
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
power
symbol
(
identifier
sumStr
symbol
,
identifier
X
integerConstant
4
symbol
)
symbol
=
identifier
minus
identifier
one
symbol
)
symbol
{
identifier
NewLine
identifier
result
symbol
=
keyword
false
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
else
symbol
{
identifier
NewLine
identifier
result
symbol
=
identifier
find
symbol
(
identifier
plus
identifier
i
symbol
)
symbol
&
symbol
&
identifier
NewLine
identifier
find
symbol
(
identifier
plus
identifier
j
symbol
)
symbol
&
symbol
&
identifier
NewLine
identifier
find
symbol
(
identifier
plus
identifier
k
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
keyword
void
identifier
print
symbol
(
identifier
std
identifier
ostream
symbol
&
identifier
out
symbol
)
symbol
{
identifier
NewLine
identifier
out
symbol
<
symbol
<
symbol
(
identifier
result
stringConstant
YES
stringConstant
NO
symbol
)
symbol
<
symbol
<
identifier
std
identifier
endl
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
symbol
;
identifier
NewLine
identifier
NewLine
identifier
Qmin
identifier
Problem
identifier
multbuff
symbol
[
integerConstant
8
symbol
*
integerConstant
3
symbol
]
symbol
;
identifier
NewLine
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
keyword
int
identifier
argc
symbol
,
keyword
char
symbol
*
symbol
*
identifier
argv
symbol
)
symbol
{
identifier
NewLine
identifier
try
symbol
{
identifier
NewLine
identifier
Problem
identifier
prepare
symbol
(
symbol
)
symbol
;
identifier
NewLine
keyword
int
identifier
T
symbol
;
identifier
NewLine
identifier
std
identifier
cin
symbol
>
symbol
>
identifier
T
symbol
;
identifier
NewLine
identifier
validate
symbol
(
identifier
T
symbol
,
integerConstant
1
symbol
,
integerConstant
100
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
iT
symbol
=
integerConstant
1
symbol
;
identifier
iT
symbol
<
symbol
=
identifier
T
symbol
;
symbol
+
symbol
+
identifier
iT
symbol
)
symbol
{
identifier
NewLine
identifier
Problem
identifier
p
symbol
;
identifier
NewLine
identifier
p
symbol
.
identifier
read
symbol
(
identifier
std
identifier
cin
symbol
)
symbol
;
identifier
NewLine
identifier
p
symbol
.
identifier
solve
symbol
(
symbol
)
symbol
;
identifier
NewLine
identifier
std
identifier
cout
symbol
<
symbol
<
stringConstant
Case #
symbol
<
symbol
<
identifier
iT
symbol
<
symbol
<
stringConstant
: 
symbol
;
identifier
NewLine
identifier
p
symbol
.
identifier
print
symbol
(
identifier
std
identifier
cout
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
symbol
}
identifier
NewLine
identifier
catch
symbol
(
identifier
std
identifier
exception
symbol
&
identifier
x
symbol
)
symbol
{
identifier
NewLine
identifier
std
identifier
cerr
symbol
<
symbol
<
stringConstant
something went wrong: 
symbol
<
symbol
<
identifier
x
symbol
.
identifier
what
symbol
(
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
symbol
}
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/DEGwer.0.cpp file...

identifier
include
symbol
<
identifier
stdio
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
include
stringConstant
stdafx.h
identifier
NewLine
identifier
include
symbol
<
identifier
vector
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
algorithm
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
string
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
iostream
symbol
>
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
FILE
symbol
*
identifier
fr
symbol
=
identifier
fopen
symbol
(
stringConstant
a-large.in
symbol
,
stringConstant
r
symbol
)
symbol
;
identifier
NewLine
identifier
FILE
symbol
*
identifier
fw
symbol
=
identifier
fopen
symbol
(
stringConstant
outl.txt
symbol
,
stringConstant
w
symbol
)
symbol
;
identifier
NewLine
keyword
int
identifier
num
symbol
;
identifier
NewLine
identifier
fscanf
symbol
(
identifier
fr
symbol
,
stringConstant
%d
symbol
,
symbol
&
identifier
num
symbol
)
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
p
symbol
=
integerConstant
0
symbol
;
identifier
p
symbol
<
identifier
num
symbol
;
identifier
p
symbol
+
symbol
+
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
int
identifier
num
symbol
;
identifier
NewLine
identifier
fscanf
symbol
(
identifier
fr
symbol
,
stringConstant
%d
symbol
,
symbol
&
identifier
num
symbol
)
symbol
;
identifier
NewLine
identifier
vector
symbol
<
keyword
int
symbol
>
identifier
vec
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
num
symbol
+
integerConstant
1
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
char
identifier
zan
symbol
;
identifier
NewLine
identifier
fscanf
symbol
(
identifier
fr
symbol
,
stringConstant
 %c
symbol
,
symbol
&
identifier
zan
symbol
)
symbol
;
identifier
NewLine
identifier
vec
symbol
.
identifier
push
identifier
back
symbol
(
identifier
zan
symbol
-
integerConstant
0
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
bool
identifier
f
symbol
=
keyword
true
symbol
;
identifier
NewLine
keyword
int
identifier
cnt
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
j
symbol
=
integerConstant
0
symbol
;
identifier
j
symbol
<
symbol
=
identifier
num
symbol
;
identifier
j
symbol
+
symbol
+
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
cnt
symbol
>
symbol
=
identifier
j
symbol
)
identifier
cnt
symbol
+
symbol
=
identifier
vec
symbol
[
identifier
j
symbol
]
symbol
;
identifier
NewLine
keyword
else
keyword
if
symbol
(
identifier
vec
symbol
[
identifier
j
symbol
]
symbol
=
integerConstant
0
symbol
)
identifier
f
symbol
=
keyword
false
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
f
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
fprintf
symbol
(
identifier
fw
symbol
,
stringConstant
Case #%d: %d\n
symbol
,
identifier
p
symbol
+
integerConstant
1
symbol
,
identifier
i
symbol
)
symbol
;
identifier
NewLine
identifier
break
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
vec
symbol
[
integerConstant
0
symbol
]
symbol
+
symbol
+
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
symbol
}
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/DEGwer.1.cpp file...

identifier
include
symbol
<
identifier
stdio
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
include
stringConstant
stdafx.h
identifier
NewLine
identifier
include
symbol
<
identifier
vector
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
algorithm
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
queue
symbol
>
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
FILE
symbol
*
identifier
fr
symbol
=
identifier
fopen
symbol
(
stringConstant
b-large.in
symbol
,
stringConstant
r
symbol
)
symbol
;
identifier
NewLine
identifier
FILE
symbol
*
identifier
fw
symbol
=
identifier
fopen
symbol
(
stringConstant
outl.txt
symbol
,
stringConstant
w
symbol
)
symbol
;
identifier
NewLine
keyword
int
identifier
data
symbol
;
identifier
NewLine
identifier
fscanf
symbol
(
identifier
fr
symbol
,
stringConstant
%d
symbol
,
symbol
&
identifier
data
symbol
)
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
p
symbol
=
integerConstant
0
symbol
;
identifier
p
symbol
<
identifier
data
symbol
;
identifier
p
symbol
+
symbol
+
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
int
identifier
num
symbol
;
identifier
NewLine
identifier
fscanf
symbol
(
identifier
fr
symbol
,
stringConstant
%d
symbol
,
symbol
&
identifier
num
symbol
)
symbol
;
identifier
NewLine
identifier
vector
symbol
<
keyword
int
symbol
>
identifier
vec
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
num
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
int
identifier
zan
symbol
;
identifier
NewLine
identifier
fscanf
symbol
(
identifier
fr
symbol
,
stringConstant
%d
symbol
,
symbol
&
identifier
zan
symbol
)
symbol
;
identifier
NewLine
identifier
vec
symbol
.
identifier
push
identifier
back
symbol
(
identifier
zan
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
int
identifier
mini
symbol
=
integerConstant
1000000000
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
1
symbol
;
identifier
i
symbol
<
symbol
=
integerConstant
1000
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
int
identifier
cnt
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
j
symbol
=
integerConstant
0
symbol
;
identifier
j
symbol
<
identifier
vec
symbol
.
identifier
size
symbol
(
symbol
)
symbol
;
identifier
j
symbol
+
symbol
+
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
cnt
symbol
+
symbol
=
symbol
(
identifier
vec
symbol
[
identifier
j
symbol
]
symbol
-
integerConstant
1
symbol
)
symbol
/
identifier
i
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
mini
symbol
=
identifier
min
symbol
(
identifier
mini
symbol
,
identifier
i
symbol
+
identifier
cnt
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
fprintf
symbol
(
identifier
fw
symbol
,
stringConstant
Case #%d: %d\n
symbol
,
identifier
p
symbol
+
integerConstant
1
symbol
,
identifier
mini
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
symbol
}
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/DEGwer.2.cpp file...

identifier
include
symbol
<
identifier
stdio
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
include
stringConstant
stdafx.h
identifier
NewLine
identifier
include
symbol
<
identifier
vector
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
algorithm
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
math
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
stdlib
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
keyword
int
identifier
dat
symbol
[
integerConstant
5
symbol
]
symbol
[
integerConstant
5
symbol
]
symbol
=
identifier
NewLine
symbol
{
identifier
NewLine
symbol
{
integerConstant
0
symbol
,
integerConstant
0
symbol
,
integerConstant
0
symbol
,
integerConstant
0
symbol
,
integerConstant
0
symbol
}
symbol
,
identifier
NewLine
symbol
{
integerConstant
0
symbol
,
integerConstant
1
symbol
,
integerConstant
2
symbol
,
integerConstant
3
symbol
,
integerConstant
4
symbol
}
symbol
,
identifier
NewLine
symbol
{
integerConstant
0
symbol
,
integerConstant
2
symbol
,
symbol
-
integerConstant
1
symbol
,
integerConstant
4
symbol
,
symbol
-
integerConstant
3
symbol
}
symbol
,
identifier
NewLine
symbol
{
integerConstant
0
symbol
,
integerConstant
3
symbol
,
symbol
-
integerConstant
4
symbol
,
symbol
-
integerConstant
1
symbol
,
integerConstant
2
symbol
}
symbol
,
identifier
NewLine
symbol
{
integerConstant
0
symbol
,
integerConstant
4
symbol
,
integerConstant
3
symbol
,
symbol
-
integerConstant
2
symbol
,
symbol
-
integerConstant
1
symbol
}
identifier
NewLine
symbol
}
symbol
;
identifier
NewLine
keyword
int
identifier
tim
symbol
(
keyword
int
identifier
a
symbol
,
keyword
int
identifier
b
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
int
identifier
t
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
a
symbol
<
integerConstant
0
symbol
)
identifier
t
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
b
symbol
<
integerConstant
0
symbol
)
identifier
t
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
t
symbol
=
symbol
=
integerConstant
0
symbol
)
keyword
return
identifier
dat
symbol
[
identifier
abs
symbol
(
identifier
a
symbol
)
symbol
]
symbol
[
identifier
abs
symbol
(
identifier
b
symbol
)
symbol
]
symbol
;
identifier
NewLine
keyword
else
keyword
return
symbol
-
identifier
dat
symbol
[
identifier
abs
symbol
(
identifier
a
symbol
)
symbol
]
symbol
[
identifier
abs
symbol
(
identifier
b
symbol
)
symbol
]
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
FILE
symbol
*
identifier
fr
symbol
=
identifier
fopen
symbol
(
stringConstant
c-large.in
symbol
,
stringConstant
r
symbol
)
symbol
;
identifier
NewLine
identifier
FILE
symbol
*
identifier
fw
symbol
=
identifier
fopen
symbol
(
stringConstant
outl.txt
symbol
,
stringConstant
w
symbol
)
symbol
;
identifier
NewLine
keyword
int
identifier
data
symbol
;
identifier
NewLine
identifier
fscanf
symbol
(
identifier
fr
symbol
,
stringConstant
%d
symbol
,
symbol
&
identifier
data
symbol
)
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
p
symbol
=
integerConstant
0
symbol
;
identifier
p
symbol
<
identifier
data
symbol
;
identifier
p
symbol
+
symbol
+
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
int
identifier
num
symbol
;
identifier
NewLine
identifier
long
identifier
long
identifier
kai
symbol
;
identifier
NewLine
identifier
fscanf
symbol
(
identifier
fr
symbol
,
stringConstant
%d%lld
symbol
,
symbol
&
identifier
num
symbol
,
symbol
&
identifier
kai
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
kai
symbol
>
integerConstant
20
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
kai
symbol
=
symbol
(
identifier
kai
symbol
-
integerConstant
20
symbol
)
integerConstant
4
symbol
+
integerConstant
20
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
vector
symbol
<
keyword
int
symbol
>
identifier
vec
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
num
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
char
identifier
zan
symbol
;
identifier
NewLine
identifier
fscanf
symbol
(
identifier
fr
symbol
,
stringConstant
 %c
symbol
,
symbol
&
identifier
zan
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
zan
symbol
=
symbol
=
identifier
i
symbol
)
identifier
vec
symbol
.
identifier
push
identifier
back
symbol
(
integerConstant
2
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
zan
symbol
=
symbol
=
identifier
j
symbol
)
identifier
vec
symbol
.
identifier
push
identifier
back
symbol
(
integerConstant
3
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
zan
symbol
=
symbol
=
identifier
k
symbol
)
identifier
vec
symbol
.
identifier
push
identifier
back
symbol
(
integerConstant
4
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: 
symbol
,
identifier
p
symbol
+
integerConstant
1
symbol
)
symbol
;
identifier
NewLine
identifier
fprintf
symbol
(
identifier
fw
symbol
,
stringConstant
Case #%d: 
symbol
,
identifier
p
symbol
+
integerConstant
1
symbol
)
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
1
symbol
;
identifier
i
symbol
<
identifier
kai
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
j
symbol
=
integerConstant
0
symbol
;
identifier
j
symbol
<
identifier
num
symbol
;
identifier
j
symbol
+
symbol
+
symbol
)
identifier
vec
symbol
.
identifier
push
identifier
back
symbol
(
identifier
vec
symbol
[
identifier
j
symbol
]
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
int
identifier
st
symbol
=
integerConstant
1000000000
symbol
,
identifier
go
symbol
=
symbol
-
integerConstant
1
symbol
;
identifier
NewLine
keyword
int
identifier
now
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
vec
symbol
.
identifier
size
symbol
(
symbol
)
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
now
symbol
=
identifier
tim
symbol
(
identifier
now
symbol
,
identifier
vec
symbol
[
identifier
i
symbol
]
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
now
symbol
=
symbol
-
integerConstant
1
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
printf
symbol
(
stringConstant
NO\n
symbol
)
symbol
;
identifier
NewLine
identifier
fprintf
symbol
(
identifier
fw
symbol
,
stringConstant
NO\n
symbol
)
symbol
;
identifier
NewLine
identifier
continue
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
now
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
vec
symbol
.
identifier
size
symbol
(
symbol
)
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
now
symbol
=
identifier
tim
symbol
(
identifier
now
symbol
,
identifier
vec
symbol
[
identifier
i
symbol
]
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
now
symbol
=
symbol
=
integerConstant
2
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
st
symbol
=
identifier
i
symbol
;
identifier
NewLine
identifier
break
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
now
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
identifier
vec
symbol
.
identifier
size
symbol
(
symbol
)
symbol
-
integerConstant
1
symbol
;
identifier
i
symbol
>
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
-
symbol
-
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
now
symbol
=
identifier
tim
symbol
(
identifier
vec
symbol
[
identifier
i
symbol
]
symbol
,
identifier
now
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
now
symbol
=
symbol
=
integerConstant
4
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
go
symbol
=
identifier
i
symbol
;
identifier
NewLine
identifier
break
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
st
symbol
<
identifier
go
symbol
)
identifier
fprintf
symbol
(
identifier
fw
symbol
,
stringConstant
YES\n
symbol
)
symbol
;
identifier
NewLine
keyword
else
identifier
fprintf
symbol
(
identifier
fw
symbol
,
stringConstant
NO\n
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
st
symbol
<
identifier
go
symbol
)
identifier
printf
symbol
(
stringConstant
YES\n
symbol
)
symbol
;
identifier
NewLine
keyword
else
identifier
printf
symbol
(
stringConstant
NO\n
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
symbol
}
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/dmute.0.cpp file...

identifier
include
symbol
<
identifier
cstdio
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstring
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstdlib
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
algorithm
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
utility
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
string
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
vector
symbol
>
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
t
symbol
,
identifier
n
symbol
;
identifier
NewLine
keyword
char
identifier
str
symbol
[
integerConstant
2005
symbol
]
symbol
;
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
symbol
{
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
t
symbol
)
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
tst
symbol
=
integerConstant
1
symbol
;
identifier
tst
symbol
<
symbol
=
identifier
t
symbol
;
identifier
tst
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d %s
symbol
,
symbol
&
identifier
n
symbol
,
identifier
str
symbol
)
symbol
;
identifier
NewLine
keyword
int
identifier
sum
symbol
=
integerConstant
0
symbol
,
identifier
ans
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
symbol
=
identifier
n
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
keyword
if
symbol
(
identifier
str
symbol
[
identifier
i
symbol
]
symbol
=
integerConstant
0
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
sum
symbol
<
identifier
i
symbol
)
identifier
ans
symbol
+
symbol
=
identifier
i
symbol
-
identifier
sum
symbol
,
identifier
sum
symbol
=
identifier
i
symbol
;
identifier
NewLine
identifier
sum
symbol
+
symbol
=
identifier
str
symbol
[
identifier
i
symbol
]
symbol
-
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: %d\n
symbol
,
identifier
tst
symbol
,
identifier
ans
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
symbol
}
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/dmute.1.cpp file...

identifier
include
symbol
<
identifier
cstdio
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstring
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstdlib
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
algorithm
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
utility
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
string
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
vector
symbol
>
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
n
symbol
;
identifier
NewLine
keyword
char
identifier
str
symbol
[
integerConstant
2005
symbol
]
symbol
;
identifier
NewLine
keyword
int
identifier
p
symbol
[
integerConstant
2005
symbol
]
symbol
;
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
tst
symbol
;
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
tst
symbol
)
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
t
symbol
=
integerConstant
1
symbol
;
identifier
t
symbol
<
symbol
=
identifier
tst
symbol
;
identifier
t
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
n
symbol
)
symbol
;
identifier
NewLine
identifier
bool
identifier
nonemp
symbol
=
keyword
false
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
1
symbol
;
identifier
i
symbol
<
symbol
=
identifier
n
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
p
symbol
[
identifier
i
symbol
]
symbol
)
symbol
,
identifier
nonemp
symbol
|
symbol
=
identifier
p
symbol
[
identifier
i
symbol
]
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
keyword
int
identifier
ans
symbol
=
integerConstant
1000000005
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
nonemp
symbol
)
identifier
ans
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
keyword
else
symbol
{
identifier
NewLine
keyword
int
identifier
sum
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
left
symbol
=
integerConstant
1
symbol
;
identifier
left
symbol
<
symbol
=
integerConstant
1000
symbol
;
identifier
left
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
sum
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
1
symbol
;
identifier
i
symbol
<
symbol
=
identifier
n
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
sum
symbol
+
symbol
=
identifier
p
symbol
[
identifier
i
symbol
]
symbol
/
identifier
left
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
p
symbol
[
identifier
i
symbol
]
identifier
left
symbol
=
symbol
=
integerConstant
0
symbol
)
identifier
sum
symbol
-
symbol
-
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
sum
symbol
+
symbol
=
identifier
left
symbol
;
identifier
NewLine
identifier
ans
symbol
=
identifier
min
symbol
(
identifier
ans
symbol
,
identifier
sum
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: %d\n
symbol
,
identifier
t
symbol
,
identifier
ans
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
symbol
}
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/dmute.2.cpp file...

identifier
include
symbol
<
identifier
cstdio
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstring
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstdlib
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
algorithm
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
utility
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
string
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
vector
symbol
>
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
identifier
const
keyword
int
identifier
maxn
symbol
=
integerConstant
10005
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
n
symbol
,
identifier
mat
symbol
[
integerConstant
9
symbol
]
symbol
[
integerConstant
9
symbol
]
symbol
;
identifier
NewLine
keyword
char
identifier
str
symbol
[
identifier
maxn
symbol
*
integerConstant
18
symbol
]
symbol
;
identifier
NewLine
keyword
void
identifier
prep
symbol
(
symbol
)
symbol
{
identifier
NewLine
identifier
memset
symbol
(
identifier
mat
symbol
,
integerConstant
0
symbol
,
identifier
sizeof
identifier
mat
symbol
)
symbol
;
identifier
NewLine
identifier
mat
symbol
[
integerConstant
0
symbol
]
symbol
[
integerConstant
0
symbol
]
symbol
=
integerConstant
0
symbol
,
identifier
mat
symbol
[
integerConstant
0
symbol
]
symbol
[
integerConstant
1
symbol
]
symbol
=
integerConstant
1
symbol
,
identifier
mat
symbol
[
integerConstant
0
symbol
]
symbol
[
integerConstant
2
symbol
]
symbol
=
integerConstant
2
symbol
,
identifier
mat
symbol
[
integerConstant
0
symbol
]
symbol
[
integerConstant
3
symbol
]
symbol
=
integerConstant
3
symbol
;
identifier
NewLine
identifier
mat
symbol
[
integerConstant
1
symbol
]
symbol
[
integerConstant
0
symbol
]
symbol
=
integerConstant
1
symbol
,
identifier
mat
symbol
[
integerConstant
1
symbol
]
symbol
[
integerConstant
1
symbol
]
symbol
=
integerConstant
0
symbol
+
integerConstant
4
symbol
,
identifier
mat
symbol
[
integerConstant
1
symbol
]
symbol
[
integerConstant
2
symbol
]
symbol
=
integerConstant
3
symbol
,
identifier
mat
symbol
[
integerConstant
1
symbol
]
symbol
[
integerConstant
3
symbol
]
symbol
=
integerConstant
2
symbol
+
integerConstant
4
symbol
;
identifier
NewLine
identifier
mat
symbol
[
integerConstant
2
symbol
]
symbol
[
integerConstant
0
symbol
]
symbol
=
integerConstant
2
symbol
,
identifier
mat
symbol
[
integerConstant
2
symbol
]
symbol
[
integerConstant
1
symbol
]
symbol
=
integerConstant
3
symbol
+
integerConstant
4
symbol
,
identifier
mat
symbol
[
integerConstant
2
symbol
]
symbol
[
integerConstant
2
symbol
]
symbol
=
integerConstant
0
symbol
+
integerConstant
4
symbol
,
identifier
mat
symbol
[
integerConstant
2
symbol
]
symbol
[
integerConstant
3
symbol
]
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
identifier
mat
symbol
[
integerConstant
3
symbol
]
symbol
[
integerConstant
0
symbol
]
symbol
=
integerConstant
3
symbol
,
identifier
mat
symbol
[
integerConstant
3
symbol
]
symbol
[
integerConstant
1
symbol
]
symbol
=
integerConstant
2
symbol
,
identifier
mat
symbol
[
integerConstant
3
symbol
]
symbol
[
integerConstant
2
symbol
]
symbol
=
integerConstant
1
symbol
+
integerConstant
4
symbol
,
identifier
mat
symbol
[
integerConstant
3
symbol
]
symbol
[
integerConstant
3
symbol
]
symbol
=
integerConstant
0
symbol
+
integerConstant
4
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
integerConstant
8
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
j
symbol
=
integerConstant
0
symbol
;
identifier
j
symbol
<
integerConstant
8
symbol
;
identifier
j
symbol
+
symbol
+
symbol
)
identifier
NewLine
keyword
if
symbol
(
identifier
i
symbol
>
symbol
=
integerConstant
4
symbol
|
symbol
|
identifier
j
symbol
>
symbol
=
integerConstant
4
symbol
)
symbol
{
identifier
NewLine
identifier
mat
symbol
[
identifier
i
symbol
]
symbol
[
identifier
j
symbol
]
symbol
=
identifier
mat
symbol
[
identifier
i
integerConstant
4
symbol
]
symbol
[
identifier
j
integerConstant
4
symbol
]
symbol
;
identifier
NewLine
keyword
if
symbol
(
symbol
(
identifier
i
symbol
>
symbol
=
integerConstant
4
symbol
)
symbol
(
identifier
j
symbol
>
symbol
=
integerConstant
4
symbol
)
symbol
)
identifier
mat
symbol
[
identifier
i
symbol
]
symbol
[
identifier
j
symbol
]
symbol
=
integerConstant
4
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
int
identifier
num
symbol
(
keyword
char
identifier
c
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
c
symbol
=
symbol
=
integerConstant
1
symbol
)
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
c
symbol
=
symbol
=
identifier
i
symbol
)
keyword
return
integerConstant
1
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
c
symbol
=
symbol
=
identifier
j
symbol
)
keyword
return
integerConstant
2
symbol
;
identifier
NewLine
keyword
return
integerConstant
3
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
int
identifier
go
symbol
(
keyword
int
identifier
st
symbol
,
keyword
int
identifier
goal
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
cur
symbol
=
integerConstant
0
symbol
,
identifier
i
symbol
=
identifier
st
symbol
;
identifier
NewLine
identifier
for
symbol
(
identifier
i
symbol
=
identifier
st
symbol
;
identifier
i
symbol
<
identifier
n
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
cur
symbol
=
identifier
mat
symbol
[
identifier
cur
symbol
]
symbol
[
identifier
num
symbol
(
identifier
str
symbol
[
identifier
i
symbol
]
symbol
)
symbol
]
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
cur
symbol
=
symbol
=
identifier
goal
symbol
)
keyword
return
identifier
i
symbol
+
integerConstant
1
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
symbol
-
integerConstant
1
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
int
identifier
calc
symbol
(
keyword
int
identifier
l
symbol
,
keyword
int
identifier
r
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
cur
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
identifier
l
symbol
;
identifier
i
symbol
<
identifier
r
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
cur
symbol
=
identifier
mat
symbol
[
identifier
cur
symbol
]
symbol
[
identifier
num
symbol
(
identifier
str
symbol
[
identifier
i
symbol
]
symbol
)
symbol
]
symbol
;
identifier
NewLine
keyword
return
identifier
cur
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
long
identifier
long
identifier
cnt
symbol
;
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
tst
symbol
;
identifier
NewLine
identifier
prep
symbol
(
symbol
)
symbol
;
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
tst
symbol
)
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
t
symbol
=
integerConstant
1
symbol
;
identifier
t
symbol
<
symbol
=
identifier
tst
symbol
;
identifier
t
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d%lld
symbol
,
symbol
&
identifier
n
symbol
,
symbol
&
identifier
cnt
symbol
)
symbol
;
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%s
symbol
,
identifier
str
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
len
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
for
symbol
(
identifier
len
symbol
=
integerConstant
12
symbol
;
symbol
;
identifier
len
symbol
+
symbol
+
symbol
)
identifier
NewLine
keyword
if
symbol
(
identifier
len
integerConstant
4
symbol
=
symbol
=
identifier
cnt
integerConstant
4
symbol
)
identifier
break
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
cnt
symbol
<
identifier
len
symbol
)
identifier
len
symbol
=
symbol
(
keyword
int
symbol
)
identifier
cnt
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
1
symbol
;
identifier
i
symbol
<
symbol
=
identifier
len
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
j
symbol
=
integerConstant
0
symbol
;
identifier
j
symbol
<
identifier
n
symbol
;
identifier
j
symbol
+
symbol
+
symbol
)
identifier
str
symbol
[
identifier
j
symbol
+
identifier
i
symbol
*
identifier
n
symbol
]
symbol
=
identifier
str
symbol
[
identifier
j
symbol
]
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
n
symbol
=
identifier
len
symbol
*
identifier
n
symbol
;
identifier
NewLine
keyword
int
identifier
md1
symbol
=
identifier
go
symbol
(
integerConstant
0
symbol
,
integerConstant
1
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
md1
symbol
=
symbol
=
symbol
-
integerConstant
1
symbol
|
symbol
|
identifier
md1
symbol
=
symbol
=
identifier
n
symbol
)
symbol
{
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: NO\n
symbol
,
identifier
t
symbol
)
symbol
;
identifier
NewLine
identifier
continue
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
int
identifier
md2
symbol
=
identifier
go
symbol
(
identifier
md1
symbol
,
integerConstant
2
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
md2
symbol
=
symbol
=
symbol
-
integerConstant
1
symbol
|
symbol
|
identifier
md2
symbol
=
symbol
=
identifier
n
symbol
)
symbol
{
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: NO\n
symbol
,
identifier
t
symbol
)
symbol
;
identifier
NewLine
identifier
continue
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
calc
symbol
(
identifier
md2
symbol
,
identifier
n
symbol
)
symbol
=
symbol
=
integerConstant
3
symbol
)
symbol
{
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: YES\n
symbol
,
identifier
t
symbol
)
symbol
;
identifier
NewLine
symbol
}
keyword
else
identifier
printf
symbol
(
stringConstant
Case #%d: NO\n
symbol
,
identifier
t
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
symbol
}
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/fagu.0.cpp file...

identifier
include
symbol
<
identifier
stdio
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
algorithm
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
vector
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
queue
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
deque
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
stack
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
set
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
map
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
string
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
assert
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
math
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
string
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
keyword
int
symbol
>
identifier
VI
symbol
;
identifier
NewLine
identifier
typedef
identifier
pair
symbol
<
keyword
int
symbol
,
keyword
int
symbol
>
identifier
PII
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
identifier
PII
symbol
>
identifier
VPII
symbol
;
identifier
NewLine
identifier
typedef
identifier
long
identifier
long
identifier
ll
symbol
;
identifier
NewLine
identifier
define
identifier
FOREACH
symbol
(
identifier
it
symbol
,
identifier
vec
symbol
)
identifier
for
symbol
(
identifier
typeof
symbol
(
symbol
(
identifier
vec
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
)
identifier
it
symbol
=
symbol
(
identifier
vec
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
;
identifier
it
symbol
=
symbol
(
identifier
vec
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
symbol
;
identifier
it
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
define
identifier
MODD
symbol
(
identifier
a
symbol
,
identifier
b
symbol
)
symbol
(
symbol
(
symbol
(
identifier
a
symbol
)
symbol
(
identifier
b
symbol
)
symbol
+
symbol
(
identifier
b
symbol
)
symbol
)
symbol
(
identifier
b
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
REP
symbol
(
identifier
i
symbol
,
identifier
a
symbol
,
identifier
n
symbol
)
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
symbol
(
identifier
a
symbol
)
symbol
;
identifier
i
symbol
<
symbol
(
identifier
n
symbol
)
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
NewLine
keyword
int
identifier
T
symbol
;
identifier
NewLine
keyword
int
identifier
Smax
symbol
;
identifier
NewLine
keyword
char
identifier
line
symbol
[
integerConstant
10000
symbol
]
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
symbol
{
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d 
symbol
,
symbol
&
identifier
T
symbol
)
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
test
symbol
=
integerConstant
0
symbol
;
identifier
test
symbol
<
identifier
T
symbol
;
identifier
test
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
fprintf
symbol
(
identifier
stderr
symbol
,
stringConstant
Test %d/%d\n
symbol
,
identifier
test
symbol
+
integerConstant
1
symbol
,
identifier
T
symbol
)
symbol
;
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: 
symbol
,
identifier
test
symbol
+
integerConstant
1
symbol
)
symbol
;
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d %s 
symbol
,
symbol
&
identifier
Smax
symbol
,
identifier
line
symbol
)
symbol
;
identifier
NewLine
keyword
int
identifier
res
symbol
=
integerConstant
0
symbol
,
identifier
su
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
REP
symbol
(
identifier
i
symbol
,
integerConstant
0
symbol
,
identifier
Smax
symbol
+
integerConstant
1
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
v
symbol
=
identifier
line
symbol
[
identifier
i
symbol
]
symbol
-
integerConstant
0
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
v
symbol
)
identifier
NewLine
identifier
res
symbol
=
identifier
max
symbol
(
identifier
res
symbol
,
identifier
i
symbol
-
identifier
su
symbol
)
symbol
;
identifier
NewLine
identifier
su
symbol
+
symbol
=
identifier
v
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
printf
symbol
(
stringConstant
%d\n
symbol
,
identifier
res
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/fagu.1.cpp file...

identifier
include
symbol
<
identifier
stdio
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
algorithm
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
vector
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
queue
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
deque
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
stack
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
set
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
map
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
string
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
assert
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
math
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
string
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
keyword
int
symbol
>
identifier
VI
symbol
;
identifier
NewLine
identifier
typedef
identifier
pair
symbol
<
keyword
int
symbol
,
keyword
int
symbol
>
identifier
PII
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
identifier
PII
symbol
>
identifier
VPII
symbol
;
identifier
NewLine
identifier
typedef
identifier
long
identifier
long
identifier
ll
symbol
;
identifier
NewLine
identifier
define
identifier
FOREACH
symbol
(
identifier
it
symbol
,
identifier
vec
symbol
)
identifier
for
symbol
(
identifier
typeof
symbol
(
symbol
(
identifier
vec
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
)
identifier
it
symbol
=
symbol
(
identifier
vec
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
;
identifier
it
symbol
=
symbol
(
identifier
vec
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
symbol
;
identifier
it
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
define
identifier
MODD
symbol
(
identifier
a
symbol
,
identifier
b
symbol
)
symbol
(
symbol
(
symbol
(
identifier
a
symbol
)
symbol
(
identifier
b
symbol
)
symbol
+
symbol
(
identifier
b
symbol
)
symbol
)
symbol
(
identifier
b
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
REP
symbol
(
identifier
i
symbol
,
identifier
a
symbol
,
identifier
n
symbol
)
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
symbol
(
identifier
a
symbol
)
symbol
;
identifier
i
symbol
<
symbol
(
identifier
n
symbol
)
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
NewLine
keyword
int
identifier
T
symbol
;
identifier
NewLine
keyword
int
identifier
D
symbol
;
identifier
NewLine
keyword
int
identifier
p
symbol
[
integerConstant
2000
symbol
]
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
symbol
{
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d 
symbol
,
symbol
&
identifier
T
symbol
)
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
test
symbol
=
integerConstant
0
symbol
;
identifier
test
symbol
<
identifier
T
symbol
;
identifier
test
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
fprintf
symbol
(
identifier
stderr
symbol
,
stringConstant
Test %d/%d\n
symbol
,
identifier
test
symbol
+
integerConstant
1
symbol
,
identifier
T
symbol
)
symbol
;
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: 
symbol
,
identifier
test
symbol
+
integerConstant
1
symbol
)
symbol
;
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
D
symbol
)
symbol
;
identifier
NewLine
identifier
REP
symbol
(
identifier
i
symbol
,
integerConstant
0
symbol
,
identifier
D
symbol
)
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
identifier
p
symbol
+
identifier
i
symbol
)
symbol
;
identifier
NewLine
keyword
int
identifier
res
symbol
=
integerConstant
10000
symbol
;
identifier
NewLine
identifier
REP
symbol
(
identifier
t
symbol
,
integerConstant
1
symbol
,
integerConstant
2000
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
h
symbol
=
identifier
t
symbol
;
identifier
NewLine
identifier
REP
symbol
(
identifier
i
symbol
,
integerConstant
0
symbol
,
identifier
D
symbol
)
identifier
NewLine
identifier
h
symbol
+
symbol
=
symbol
(
identifier
p
symbol
[
identifier
i
symbol
]
symbol
-
integerConstant
1
symbol
)
symbol
/
identifier
t
symbol
;
identifier
NewLine
identifier
res
symbol
=
identifier
min
symbol
(
identifier
res
symbol
,
identifier
h
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
printf
symbol
(
stringConstant
%d\n
symbol
,
identifier
res
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/fagu.2.cpp file...

identifier
include
symbol
<
identifier
stdio
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
algorithm
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
vector
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
queue
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
deque
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
stack
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
set
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
map
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
string
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
assert
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
math
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
string
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
keyword
int
symbol
>
identifier
VI
symbol
;
identifier
NewLine
identifier
typedef
identifier
pair
symbol
<
keyword
int
symbol
,
keyword
int
symbol
>
identifier
PII
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
identifier
PII
symbol
>
identifier
VPII
symbol
;
identifier
NewLine
identifier
typedef
identifier
long
identifier
long
identifier
ll
symbol
;
identifier
NewLine
identifier
define
identifier
FOREACH
symbol
(
identifier
it
symbol
,
identifier
vec
symbol
)
identifier
for
symbol
(
identifier
typeof
symbol
(
symbol
(
identifier
vec
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
)
identifier
it
symbol
=
symbol
(
identifier
vec
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
;
identifier
it
symbol
=
symbol
(
identifier
vec
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
symbol
;
identifier
it
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
define
identifier
MODD
symbol
(
identifier
a
symbol
,
identifier
b
symbol
)
symbol
(
symbol
(
symbol
(
identifier
a
symbol
)
symbol
(
identifier
b
symbol
)
symbol
+
symbol
(
identifier
b
symbol
)
symbol
)
symbol
(
identifier
b
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
REP
symbol
(
identifier
i
symbol
,
identifier
a
symbol
,
identifier
n
symbol
)
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
symbol
(
identifier
a
symbol
)
symbol
;
identifier
i
symbol
<
symbol
(
identifier
n
symbol
)
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
NewLine
keyword
int
identifier
T
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
milt
symbol
[
symbol
]
symbol
[
integerConstant
4
symbol
]
symbol
=
symbol
{
symbol
{
integerConstant
0
symbol
,
integerConstant
1
symbol
,
integerConstant
2
symbol
,
integerConstant
3
symbol
}
symbol
,
symbol
{
integerConstant
1
symbol
,
integerConstant
0
symbol
,
integerConstant
3
symbol
,
integerConstant
2
symbol
}
symbol
,
symbol
{
integerConstant
2
symbol
,
integerConstant
3
symbol
,
integerConstant
0
symbol
,
integerConstant
1
symbol
}
symbol
,
symbol
{
integerConstant
3
symbol
,
integerConstant
2
symbol
,
integerConstant
1
symbol
,
integerConstant
0
symbol
}
symbol
}
symbol
;
identifier
NewLine
keyword
int
identifier
misg
symbol
[
symbol
]
symbol
[
integerConstant
4
symbol
]
symbol
=
symbol
{
symbol
{
integerConstant
0
symbol
,
integerConstant
0
symbol
,
integerConstant
0
symbol
,
integerConstant
0
symbol
}
symbol
,
symbol
{
integerConstant
0
symbol
,
integerConstant
1
symbol
,
integerConstant
0
symbol
,
integerConstant
1
symbol
}
symbol
,
symbol
{
integerConstant
0
symbol
,
integerConstant
1
symbol
,
integerConstant
1
symbol
,
integerConstant
0
symbol
}
symbol
,
symbol
{
integerConstant
0
symbol
,
integerConstant
0
symbol
,
integerConstant
1
symbol
,
integerConstant
1
symbol
}
symbol
}
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
mult
symbol
(
keyword
int
identifier
a
symbol
,
keyword
int
identifier
b
symbol
)
symbol
{
keyword
return
identifier
milt
symbol
[
identifier
a
integerConstant
4
symbol
]
symbol
[
identifier
b
symbol
]
symbol
+
integerConstant
4
symbol
*
symbol
(
symbol
(
identifier
a
symbol
/
integerConstant
4
symbol
+
identifier
misg
symbol
[
identifier
a
integerConstant
4
symbol
]
symbol
[
identifier
b
symbol
]
symbol
)
integerConstant
2
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
int
identifier
L
symbol
;
identifier
NewLine
identifier
ll
identifier
X
symbol
;
identifier
NewLine
keyword
char
identifier
line
symbol
[
integerConstant
20000
symbol
]
symbol
;
identifier
NewLine
identifier
bool
identifier
dp
symbol
[
integerConstant
30
symbol
*
integerConstant
20000
symbol
]
symbol
[
integerConstant
4
symbol
]
symbol
[
integerConstant
8
symbol
]
symbol
;
identifier
NewLine
identifier
NewLine
keyword
void
identifier
se
symbol
(
keyword
int
identifier
i
symbol
,
keyword
int
identifier
w
symbol
,
keyword
int
identifier
l
symbol
)
symbol
{
identifier
NewLine
identifier
dp
symbol
[
identifier
i
symbol
]
symbol
[
identifier
w
symbol
]
symbol
[
identifier
l
symbol
]
symbol
=
keyword
true
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
l
symbol
=
symbol
=
identifier
w
symbol
+
integerConstant
1
symbol
)
identifier
NewLine
identifier
dp
symbol
[
identifier
i
symbol
]
symbol
[
identifier
w
symbol
+
integerConstant
1
symbol
]
symbol
[
integerConstant
0
symbol
]
symbol
=
keyword
true
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
symbol
{
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d 
symbol
,
symbol
&
identifier
T
symbol
)
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
test
symbol
=
integerConstant
0
symbol
;
identifier
test
symbol
<
identifier
T
symbol
;
identifier
test
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
fprintf
symbol
(
identifier
stderr
symbol
,
stringConstant
Test %d/%d\n
symbol
,
identifier
test
symbol
+
integerConstant
1
symbol
,
identifier
T
symbol
)
symbol
;
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: 
symbol
,
identifier
test
symbol
+
integerConstant
1
symbol
)
symbol
;
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d %lld %s 
symbol
,
symbol
&
identifier
L
symbol
,
symbol
&
identifier
X
symbol
,
identifier
line
symbol
)
symbol
;
identifier
NewLine
identifier
X
symbol
=
identifier
min
symbol
(
identifier
X
symbol
,
integerConstant
16
symbol
+
identifier
X
integerConstant
4
symbol
)
symbol
;
identifier
NewLine
identifier
fprintf
symbol
(
identifier
stderr
symbol
,
stringConstant
%d %lld\n
symbol
,
identifier
L
symbol
,
identifier
X
symbol
)
symbol
;
identifier
NewLine
identifier
REP
symbol
(
identifier
i
symbol
,
integerConstant
0
symbol
,
identifier
L
symbol
*
identifier
X
symbol
+
integerConstant
1
symbol
)
identifier
REP
symbol
(
identifier
w
symbol
,
integerConstant
0
symbol
,
integerConstant
4
symbol
)
identifier
REP
symbol
(
identifier
l
symbol
,
integerConstant
0
symbol
,
integerConstant
8
symbol
)
identifier
NewLine
identifier
dp
symbol
[
identifier
i
symbol
]
symbol
[
identifier
w
symbol
]
symbol
[
identifier
l
symbol
]
symbol
=
keyword
false
symbol
;
identifier
NewLine
identifier
dp
symbol
[
integerConstant
0
symbol
]
symbol
[
integerConstant
0
symbol
]
symbol
[
integerConstant
0
symbol
]
symbol
=
keyword
true
symbol
;
identifier
NewLine
identifier
REP
symbol
(
identifier
i
symbol
,
integerConstant
0
symbol
,
identifier
L
symbol
*
identifier
X
symbol
)
symbol
{
identifier
NewLine
identifier
REP
symbol
(
identifier
w
symbol
,
integerConstant
0
symbol
,
integerConstant
3
symbol
)
identifier
REP
symbol
(
identifier
l
symbol
,
integerConstant
0
symbol
,
integerConstant
8
symbol
)
identifier
NewLine
keyword
if
symbol
(
identifier
dp
symbol
[
identifier
i
symbol
]
symbol
[
identifier
w
symbol
]
symbol
[
identifier
l
symbol
]
symbol
)
identifier
NewLine
identifier
se
symbol
(
identifier
i
symbol
+
integerConstant
1
symbol
,
identifier
w
symbol
,
identifier
mult
symbol
(
identifier
l
symbol
,
identifier
line
symbol
[
identifier
i
identifier
L
symbol
]
symbol
-
identifier
i
symbol
+
integerConstant
1
symbol
)
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
dp
symbol
[
identifier
L
symbol
*
identifier
X
symbol
]
symbol
[
integerConstant
3
symbol
]
symbol
[
integerConstant
0
symbol
]
symbol
)
identifier
NewLine
identifier
printf
symbol
(
stringConstant
YES\n
symbol
)
symbol
;
identifier
NewLine
keyword
else
identifier
NewLine
identifier
printf
symbol
(
stringConstant
NO\n
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/FatalEagle.0.cpp file...

identifier
include
symbol
<
identifier
bits
symbol
/
identifier
stdc
symbol
+
symbol
+
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
N
symbol
;
identifier
NewLine
keyword
char
identifier
S
symbol
[
integerConstant
10001
symbol
]
symbol
;
identifier
NewLine
identifier
NewLine
keyword
void
identifier
main
symbol
(
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
N
symbol
)
symbol
;
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%s
symbol
,
identifier
S
symbol
)
symbol
;
identifier
NewLine
keyword
int
identifier
clap
symbol
=
integerConstant
0
symbol
,
identifier
ans
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
symbol
=
identifier
N
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
clap
symbol
>
symbol
=
identifier
i
symbol
)
identifier
NewLine
identifier
clap
symbol
+
symbol
=
identifier
S
symbol
[
identifier
i
symbol
]
symbol
-
integerConstant
0
symbol
;
identifier
NewLine
keyword
else
identifier
NewLine
symbol
{
identifier
NewLine
identifier
ans
symbol
+
symbol
=
identifier
i
symbol
-
identifier
clap
symbol
;
identifier
NewLine
identifier
clap
symbol
+
symbol
=
identifier
S
symbol
[
identifier
i
symbol
]
symbol
-
integerConstant
0
symbol
+
identifier
i
symbol
-
identifier
clap
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
printf
symbol
(
stringConstant
%d\n
symbol
,
identifier
ans
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
freopen
symbol
(
stringConstant
A-large.in
symbol
,
stringConstant
r
symbol
,
identifier
stdin
symbol
)
symbol
;
identifier
NewLine
identifier
freopen
symbol
(
stringConstant
A-large.out
symbol
,
stringConstant
w
symbol
,
identifier
stdout
symbol
)
symbol
;
identifier
NewLine
keyword
int
identifier
T
symbol
;
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
T
symbol
)
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
1
symbol
;
identifier
i
symbol
<
symbol
=
identifier
T
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: 
symbol
,
identifier
i
symbol
)
symbol
;
identifier
NewLine
identifier
main
symbol
(
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/FatalEagle.1.cpp file...

identifier
include
symbol
<
identifier
bits
symbol
/
identifier
stdc
symbol
+
symbol
+
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
N
symbol
;
identifier
NewLine
keyword
int
identifier
A
symbol
[
integerConstant
10001
symbol
]
symbol
;
identifier
NewLine
identifier
NewLine
keyword
void
identifier
main
symbol
(
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
N
symbol
)
symbol
;
identifier
NewLine
keyword
int
identifier
mx
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
N
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
identifier
A
symbol
+
identifier
i
symbol
)
symbol
,
identifier
mx
symbol
=
identifier
max
symbol
(
identifier
mx
symbol
,
identifier
A
symbol
[
identifier
i
symbol
]
symbol
)
symbol
;
identifier
NewLine
keyword
int
identifier
ans
symbol
=
integerConstant
0
identifier
x3f3f3f3f
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
1
symbol
;
identifier
i
symbol
<
symbol
=
identifier
mx
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
j
symbol
=
integerConstant
1
symbol
;
identifier
j
symbol
<
symbol
=
identifier
i
symbol
;
identifier
j
symbol
+
symbol
+
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
int
identifier
tmp
symbol
=
identifier
j
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
k
symbol
=
integerConstant
0
symbol
;
identifier
k
symbol
<
identifier
N
symbol
;
identifier
k
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
tmp
symbol
+
symbol
=
symbol
(
identifier
A
symbol
[
identifier
k
symbol
]
symbol
+
identifier
j
symbol
-
integerConstant
1
symbol
)
symbol
/
identifier
j
symbol
-
integerConstant
1
symbol
;
identifier
NewLine
identifier
ans
symbol
=
identifier
min
symbol
(
identifier
ans
symbol
,
identifier
tmp
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
printf
symbol
(
stringConstant
%d\n
symbol
,
identifier
ans
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
freopen
symbol
(
stringConstant
B-large.in
symbol
,
stringConstant
r
symbol
,
identifier
stdin
symbol
)
symbol
;
identifier
NewLine
identifier
freopen
symbol
(
stringConstant
B-large.out
symbol
,
stringConstant
w
symbol
,
identifier
stdout
symbol
)
symbol
;
identifier
NewLine
keyword
int
identifier
T
symbol
;
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
T
symbol
)
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
1
symbol
;
identifier
i
symbol
<
symbol
=
identifier
T
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: 
symbol
,
identifier
i
symbol
)
symbol
;
identifier
NewLine
identifier
main
symbol
(
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/FatalEagle.2.cpp file...

identifier
include
symbol
<
identifier
bits
symbol
/
identifier
stdc
symbol
+
symbol
+
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
identifier
const
keyword
int
identifier
ONE
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
identifier
const
keyword
int
identifier
I
symbol
=
integerConstant
2
symbol
;
identifier
NewLine
identifier
const
keyword
int
identifier
J
symbol
=
integerConstant
3
symbol
;
identifier
NewLine
identifier
const
keyword
int
identifier
K
symbol
=
integerConstant
4
symbol
;
identifier
NewLine
keyword
int
identifier
mul
symbol
[
integerConstant
5
symbol
]
symbol
[
integerConstant
5
symbol
]
symbol
;
identifier
NewLine
keyword
int
identifier
inv
symbol
[
integerConstant
5
symbol
]
symbol
[
integerConstant
5
symbol
]
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
N
symbol
;
identifier
NewLine
identifier
long
identifier
long
identifier
M
symbol
;
identifier
NewLine
keyword
char
identifier
S
symbol
[
integerConstant
10000001
symbol
]
symbol
;
identifier
NewLine
keyword
int
identifier
A
symbol
[
integerConstant
10000001
symbol
]
symbol
;
identifier
NewLine
keyword
int
identifier
B
symbol
[
integerConstant
10000001
symbol
]
symbol
;
identifier
NewLine
identifier
set
symbol
<
identifier
pair
symbol
<
keyword
int
symbol
,
keyword
int
symbol
>
symbol
>
identifier
dp
symbol
,
identifier
ndp
symbol
;
identifier
NewLine
identifier
bool
identifier
possible
symbol
[
integerConstant
4
symbol
]
symbol
[
integerConstant
10
symbol
]
symbol
[
integerConstant
10
symbol
]
symbol
[
integerConstant
10
symbol
]
symbol
[
integerConstant
10
symbol
]
symbol
[
integerConstant
10
symbol
]
symbol
;
identifier
NewLine
identifier
NewLine
identifier
inline
keyword
int
identifier
sgn
symbol
(
keyword
int
identifier
x
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
x
symbol
<
integerConstant
0
symbol
)
identifier
NewLine
keyword
return
symbol
-
integerConstant
1
symbol
;
identifier
NewLine
keyword
return
integerConstant
1
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
inline
keyword
int
identifier
multiply
symbol
(
keyword
int
identifier
a
symbol
,
keyword
int
identifier
b
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
return
identifier
sgn
symbol
(
identifier
a
symbol
)
symbol
*
identifier
sgn
symbol
(
identifier
b
symbol
)
symbol
*
identifier
mul
symbol
[
identifier
abs
symbol
(
identifier
a
symbol
)
symbol
]
symbol
[
identifier
abs
symbol
(
identifier
b
symbol
)
symbol
]
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
inline
keyword
int
identifier
powquat
symbol
(
keyword
int
identifier
a
symbol
,
identifier
long
identifier
long
identifier
b
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
int
identifier
ret
symbol
=
identifier
ONE
symbol
;
identifier
NewLine
keyword
while
symbol
(
identifier
b
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
b
symbol
&
integerConstant
1
symbol
)
identifier
NewLine
identifier
ret
symbol
=
identifier
multiply
symbol
(
identifier
ret
symbol
,
identifier
a
symbol
)
symbol
;
identifier
NewLine
identifier
a
symbol
=
identifier
multiply
symbol
(
identifier
a
symbol
,
identifier
a
symbol
)
symbol
;
identifier
NewLine
identifier
b
symbol
/
symbol
=
integerConstant
2
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
identifier
ret
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
inline
keyword
int
identifier
getinv
symbol
(
keyword
int
identifier
y
symbol
,
keyword
int
identifier
x
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
return
symbol
(
identifier
sgn
symbol
(
identifier
y
symbol
)
symbol
/
identifier
sgn
symbol
(
identifier
x
symbol
)
symbol
)
symbol
*
identifier
inv
symbol
[
identifier
abs
symbol
(
identifier
y
symbol
)
symbol
]
symbol
[
identifier
abs
symbol
(
identifier
x
symbol
)
symbol
]
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
inline
keyword
int
identifier
get
symbol
(
keyword
int
identifier
l
symbol
,
keyword
int
identifier
r
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
l
symbol
>
identifier
r
symbol
)
identifier
NewLine
keyword
return
identifier
ONE
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
l
symbol
=
symbol
=
integerConstant
0
symbol
)
identifier
NewLine
keyword
return
identifier
A
symbol
[
identifier
r
symbol
]
symbol
;
identifier
NewLine
keyword
return
identifier
getinv
symbol
(
identifier
A
symbol
[
identifier
r
symbol
]
symbol
,
identifier
A
symbol
[
identifier
l
symbol
-
integerConstant
1
symbol
]
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
bool
identifier
brute
symbol
(
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
1
symbol
;
identifier
i
symbol
<
identifier
M
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
j
symbol
=
integerConstant
0
symbol
;
identifier
j
symbol
<
identifier
N
symbol
;
identifier
j
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
A
symbol
[
identifier
j
symbol
+
identifier
i
symbol
*
identifier
N
symbol
]
symbol
=
identifier
A
symbol
[
identifier
j
symbol
]
symbol
;
identifier
NewLine
identifier
N
symbol
*
symbol
=
identifier
M
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
N
symbol
<
integerConstant
3
symbol
)
identifier
NewLine
keyword
return
keyword
false
symbol
;
identifier
NewLine
identifier
dp
symbol
.
identifier
clear
symbol
(
symbol
)
symbol
;
identifier
NewLine
identifier
ndp
symbol
.
identifier
clear
symbol
(
symbol
)
symbol
;
identifier
NewLine
identifier
ndp
symbol
.
identifier
insert
symbol
(
symbol
{
identifier
A
symbol
[
integerConstant
0
symbol
]
symbol
,
identifier
A
symbol
[
integerConstant
1
symbol
]
symbol
}
symbol
)
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
1
symbol
;
identifier
i
symbol
<
identifier
N
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
A
symbol
[
identifier
i
symbol
]
symbol
=
identifier
multiply
symbol
(
identifier
A
symbol
[
identifier
i
symbol
-
integerConstant
1
symbol
]
symbol
,
identifier
A
symbol
[
identifier
i
symbol
]
symbol
)
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
2
symbol
;
identifier
i
symbol
<
identifier
N
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
ndp
symbol
.
identifier
count
symbol
(
symbol
{
identifier
I
symbol
,
identifier
J
symbol
}
symbol
)
symbol
&
symbol
&
identifier
get
symbol
(
identifier
i
symbol
,
identifier
N
symbol
-
integerConstant
1
symbol
)
symbol
=
symbol
=
identifier
K
symbol
)
identifier
NewLine
keyword
return
keyword
true
symbol
;
identifier
NewLine
identifier
dp
symbol
.
identifier
insert
symbol
(
symbol
{
identifier
get
symbol
(
integerConstant
0
symbol
,
identifier
i
symbol
-
integerConstant
1
symbol
)
symbol
,
identifier
get
symbol
(
identifier
i
symbol
,
identifier
i
symbol
)
symbol
}
symbol
)
symbol
;
identifier
NewLine
identifier
for
symbol
(
identifier
auto
symbol
&
identifier
it
identifier
ndp
symbol
)
identifier
NewLine
identifier
dp
symbol
.
identifier
insert
symbol
(
symbol
{
identifier
it
symbol
.
identifier
first
symbol
,
identifier
multiply
symbol
(
identifier
it
symbol
.
identifier
second
symbol
,
identifier
get
symbol
(
identifier
i
symbol
,
identifier
i
symbol
)
symbol
)
symbol
}
symbol
)
symbol
;
identifier
NewLine
identifier
dp
symbol
.
identifier
swap
symbol
(
identifier
ndp
symbol
)
symbol
;
identifier
NewLine
identifier
dp
symbol
.
identifier
clear
symbol
(
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
keyword
false
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
bool
identifier
solve
symbol
(
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
N
symbol
*
identifier
M
symbol
<
integerConstant
3
symbol
)
identifier
NewLine
keyword
return
keyword
false
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
1
symbol
;
identifier
i
symbol
<
identifier
N
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
A
symbol
[
identifier
i
symbol
]
symbol
=
identifier
multiply
symbol
(
identifier
A
symbol
[
identifier
i
symbol
-
integerConstant
1
symbol
]
symbol
,
identifier
A
symbol
[
identifier
i
symbol
]
symbol
)
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
N
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
B
symbol
[
identifier
i
symbol
]
symbol
=
identifier
get
symbol
(
identifier
i
symbol
,
identifier
N
symbol
-
integerConstant
1
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
const
keyword
int
identifier
X
symbol
=
identifier
A
symbol
[
identifier
N
symbol
-
integerConstant
1
symbol
]
symbol
;
identifier
NewLine
keyword
int
identifier
target
symbol
=
symbol
(
identifier
M
symbol
-
integerConstant
2
symbol
)
integerConstant
4
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
l
symbol
=
integerConstant
0
symbol
;
identifier
l
symbol
<
identifier
N
symbol
;
identifier
l
symbol
+
symbol
+
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
const
keyword
int
identifier
a
symbol
=
identifier
A
symbol
[
identifier
l
symbol
]
symbol
;
identifier
NewLine
identifier
const
keyword
int
identifier
b
symbol
=
symbol
(
identifier
l
symbol
=
symbol
=
identifier
N
symbol
-
integerConstant
1
symbol
)
identifier
ONE
identifier
B
symbol
[
identifier
l
symbol
+
integerConstant
1
symbol
]
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
r
symbol
=
integerConstant
0
symbol
;
identifier
r
symbol
<
identifier
N
symbol
;
identifier
r
symbol
+
symbol
+
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
const
keyword
int
identifier
c
symbol
=
identifier
r
identifier
A
symbol
[
identifier
r
symbol
-
integerConstant
1
symbol
]
identifier
ONE
symbol
;
identifier
NewLine
identifier
const
keyword
int
identifier
d
symbol
=
identifier
B
symbol
[
identifier
r
symbol
]
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
possible
symbol
[
identifier
target
symbol
]
symbol
[
identifier
X
symbol
+
integerConstant
4
symbol
]
symbol
[
identifier
a
symbol
+
integerConstant
4
symbol
]
symbol
[
identifier
b
symbol
+
integerConstant
4
symbol
]
symbol
[
identifier
c
symbol
+
integerConstant
4
symbol
]
symbol
[
identifier
d
symbol
+
integerConstant
4
symbol
]
symbol
)
identifier
NewLine
keyword
return
keyword
true
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
keyword
false
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
void
identifier
main
symbol
(
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
if
integerConstant
0
identifier
NewLine
identifier
N
symbol
=
integerConstant
10000
symbol
;
identifier
NewLine
identifier
M
symbol
=
integerConstant
1000000000000
identifier
LL
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
N
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
S
symbol
[
identifier
i
symbol
]
symbol
=
identifier
i
symbol
+
symbol
(
identifier
i
integerConstant
3
symbol
)
symbol
;
identifier
NewLine
keyword
else
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d%lld%s
symbol
,
symbol
&
identifier
N
symbol
,
symbol
&
identifier
M
symbol
,
identifier
S
symbol
)
symbol
;
identifier
NewLine
identifier
endif
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
N
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
S
symbol
[
identifier
i
symbol
]
symbol
=
symbol
=
identifier
i
symbol
)
identifier
NewLine
identifier
A
symbol
[
identifier
i
symbol
]
symbol
=
identifier
I
symbol
;
identifier
NewLine
keyword
else
keyword
if
symbol
(
identifier
S
symbol
[
identifier
i
symbol
]
symbol
=
symbol
=
identifier
j
symbol
)
identifier
NewLine
identifier
A
symbol
[
identifier
i
symbol
]
symbol
=
identifier
J
symbol
;
identifier
NewLine
keyword
else
keyword
if
symbol
(
identifier
S
symbol
[
identifier
i
symbol
]
symbol
=
symbol
=
identifier
k
symbol
)
identifier
NewLine
identifier
A
symbol
[
identifier
i
symbol
]
symbol
=
identifier
K
symbol
;
identifier
NewLine
keyword
else
identifier
NewLine
identifier
assert
symbol
(
integerConstant
0
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
M
symbol
<
symbol
=
integerConstant
70
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
brute
symbol
(
symbol
)
symbol
)
identifier
NewLine
identifier
printf
symbol
(
stringConstant
YES\n
symbol
)
symbol
;
identifier
NewLine
keyword
else
identifier
NewLine
identifier
printf
symbol
(
stringConstant
NO\n
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
else
identifier
NewLine
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
solve
symbol
(
symbol
)
symbol
)
identifier
NewLine
identifier
printf
symbol
(
stringConstant
YES\n
symbol
)
symbol
;
identifier
NewLine
keyword
else
identifier
NewLine
identifier
printf
symbol
(
stringConstant
NO\n
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
mul
symbol
[
identifier
ONE
symbol
]
symbol
[
identifier
ONE
symbol
]
symbol
=
identifier
ONE
symbol
,
identifier
mul
symbol
[
identifier
ONE
symbol
]
symbol
[
identifier
I
symbol
]
symbol
=
identifier
I
symbol
,
identifier
mul
symbol
[
identifier
ONE
symbol
]
symbol
[
identifier
J
symbol
]
symbol
=
identifier
J
symbol
,
identifier
mul
symbol
[
identifier
ONE
symbol
]
symbol
[
identifier
K
symbol
]
symbol
=
identifier
K
symbol
;
identifier
NewLine
identifier
mul
symbol
[
identifier
I
symbol
]
symbol
[
identifier
ONE
symbol
]
symbol
=
identifier
I
symbol
,
identifier
mul
symbol
[
identifier
I
symbol
]
symbol
[
identifier
I
symbol
]
symbol
=
symbol
-
identifier
ONE
symbol
,
identifier
mul
symbol
[
identifier
I
symbol
]
symbol
[
identifier
J
symbol
]
symbol
=
identifier
K
symbol
,
identifier
mul
symbol
[
identifier
I
symbol
]
symbol
[
identifier
K
symbol
]
symbol
=
symbol
-
identifier
J
symbol
;
identifier
NewLine
identifier
mul
symbol
[
identifier
J
symbol
]
symbol
[
identifier
ONE
symbol
]
symbol
=
identifier
J
symbol
,
identifier
mul
symbol
[
identifier
J
symbol
]
symbol
[
identifier
I
symbol
]
symbol
=
symbol
-
identifier
K
symbol
,
identifier
mul
symbol
[
identifier
J
symbol
]
symbol
[
identifier
J
symbol
]
symbol
=
symbol
-
identifier
ONE
symbol
,
identifier
mul
symbol
[
identifier
J
symbol
]
symbol
[
identifier
K
symbol
]
symbol
=
identifier
I
symbol
;
identifier
NewLine
identifier
mul
symbol
[
identifier
K
symbol
]
symbol
[
identifier
ONE
symbol
]
symbol
=
identifier
K
symbol
,
identifier
mul
symbol
[
identifier
K
symbol
]
symbol
[
identifier
I
symbol
]
symbol
=
identifier
J
symbol
,
identifier
mul
symbol
[
identifier
K
symbol
]
symbol
[
identifier
J
symbol
]
symbol
=
symbol
-
identifier
I
symbol
,
identifier
mul
symbol
[
identifier
K
symbol
]
symbol
[
identifier
K
symbol
]
symbol
=
symbol
-
identifier
ONE
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
1
symbol
;
identifier
i
symbol
<
symbol
=
integerConstant
4
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
j
symbol
=
integerConstant
1
symbol
;
identifier
j
symbol
<
symbol
=
integerConstant
4
symbol
;
identifier
j
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
inv
symbol
[
identifier
abs
symbol
(
identifier
mul
symbol
[
identifier
i
symbol
]
symbol
[
identifier
j
symbol
]
symbol
)
symbol
]
symbol
[
identifier
i
symbol
]
symbol
=
identifier
sgn
symbol
(
identifier
mul
symbol
[
identifier
i
symbol
]
symbol
[
identifier
j
symbol
]
symbol
)
symbol
*
identifier
j
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
X
symbol
=
symbol
-
integerConstant
4
symbol
;
identifier
X
symbol
<
symbol
=
integerConstant
4
symbol
;
identifier
X
symbol
+
symbol
+
symbol
)
keyword
if
symbol
(
identifier
X
symbol
)
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
symbol
-
integerConstant
4
symbol
;
identifier
i
symbol
<
symbol
=
integerConstant
4
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
keyword
if
symbol
(
identifier
i
symbol
)
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
j
symbol
=
symbol
-
integerConstant
4
symbol
;
identifier
j
symbol
<
symbol
=
integerConstant
4
symbol
;
identifier
j
symbol
+
symbol
+
symbol
)
keyword
if
symbol
(
identifier
j
symbol
)
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
k
symbol
=
symbol
-
integerConstant
4
symbol
;
identifier
k
symbol
<
symbol
=
integerConstant
4
symbol
;
identifier
k
symbol
+
symbol
+
symbol
)
keyword
if
symbol
(
identifier
k
symbol
)
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
l
symbol
=
symbol
-
integerConstant
4
symbol
;
identifier
l
symbol
<
symbol
=
integerConstant
4
symbol
;
identifier
l
symbol
+
symbol
+
symbol
)
keyword
if
symbol
(
identifier
l
symbol
)
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
a
symbol
=
integerConstant
0
symbol
;
identifier
a
symbol
<
integerConstant
4
symbol
;
identifier
a
symbol
+
symbol
+
symbol
)
keyword
if
symbol
(
identifier
multiply
symbol
(
identifier
powquat
symbol
(
identifier
X
symbol
,
identifier
a
symbol
)
symbol
,
identifier
i
symbol
)
symbol
=
symbol
=
identifier
I
symbol
)
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
b
symbol
=
integerConstant
0
symbol
;
identifier
b
symbol
<
integerConstant
4
symbol
;
identifier
b
symbol
+
symbol
+
symbol
)
keyword
if
symbol
(
identifier
multiply
symbol
(
identifier
j
symbol
,
identifier
multiply
symbol
(
identifier
powquat
symbol
(
identifier
X
symbol
,
identifier
b
symbol
)
symbol
,
identifier
k
symbol
)
symbol
)
symbol
=
symbol
=
identifier
J
symbol
)
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
c
symbol
=
integerConstant
0
symbol
;
identifier
c
symbol
<
integerConstant
4
symbol
;
identifier
c
symbol
+
symbol
+
symbol
)
keyword
if
symbol
(
identifier
multiply
symbol
(
identifier
l
symbol
,
identifier
powquat
symbol
(
identifier
X
symbol
,
identifier
c
symbol
)
symbol
)
symbol
=
symbol
=
identifier
K
symbol
)
identifier
NewLine
identifier
possible
symbol
[
symbol
(
identifier
a
symbol
+
identifier
b
symbol
+
identifier
c
symbol
)
integerConstant
4
symbol
]
symbol
[
identifier
X
symbol
+
integerConstant
4
symbol
]
symbol
[
identifier
i
symbol
+
integerConstant
4
symbol
]
symbol
[
identifier
j
symbol
+
integerConstant
4
symbol
]
symbol
[
identifier
k
symbol
+
integerConstant
4
symbol
]
symbol
[
identifier
l
symbol
+
integerConstant
4
symbol
]
symbol
=
keyword
true
symbol
;
identifier
NewLine
identifier
freopen
symbol
(
stringConstant
C-large.in
symbol
,
stringConstant
r
symbol
,
identifier
stdin
symbol
)
symbol
;
identifier
NewLine
identifier
freopen
symbol
(
stringConstant
C-large.out
symbol
,
stringConstant
w
symbol
,
identifier
stdout
symbol
)
symbol
;
identifier
NewLine
keyword
int
identifier
T
symbol
;
identifier
NewLine
keyword
if
integerConstant
0
identifier
NewLine
identifier
T
symbol
=
integerConstant
100
symbol
;
identifier
NewLine
keyword
else
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
T
symbol
)
symbol
;
identifier
NewLine
identifier
endif
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
1
symbol
;
identifier
i
symbol
<
symbol
=
identifier
T
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: 
symbol
,
identifier
i
symbol
)
symbol
;
identifier
NewLine
identifier
main
symbol
(
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/fullpower.0.cpp file...

identifier
include
symbol
<
identifier
stdio
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
identifier
define
identifier
MAXN
integerConstant
1005
identifier
NewLine
identifier
NewLine
keyword
int
identifier
cas
symbol
,
identifier
n
symbol
,
identifier
l
symbol
,
identifier
r
symbol
,
identifier
mid
symbol
,
identifier
ans
symbol
;
identifier
NewLine
keyword
char
identifier
ch
symbol
[
identifier
MAXN
symbol
]
symbol
;
keyword
int
identifier
a
symbol
[
identifier
MAXN
symbol
]
symbol
;
identifier
NewLine
identifier
NewLine
identifier
bool
identifier
solve
symbol
(
keyword
int
identifier
x
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
int
identifier
res
symbol
=
identifier
x
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
symbol
=
identifier
n
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
keyword
if
symbol
(
identifier
a
symbol
[
identifier
i
symbol
]
symbol
>
integerConstant
0
symbol
)
identifier
NewLine
keyword
if
symbol
(
identifier
res
symbol
>
symbol
=
identifier
i
symbol
)
identifier
NewLine
identifier
res
symbol
+
symbol
=
identifier
a
symbol
[
identifier
i
symbol
]
symbol
;
identifier
NewLine
keyword
else
identifier
NewLine
keyword
return
keyword
false
symbol
;
identifier
NewLine
keyword
return
keyword
true
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
freopen
symbol
(
stringConstant
A.in
symbol
,
stringConstant
r
symbol
,
identifier
stdin
symbol
)
symbol
;
identifier
freopen
symbol
(
stringConstant
A.out
symbol
,
stringConstant
w
symbol
,
identifier
stdout
symbol
)
symbol
;
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
cas
symbol
)
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
T
symbol
=
integerConstant
1
symbol
;
identifier
T
symbol
<
symbol
=
identifier
cas
symbol
;
identifier
T
symbol
+
symbol
+
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
n
symbol
)
symbol
;
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%s
symbol
,
identifier
ch
symbol
)
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
symbol
=
identifier
n
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
a
symbol
[
identifier
i
symbol
]
symbol
=
identifier
ch
symbol
[
identifier
i
symbol
]
symbol
-
integerConstant
0
symbol
;
identifier
NewLine
identifier
l
symbol
=
integerConstant
0
symbol
,
identifier
r
symbol
=
identifier
n
symbol
*
integerConstant
10
symbol
;
identifier
NewLine
keyword
while
symbol
(
identifier
l
symbol
<
symbol
=
identifier
r
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
mid
symbol
=
symbol
(
identifier
l
symbol
+
identifier
r
symbol
)
symbol
>
symbol
>
integerConstant
1
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
solve
symbol
(
identifier
mid
symbol
)
symbol
)
identifier
NewLine
identifier
ans
symbol
=
identifier
mid
symbol
,
identifier
r
symbol
=
identifier
mid
symbol
-
integerConstant
1
symbol
;
identifier
NewLine
keyword
else
identifier
NewLine
identifier
l
symbol
=
identifier
mid
symbol
+
integerConstant
1
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: %d\n
symbol
,
identifier
T
symbol
,
identifier
ans
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
fclose
symbol
(
identifier
stdin
symbol
)
symbol
;
identifier
fclose
symbol
(
identifier
stdout
symbol
)
symbol
;
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/fullpower.1.cpp file...

identifier
include
symbol
<
identifier
stdio
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
algorithm
symbol
>
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
identifier
define
identifier
INF
integerConstant
0
identifier
x7f7f7f7f
identifier
NewLine
identifier
define
identifier
MAXN
integerConstant
1005
identifier
NewLine
keyword
int
identifier
cas
symbol
,
identifier
n
symbol
,
identifier
limit
symbol
,
identifier
ans
symbol
;
keyword
int
identifier
a
symbol
[
identifier
MAXN
symbol
]
symbol
;
identifier
NewLine
keyword
int
identifier
f
symbol
[
identifier
MAXN
symbol
]
symbol
[
identifier
MAXN
symbol
]
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
freopen
symbol
(
stringConstant
B.in
symbol
,
stringConstant
r
symbol
,
identifier
stdin
symbol
)
symbol
;
identifier
freopen
symbol
(
stringConstant
B.out
symbol
,
stringConstant
w
symbol
,
identifier
stdout
symbol
)
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
1
symbol
;
identifier
i
symbol
<
symbol
=
integerConstant
1000
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
j
symbol
=
integerConstant
1
symbol
;
identifier
j
symbol
<
symbol
=
integerConstant
1000
symbol
;
identifier
j
symbol
+
symbol
+
symbol
)
identifier
NewLine
keyword
if
symbol
(
identifier
j
symbol
<
symbol
=
identifier
i
symbol
)
identifier
NewLine
identifier
f
symbol
[
identifier
i
symbol
]
symbol
[
identifier
j
symbol
]
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
keyword
else
identifier
NewLine
symbol
{
identifier
NewLine
identifier
f
symbol
[
identifier
i
symbol
]
symbol
[
identifier
j
symbol
]
symbol
=
identifier
INF
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
k
symbol
=
integerConstant
1
symbol
;
identifier
k
symbol
<
identifier
j
symbol
;
identifier
k
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
f
symbol
[
identifier
i
symbol
]
symbol
[
identifier
j
symbol
]
symbol
=
identifier
min
symbol
(
identifier
f
symbol
[
identifier
i
symbol
]
symbol
[
identifier
k
symbol
]
symbol
+
identifier
f
symbol
[
identifier
i
symbol
]
symbol
[
identifier
j
symbol
-
identifier
k
symbol
]
symbol
+
integerConstant
1
symbol
,
identifier
f
symbol
[
identifier
i
symbol
]
symbol
[
identifier
j
symbol
]
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
cas
symbol
)
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
T
symbol
=
integerConstant
1
symbol
;
identifier
T
symbol
<
symbol
=
identifier
cas
symbol
;
identifier
T
symbol
+
symbol
+
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
n
symbol
)
symbol
;
identifier
limit
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
1
symbol
;
identifier
i
symbol
<
symbol
=
identifier
n
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
a
symbol
[
identifier
i
symbol
]
symbol
)
symbol
;
identifier
NewLine
identifier
limit
symbol
=
identifier
max
symbol
(
identifier
a
symbol
[
identifier
i
symbol
]
symbol
,
identifier
limit
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
ans
symbol
=
identifier
INF
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
j
symbol
=
integerConstant
1
symbol
;
identifier
j
symbol
<
symbol
=
identifier
limit
symbol
;
identifier
j
symbol
+
symbol
+
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
int
identifier
tmp
symbol
=
identifier
j
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
1
symbol
;
identifier
i
symbol
<
symbol
=
identifier
n
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
tmp
symbol
+
symbol
=
identifier
f
symbol
[
identifier
j
symbol
]
symbol
[
identifier
a
symbol
[
identifier
i
symbol
]
symbol
]
symbol
;
identifier
NewLine
identifier
ans
symbol
=
identifier
min
symbol
(
identifier
tmp
symbol
,
identifier
ans
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: %d\n
symbol
,
identifier
T
symbol
,
identifier
ans
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
fclose
symbol
(
identifier
stdin
symbol
)
symbol
;
identifier
fclose
symbol
(
identifier
stdout
symbol
)
symbol
;
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/fullpower.2.cpp file...

identifier
include
symbol
<
identifier
stdio
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
algorithm
symbol
>
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
identifier
typedef
identifier
long
identifier
long
identifier
ll
symbol
;
identifier
NewLine
identifier
NewLine
identifier
define
identifier
INF
symbol
(
integerConstant
1
identifier
ll
symbol
<
symbol
<
integerConstant
60
symbol
)
identifier
NewLine
identifier
define
identifier
MAXN
integerConstant
10005
identifier
NewLine
identifier
NewLine
keyword
char
identifier
ch
symbol
[
identifier
MAXN
symbol
]
symbol
;
keyword
int
identifier
a
symbol
[
identifier
MAXN
symbol
]
symbol
,
identifier
b
symbol
[
integerConstant
4
symbol
]
symbol
;
identifier
NewLine
keyword
int
identifier
g
symbol
[
integerConstant
5
symbol
]
symbol
[
integerConstant
5
symbol
]
symbol
,
identifier
sl
symbol
[
identifier
MAXN
symbol
]
symbol
,
identifier
sr
symbol
[
identifier
MAXN
symbol
]
symbol
;
identifier
NewLine
keyword
int
identifier
cas
symbol
,
identifier
n
symbol
;
identifier
ll
identifier
m
symbol
,
identifier
l
symbol
,
identifier
r
symbol
,
identifier
lc
symbol
,
identifier
rc
symbol
;
identifier
bool
identifier
flag
symbol
;
identifier
NewLine
identifier
NewLine
keyword
void
identifier
init
symbol
(
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
g
symbol
[
integerConstant
1
symbol
]
symbol
[
integerConstant
1
symbol
]
symbol
=
integerConstant
1
symbol
;
identifier
g
symbol
[
integerConstant
1
symbol
]
symbol
[
integerConstant
2
symbol
]
symbol
=
integerConstant
2
symbol
;
identifier
g
symbol
[
integerConstant
1
symbol
]
symbol
[
integerConstant
3
symbol
]
symbol
=
integerConstant
3
symbol
;
identifier
g
symbol
[
integerConstant
1
symbol
]
symbol
[
integerConstant
4
symbol
]
symbol
=
integerConstant
4
symbol
;
identifier
NewLine
identifier
g
symbol
[
integerConstant
2
symbol
]
symbol
[
integerConstant
1
symbol
]
symbol
=
integerConstant
2
symbol
;
identifier
g
symbol
[
integerConstant
2
symbol
]
symbol
[
integerConstant
2
symbol
]
symbol
=
symbol
-
integerConstant
1
symbol
;
identifier
g
symbol
[
integerConstant
2
symbol
]
symbol
[
integerConstant
3
symbol
]
symbol
=
integerConstant
4
symbol
;
identifier
g
symbol
[
integerConstant
2
symbol
]
symbol
[
integerConstant
4
symbol
]
symbol
=
symbol
-
integerConstant
3
symbol
;
identifier
NewLine
identifier
g
symbol
[
integerConstant
3
symbol
]
symbol
[
integerConstant
1
symbol
]
symbol
=
integerConstant
3
symbol
;
identifier
g
symbol
[
integerConstant
3
symbol
]
symbol
[
integerConstant
2
symbol
]
symbol
=
symbol
-
integerConstant
4
symbol
;
identifier
g
symbol
[
integerConstant
3
symbol
]
symbol
[
integerConstant
3
symbol
]
symbol
=
symbol
-
integerConstant
1
symbol
;
identifier
g
symbol
[
integerConstant
3
symbol
]
symbol
[
integerConstant
4
symbol
]
symbol
=
integerConstant
2
symbol
;
identifier
NewLine
identifier
g
symbol
[
integerConstant
4
symbol
]
symbol
[
integerConstant
1
symbol
]
symbol
=
integerConstant
4
symbol
;
identifier
g
symbol
[
integerConstant
4
symbol
]
symbol
[
integerConstant
2
symbol
]
symbol
=
integerConstant
3
symbol
;
identifier
g
symbol
[
integerConstant
4
symbol
]
symbol
[
integerConstant
3
symbol
]
symbol
=
symbol
-
integerConstant
2
symbol
;
identifier
g
symbol
[
integerConstant
4
symbol
]
symbol
[
integerConstant
4
symbol
]
symbol
=
symbol
-
integerConstant
1
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
int
identifier
multi
symbol
(
keyword
int
identifier
a
symbol
,
keyword
int
identifier
b
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
int
identifier
res
symbol
=
symbol
(
identifier
a
symbol
*
identifier
b
symbol
>
integerConstant
0
symbol
)
integerConstant
1
symbol
-
integerConstant
1
symbol
;
identifier
NewLine
identifier
a
symbol
=
identifier
abs
symbol
(
identifier
a
symbol
)
symbol
;
identifier
b
symbol
=
identifier
abs
symbol
(
identifier
b
symbol
)
symbol
;
identifier
NewLine
identifier
res
symbol
*
symbol
=
identifier
g
symbol
[
identifier
a
symbol
]
symbol
[
identifier
b
symbol
]
symbol
;
identifier
NewLine
keyword
return
identifier
res
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
int
identifier
char2int
symbol
(
keyword
char
identifier
c
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
c
symbol
=
symbol
=
integerConstant
1
symbol
)
keyword
return
integerConstant
1
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
c
symbol
=
symbol
=
identifier
i
symbol
)
keyword
return
integerConstant
2
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
c
symbol
=
symbol
=
identifier
j
symbol
)
keyword
return
integerConstant
3
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
c
symbol
=
symbol
=
identifier
k
symbol
)
keyword
return
integerConstant
4
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
freopen
symbol
(
stringConstant
C.in
symbol
,
stringConstant
r
symbol
,
identifier
stdin
symbol
)
symbol
;
identifier
freopen
symbol
(
stringConstant
C.out
symbol
,
stringConstant
w
symbol
,
identifier
stdout
symbol
)
symbol
;
identifier
NewLine
identifier
init
symbol
(
symbol
)
symbol
;
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
cas
symbol
)
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
T
symbol
=
integerConstant
1
symbol
;
identifier
T
symbol
<
symbol
=
identifier
cas
symbol
;
identifier
T
symbol
+
symbol
+
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d%lld
symbol
,
symbol
&
identifier
n
symbol
,
symbol
&
identifier
m
symbol
)
symbol
;
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%s
symbol
,
identifier
ch
symbol
+
integerConstant
1
symbol
)
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
1
symbol
;
identifier
i
symbol
<
symbol
=
identifier
n
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
a
symbol
[
identifier
i
symbol
]
symbol
=
identifier
char2int
symbol
(
identifier
ch
symbol
[
identifier
i
symbol
]
symbol
)
symbol
;
identifier
NewLine
identifier
sl
symbol
[
integerConstant
0
symbol
]
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
1
symbol
;
identifier
i
symbol
<
symbol
=
identifier
n
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
sl
symbol
[
identifier
i
symbol
]
symbol
=
identifier
multi
symbol
(
identifier
sl
symbol
[
identifier
i
symbol
-
integerConstant
1
symbol
]
symbol
,
identifier
a
symbol
[
identifier
i
symbol
]
symbol
)
symbol
;
identifier
NewLine
identifier
sr
symbol
[
identifier
n
symbol
+
integerConstant
1
symbol
]
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
identifier
n
symbol
;
identifier
i
symbol
;
identifier
i
symbol
-
symbol
-
symbol
)
identifier
sr
symbol
[
identifier
i
symbol
]
symbol
=
identifier
multi
symbol
(
identifier
a
symbol
[
identifier
i
symbol
]
symbol
,
identifier
sr
symbol
[
identifier
i
symbol
+
integerConstant
1
symbol
]
symbol
)
symbol
;
identifier
NewLine
identifier
b
symbol
[
integerConstant
0
symbol
]
symbol
=
integerConstant
1
symbol
;
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
1
symbol
;
identifier
i
symbol
<
integerConstant
4
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
b
symbol
[
identifier
i
symbol
]
symbol
=
identifier
multi
symbol
(
identifier
b
symbol
[
identifier
i
symbol
-
integerConstant
1
symbol
]
symbol
,
identifier
sl
symbol
[
identifier
n
symbol
]
symbol
)
symbol
;
identifier
NewLine
identifier
l
symbol
=
identifier
INF
symbol
,
identifier
r
symbol
=
identifier
INF
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
j
symbol
=
integerConstant
1
symbol
;
identifier
j
symbol
<
symbol
=
identifier
n
symbol
;
identifier
j
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
integerConstant
4
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
keyword
if
symbol
(
identifier
multi
symbol
(
identifier
b
symbol
[
identifier
i
symbol
]
symbol
,
identifier
sl
symbol
[
identifier
j
symbol
]
symbol
)
symbol
=
symbol
=
integerConstant
2
symbol
)
identifier
NewLine
identifier
l
symbol
=
identifier
min
symbol
(
integerConstant
1
identifier
ll
symbol
*
identifier
i
symbol
*
identifier
n
symbol
+
identifier
j
symbol
,
identifier
l
symbol
)
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
j
symbol
=
integerConstant
1
symbol
;
identifier
j
symbol
<
symbol
=
identifier
n
symbol
;
identifier
j
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
integerConstant
4
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
keyword
if
symbol
(
identifier
multi
symbol
(
identifier
sr
symbol
[
identifier
j
symbol
]
symbol
,
identifier
b
symbol
[
identifier
i
symbol
]
symbol
)
symbol
=
symbol
=
integerConstant
4
symbol
)
identifier
NewLine
identifier
r
symbol
=
identifier
min
symbol
(
integerConstant
1
identifier
ll
symbol
*
identifier
i
symbol
*
identifier
n
symbol
+
symbol
(
identifier
n
symbol
-
identifier
j
symbol
+
integerConstant
1
symbol
)
symbol
,
identifier
r
symbol
)
symbol
;
identifier
NewLine
identifier
flag
symbol
=
keyword
false
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
l
symbol
+
identifier
r
symbol
<
identifier
m
symbol
*
identifier
n
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
l
symbol
+
symbol
+
symbol
,
identifier
r
symbol
+
symbol
+
symbol
;
identifier
r
symbol
=
identifier
m
symbol
*
identifier
n
symbol
-
identifier
r
symbol
+
integerConstant
1
symbol
;
identifier
NewLine
identifier
lc
symbol
=
symbol
(
identifier
l
symbol
-
integerConstant
1
symbol
)
symbol
/
identifier
n
symbol
+
integerConstant
1
symbol
;
identifier
NewLine
identifier
rc
symbol
=
symbol
(
identifier
r
symbol
-
integerConstant
1
symbol
)
symbol
/
identifier
n
symbol
+
integerConstant
1
symbol
;
identifier
NewLine
identifier
l
symbol
=
symbol
(
identifier
l
symbol
-
integerConstant
1
symbol
)
identifier
n
symbol
+
integerConstant
1
symbol
;
identifier
NewLine
identifier
r
symbol
=
symbol
(
identifier
r
symbol
-
integerConstant
1
symbol
)
identifier
n
symbol
+
integerConstant
1
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
lc
symbol
=
symbol
=
identifier
rc
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
int
identifier
res
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
identifier
l
symbol
;
identifier
i
symbol
<
symbol
=
identifier
r
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
res
symbol
=
identifier
multi
symbol
(
identifier
res
symbol
,
identifier
a
symbol
[
identifier
i
symbol
]
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
res
symbol
=
symbol
=
integerConstant
3
symbol
)
identifier
flag
symbol
=
keyword
true
symbol
;
identifier
NewLine
symbol
}
keyword
else
symbol
{
identifier
NewLine
keyword
int
identifier
res
symbol
=
identifier
sr
symbol
[
identifier
l
symbol
]
symbol
;
identifier
res
symbol
=
identifier
multi
symbol
(
identifier
res
symbol
,
identifier
b
symbol
[
symbol
(
identifier
rc
symbol
-
identifier
lc
symbol
-
integerConstant
1
symbol
)
integerConstant
4
symbol
]
symbol
)
symbol
;
identifier
res
symbol
=
identifier
multi
symbol
(
identifier
res
symbol
,
identifier
sl
symbol
[
identifier
r
symbol
]
symbol
)
symbol
;
keyword
if
symbol
(
identifier
res
symbol
=
symbol
=
integerConstant
3
symbol
)
identifier
flag
symbol
=
keyword
true
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
flag
symbol
)
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: YES\n
symbol
,
identifier
T
symbol
)
symbol
;
identifier
NewLine
keyword
else
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: NO\n
symbol
,
identifier
T
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
fclose
symbol
(
identifier
stdin
symbol
)
symbol
;
identifier
fclose
symbol
(
identifier
stdout
symbol
)
symbol
;
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/ICastro.0.cpp file...

identifier
include
symbol
<
identifier
bits
symbol
/
identifier
stdc
symbol
+
symbol
+
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
identifier
define
identifier
size
symbol
(
identifier
v
symbol
)
keyword
int
symbol
(
identifier
v
symbol
.
identifier
size
symbol
(
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
MOD
integerConstant
1000003
identifier
NewLine
identifier
define
identifier
INF
integerConstant
1
identifier
e9
identifier
NewLine
identifier
define
identifier
ulint
identifier
unsigned
identifier
long
identifier
long
keyword
int
identifier
NewLine
identifier
define
identifier
lint
identifier
long
identifier
long
keyword
int
identifier
NewLine
identifier
define
identifier
mp
identifier
make
identifier
pair
identifier
NewLine
identifier
define
identifier
pb
identifier
push
identifier
back
identifier
NewLine
identifier
define
identifier
pop
identifier
pop
identifier
back
identifier
NewLine
identifier
define
identifier
st
identifier
first
identifier
NewLine
identifier
define
identifier
nd
identifier
second
identifier
NewLine
identifier
define
identifier
all
symbol
(
identifier
X
symbol
)
symbol
(
identifier
X
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
,
symbol
(
identifier
X
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
identifier
NewLine
identifier
define
identifier
E12
integerConstant
1000000000000
identifier
NewLine
identifier
NewLine
identifier
struct
identifier
min
identifier
heap
identifier
comparator
symbol
{
identifier
NewLine
identifier
bool
identifier
operator
symbol
(
symbol
)
symbol
(
identifier
const
identifier
long
symbol
&
identifier
a
symbol
,
identifier
const
identifier
long
symbol
&
identifier
b
symbol
)
identifier
const
symbol
{
identifier
NewLine
keyword
return
identifier
a
symbol
>
identifier
b
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
symbol
;
identifier
NewLine
identifier
define
identifier
mh
identifier
min
symbol
(
identifier
X
symbol
)
identifier
make
identifier
heap
symbol
(
identifier
all
symbol
(
identifier
X
symbol
)
symbol
,
identifier
min
identifier
heap
identifier
comparator
symbol
(
symbol
)
symbol
)
symbol
;
identifier
NewLine
identifier
define
identifier
poph
identifier
min
symbol
(
identifier
X
symbol
)
symbol
{
identifier
pop
identifier
heap
symbol
(
identifier
all
symbol
(
identifier
X
symbol
)
symbol
,
identifier
min
identifier
heap
identifier
comparator
symbol
(
symbol
)
symbol
)
symbol
;
symbol
(
identifier
X
symbol
)
symbol
.
identifier
pop
symbol
(
symbol
)
symbol
;
symbol
}
identifier
NewLine
identifier
define
identifier
pushh
identifier
min
symbol
(
identifier
X
symbol
,
identifier
Y
symbol
)
symbol
{
symbol
(
identifier
X
symbol
)
symbol
.
identifier
pb
symbol
(
identifier
Y
symbol
)
symbol
;
identifier
push
identifier
heap
symbol
(
identifier
all
symbol
(
identifier
X
symbol
)
symbol
,
identifier
min
identifier
heap
identifier
comparator
symbol
(
symbol
)
symbol
)
symbol
;
symbol
}
identifier
NewLine
identifier
define
identifier
sorth
identifier
min
symbol
(
identifier
X
symbol
)
identifier
sort
identifier
heap
symbol
(
identifier
all
symbol
(
identifier
X
symbol
)
symbol
,
identifier
min
identifier
heap
identifier
comparator
symbol
(
symbol
)
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
identifier
define
identifier
mh
identifier
max
symbol
(
identifier
X
symbol
)
identifier
make
identifier
heap
symbol
(
identifier
all
symbol
(
identifier
X
symbol
)
symbol
)
symbol
;
identifier
NewLine
identifier
define
identifier
poph
identifier
max
symbol
(
identifier
X
symbol
)
symbol
{
identifier
pop
identifier
heap
symbol
(
identifier
all
symbol
(
identifier
X
symbol
)
symbol
)
symbol
;
symbol
(
identifier
X
symbol
)
symbol
.
identifier
pop
symbol
(
symbol
)
symbol
;
symbol
}
identifier
NewLine
identifier
define
identifier
pushh
identifier
max
symbol
(
identifier
X
symbol
,
identifier
Y
symbol
)
symbol
{
symbol
(
identifier
X
symbol
)
symbol
.
identifier
pb
symbol
(
identifier
Y
symbol
)
symbol
;
identifier
push
identifier
heap
symbol
(
identifier
all
symbol
(
identifier
X
symbol
)
symbol
)
symbol
;
symbol
}
identifier
NewLine
identifier
define
identifier
sorth
identifier
max
symbol
(
identifier
X
symbol
)
identifier
sort
identifier
heap
symbol
(
identifier
all
symbol
(
identifier
X
symbol
)
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
keyword
void
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
T
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
T
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
t
symbol
=
integerConstant
0
symbol
;
identifier
t
symbol
<
identifier
T
symbol
;
symbol
+
symbol
+
identifier
t
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
N
symbol
;
identifier
NewLine
identifier
string
identifier
s
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
N
symbol
>
symbol
>
identifier
s
symbol
;
identifier
NewLine
keyword
int
identifier
amigos
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
keyword
int
identifier
total
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
symbol
=
identifier
N
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
symbol
{
identifier
NewLine
identifier
total
symbol
+
symbol
=
identifier
s
symbol
[
identifier
i
symbol
]
symbol
-
integerConstant
0
symbol
;
identifier
NewLine
keyword
while
symbol
(
identifier
total
symbol
<
symbol
=
identifier
i
symbol
)
symbol
{
identifier
NewLine
identifier
amigos
symbol
+
symbol
+
symbol
;
identifier
NewLine
identifier
total
symbol
+
symbol
+
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
cout
symbol
<
symbol
<
stringConstant
Case #
symbol
<
symbol
<
identifier
t
symbol
+
integerConstant
1
symbol
<
symbol
<
stringConstant
: 
symbol
<
symbol
<
identifier
amigos
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/ICastro.1.cpp file...

identifier
include
symbol
<
identifier
bits
symbol
/
identifier
stdc
symbol
+
symbol
+
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
identifier
define
identifier
size
symbol
(
identifier
v
symbol
)
keyword
int
symbol
(
identifier
v
symbol
.
identifier
size
symbol
(
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
MOD
integerConstant
1000003
identifier
NewLine
identifier
define
identifier
INF
integerConstant
1
identifier
e9
identifier
NewLine
identifier
define
identifier
ulint
identifier
unsigned
identifier
long
identifier
long
keyword
int
identifier
NewLine
identifier
define
identifier
lint
identifier
long
identifier
long
keyword
int
identifier
NewLine
identifier
define
identifier
mp
identifier
make
identifier
pair
identifier
NewLine
identifier
define
identifier
pb
identifier
push
identifier
back
identifier
NewLine
identifier
define
identifier
pop
identifier
pop
identifier
back
identifier
NewLine
identifier
define
identifier
st
identifier
first
identifier
NewLine
identifier
define
identifier
nd
identifier
second
identifier
NewLine
identifier
define
identifier
all
symbol
(
identifier
X
symbol
)
symbol
(
identifier
X
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
,
symbol
(
identifier
X
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
identifier
NewLine
identifier
define
identifier
E12
integerConstant
1000000000000
identifier
NewLine
identifier
NewLine
identifier
struct
identifier
min
identifier
heap
identifier
comparator
symbol
{
identifier
NewLine
identifier
bool
identifier
operator
symbol
(
symbol
)
symbol
(
identifier
const
identifier
long
symbol
&
identifier
a
symbol
,
identifier
const
identifier
long
symbol
&
identifier
b
symbol
)
identifier
const
symbol
{
identifier
NewLine
keyword
return
identifier
a
symbol
>
identifier
b
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
symbol
;
identifier
NewLine
identifier
define
identifier
mh
identifier
min
symbol
(
identifier
X
symbol
)
identifier
make
identifier
heap
symbol
(
identifier
all
symbol
(
identifier
X
symbol
)
symbol
,
identifier
min
identifier
heap
identifier
comparator
symbol
(
symbol
)
symbol
)
symbol
;
identifier
NewLine
identifier
define
identifier
poph
identifier
min
symbol
(
identifier
X
symbol
)
symbol
{
identifier
pop
identifier
heap
symbol
(
identifier
all
symbol
(
identifier
X
symbol
)
symbol
,
identifier
min
identifier
heap
identifier
comparator
symbol
(
symbol
)
symbol
)
symbol
;
symbol
(
identifier
X
symbol
)
symbol
.
identifier
pop
symbol
(
symbol
)
symbol
;
symbol
}
identifier
NewLine
identifier
define
identifier
pushh
identifier
min
symbol
(
identifier
X
symbol
,
identifier
Y
symbol
)
symbol
{
symbol
(
identifier
X
symbol
)
symbol
.
identifier
pb
symbol
(
identifier
Y
symbol
)
symbol
;
identifier
push
identifier
heap
symbol
(
identifier
all
symbol
(
identifier
X
symbol
)
symbol
,
identifier
min
identifier
heap
identifier
comparator
symbol
(
symbol
)
symbol
)
symbol
;
symbol
}
identifier
NewLine
identifier
define
identifier
sorth
identifier
min
symbol
(
identifier
X
symbol
)
identifier
sort
identifier
heap
symbol
(
identifier
all
symbol
(
identifier
X
symbol
)
symbol
,
identifier
min
identifier
heap
identifier
comparator
symbol
(
symbol
)
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
identifier
define
identifier
mh
identifier
max
symbol
(
identifier
X
symbol
)
identifier
make
identifier
heap
symbol
(
identifier
all
symbol
(
identifier
X
symbol
)
symbol
)
symbol
;
identifier
NewLine
identifier
define
identifier
poph
identifier
max
symbol
(
identifier
X
symbol
)
symbol
{
identifier
pop
identifier
heap
symbol
(
identifier
all
symbol
(
identifier
X
symbol
)
symbol
)
symbol
;
symbol
(
identifier
X
symbol
)
symbol
.
identifier
pop
symbol
(
symbol
)
symbol
;
symbol
}
identifier
NewLine
identifier
define
identifier
pushh
identifier
max
symbol
(
identifier
X
symbol
,
identifier
Y
symbol
)
symbol
{
symbol
(
identifier
X
symbol
)
symbol
.
identifier
pb
symbol
(
identifier
Y
symbol
)
symbol
;
identifier
push
identifier
heap
symbol
(
identifier
all
symbol
(
identifier
X
symbol
)
symbol
)
symbol
;
symbol
}
identifier
NewLine
identifier
define
identifier
sorth
identifier
max
symbol
(
identifier
X
symbol
)
identifier
sort
identifier
heap
symbol
(
identifier
all
symbol
(
identifier
X
symbol
)
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
keyword
void
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
T
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
T
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
t
symbol
=
integerConstant
0
symbol
;
identifier
t
symbol
<
identifier
T
symbol
;
symbol
+
symbol
+
identifier
t
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
D
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
D
symbol
;
identifier
NewLine
identifier
vector
symbol
<
keyword
int
symbol
>
identifier
vet
symbol
(
identifier
D
symbol
)
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
D
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
symbol
{
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
vet
symbol
[
identifier
i
symbol
]
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
int
identifier
min
symbol
=
identifier
INF
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
d
symbol
=
integerConstant
1
symbol
;
identifier
d
symbol
<
symbol
=
integerConstant
1000
symbol
;
symbol
+
symbol
+
identifier
d
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
v
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
size
symbol
(
identifier
vet
symbol
)
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
vet
symbol
[
identifier
i
symbol
]
symbol
>
identifier
d
symbol
)
identifier
NewLine
identifier
v
symbol
+
symbol
=
symbol
(
identifier
vet
symbol
[
identifier
i
symbol
]
symbol
-
integerConstant
1
symbol
)
symbol
/
identifier
d
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
v
symbol
+
identifier
d
symbol
<
identifier
min
symbol
)
identifier
min
symbol
=
identifier
v
symbol
+
identifier
d
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
cout
symbol
<
symbol
<
stringConstant
Case #
symbol
<
symbol
<
identifier
t
symbol
+
integerConstant
1
symbol
<
symbol
<
stringConstant
: 
symbol
<
symbol
<
identifier
min
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/ICastro.2.cpp file...

identifier
include
symbol
<
identifier
bits
symbol
/
identifier
stdc
symbol
+
symbol
+
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
identifier
define
identifier
size
symbol
(
identifier
v
symbol
)
keyword
int
symbol
(
identifier
v
symbol
.
identifier
size
symbol
(
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
MOD
integerConstant
1000003
identifier
NewLine
identifier
define
identifier
INF
integerConstant
1
identifier
e9
identifier
NewLine
identifier
define
identifier
ulint
identifier
unsigned
identifier
long
identifier
long
keyword
int
identifier
NewLine
identifier
define
identifier
lint
identifier
long
identifier
long
keyword
int
identifier
NewLine
identifier
define
identifier
mp
identifier
make
identifier
pair
identifier
NewLine
identifier
define
identifier
pb
identifier
push
identifier
back
identifier
NewLine
identifier
define
identifier
pop
identifier
pop
identifier
back
identifier
NewLine
identifier
define
identifier
st
identifier
first
identifier
NewLine
identifier
define
identifier
nd
identifier
second
identifier
NewLine
identifier
define
identifier
all
symbol
(
identifier
X
symbol
)
symbol
(
identifier
X
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
,
symbol
(
identifier
X
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
identifier
NewLine
identifier
define
identifier
E12
integerConstant
1000000000000
identifier
NewLine
identifier
NewLine
identifier
struct
identifier
min
identifier
heap
identifier
comparator
symbol
{
identifier
NewLine
identifier
bool
identifier
operator
symbol
(
symbol
)
symbol
(
identifier
const
identifier
long
symbol
&
identifier
a
symbol
,
identifier
const
identifier
long
symbol
&
identifier
b
symbol
)
identifier
const
symbol
{
identifier
NewLine
keyword
return
identifier
a
symbol
>
identifier
b
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
symbol
;
identifier
NewLine
identifier
define
identifier
mh
identifier
min
symbol
(
identifier
X
symbol
)
identifier
make
identifier
heap
symbol
(
identifier
all
symbol
(
identifier
X
symbol
)
symbol
,
identifier
min
identifier
heap
identifier
comparator
symbol
(
symbol
)
symbol
)
symbol
;
identifier
NewLine
identifier
define
identifier
poph
identifier
min
symbol
(
identifier
X
symbol
)
symbol
{
identifier
pop
identifier
heap
symbol
(
identifier
all
symbol
(
identifier
X
symbol
)
symbol
,
identifier
min
identifier
heap
identifier
comparator
symbol
(
symbol
)
symbol
)
symbol
;
symbol
(
identifier
X
symbol
)
symbol
.
identifier
pop
symbol
(
symbol
)
symbol
;
symbol
}
identifier
NewLine
identifier
define
identifier
pushh
identifier
min
symbol
(
identifier
X
symbol
,
identifier
Y
symbol
)
symbol
{
symbol
(
identifier
X
symbol
)
symbol
.
identifier
pb
symbol
(
identifier
Y
symbol
)
symbol
;
identifier
push
identifier
heap
symbol
(
identifier
all
symbol
(
identifier
X
symbol
)
symbol
,
identifier
min
identifier
heap
identifier
comparator
symbol
(
symbol
)
symbol
)
symbol
;
symbol
}
identifier
NewLine
identifier
define
identifier
sorth
identifier
min
symbol
(
identifier
X
symbol
)
identifier
sort
identifier
heap
symbol
(
identifier
all
symbol
(
identifier
X
symbol
)
symbol
,
identifier
min
identifier
heap
identifier
comparator
symbol
(
symbol
)
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
identifier
define
identifier
mh
identifier
max
symbol
(
identifier
X
symbol
)
identifier
make
identifier
heap
symbol
(
identifier
all
symbol
(
identifier
X
symbol
)
symbol
)
symbol
;
identifier
NewLine
identifier
define
identifier
poph
identifier
max
symbol
(
identifier
X
symbol
)
symbol
{
identifier
pop
identifier
heap
symbol
(
identifier
all
symbol
(
identifier
X
symbol
)
symbol
)
symbol
;
symbol
(
identifier
X
symbol
)
symbol
.
identifier
pop
symbol
(
symbol
)
symbol
;
symbol
}
identifier
NewLine
identifier
define
identifier
pushh
identifier
max
symbol
(
identifier
X
symbol
,
identifier
Y
symbol
)
symbol
{
symbol
(
identifier
X
symbol
)
symbol
.
identifier
pb
symbol
(
identifier
Y
symbol
)
symbol
;
identifier
push
identifier
heap
symbol
(
identifier
all
symbol
(
identifier
X
symbol
)
symbol
)
symbol
;
symbol
}
identifier
NewLine
identifier
define
identifier
sorth
identifier
max
symbol
(
identifier
X
symbol
)
identifier
sort
identifier
heap
symbol
(
identifier
all
symbol
(
identifier
X
symbol
)
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
keyword
void
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
multiplica
symbol
[
integerConstant
256
symbol
]
symbol
[
integerConstant
256
symbol
]
symbol
;
identifier
NewLine
identifier
multiplica
symbol
[
integerConstant
1
symbol
]
symbol
[
integerConstant
1
symbol
]
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
identifier
multiplica
symbol
[
integerConstant
1
symbol
]
symbol
[
identifier
i
symbol
]
symbol
=
identifier
i
symbol
;
identifier
NewLine
identifier
multiplica
symbol
[
integerConstant
1
symbol
]
symbol
[
identifier
j
symbol
]
symbol
=
identifier
j
symbol
;
identifier
NewLine
identifier
multiplica
symbol
[
integerConstant
1
symbol
]
symbol
[
identifier
k
symbol
]
symbol
=
identifier
k
symbol
;
identifier
NewLine
identifier
multiplica
symbol
[
identifier
i
symbol
]
symbol
[
integerConstant
1
symbol
]
symbol
=
identifier
i
symbol
;
identifier
NewLine
identifier
multiplica
symbol
[
identifier
i
symbol
]
symbol
[
identifier
i
symbol
]
symbol
=
integerConstant
256
symbol
-
integerConstant
1
symbol
;
identifier
NewLine
identifier
multiplica
symbol
[
identifier
i
symbol
]
symbol
[
identifier
j
symbol
]
symbol
=
identifier
k
symbol
;
identifier
NewLine
identifier
multiplica
symbol
[
identifier
i
symbol
]
symbol
[
identifier
k
symbol
]
symbol
=
integerConstant
256
symbol
-
identifier
j
symbol
;
identifier
NewLine
identifier
multiplica
symbol
[
identifier
j
symbol
]
symbol
[
integerConstant
1
symbol
]
symbol
=
identifier
j
symbol
;
identifier
NewLine
identifier
multiplica
symbol
[
identifier
j
symbol
]
symbol
[
identifier
i
symbol
]
symbol
=
integerConstant
256
symbol
-
identifier
k
symbol
;
identifier
NewLine
identifier
multiplica
symbol
[
identifier
j
symbol
]
symbol
[
identifier
j
symbol
]
symbol
=
integerConstant
256
symbol
-
integerConstant
1
symbol
;
identifier
NewLine
identifier
multiplica
symbol
[
identifier
j
symbol
]
symbol
[
identifier
k
symbol
]
symbol
=
identifier
i
symbol
;
identifier
NewLine
identifier
multiplica
symbol
[
identifier
k
symbol
]
symbol
[
integerConstant
1
symbol
]
symbol
=
identifier
k
symbol
;
identifier
NewLine
identifier
multiplica
symbol
[
identifier
k
symbol
]
symbol
[
identifier
i
symbol
]
symbol
=
identifier
j
symbol
;
identifier
NewLine
identifier
multiplica
symbol
[
identifier
k
symbol
]
symbol
[
identifier
j
symbol
]
symbol
=
integerConstant
256
symbol
-
identifier
i
symbol
;
identifier
NewLine
identifier
multiplica
symbol
[
identifier
k
symbol
]
symbol
[
identifier
k
symbol
]
symbol
=
integerConstant
256
symbol
-
integerConstant
1
symbol
;
identifier
NewLine
identifier
NewLine
identifier
multiplica
symbol
[
integerConstant
256
symbol
-
integerConstant
1
symbol
]
symbol
[
integerConstant
1
symbol
]
symbol
=
integerConstant
256
symbol
-
integerConstant
1
symbol
;
identifier
NewLine
identifier
multiplica
symbol
[
integerConstant
256
symbol
-
integerConstant
1
symbol
]
symbol
[
identifier
i
symbol
]
symbol
=
integerConstant
256
symbol
-
identifier
i
symbol
;
identifier
NewLine
identifier
multiplica
symbol
[
integerConstant
256
symbol
-
integerConstant
1
symbol
]
symbol
[
identifier
j
symbol
]
symbol
=
integerConstant
256
symbol
-
identifier
j
symbol
;
identifier
NewLine
identifier
multiplica
symbol
[
integerConstant
256
symbol
-
integerConstant
1
symbol
]
symbol
[
identifier
k
symbol
]
symbol
=
integerConstant
256
symbol
-
identifier
k
symbol
;
identifier
NewLine
identifier
multiplica
symbol
[
integerConstant
256
symbol
-
identifier
i
symbol
]
symbol
[
integerConstant
1
symbol
]
symbol
=
integerConstant
256
symbol
-
identifier
i
symbol
;
identifier
NewLine
identifier
multiplica
symbol
[
integerConstant
256
symbol
-
identifier
i
symbol
]
symbol
[
identifier
i
symbol
]
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
identifier
multiplica
symbol
[
integerConstant
256
symbol
-
identifier
i
symbol
]
symbol
[
identifier
j
symbol
]
symbol
=
integerConstant
256
symbol
-
identifier
k
symbol
;
identifier
NewLine
identifier
multiplica
symbol
[
integerConstant
256
symbol
-
identifier
i
symbol
]
symbol
[
identifier
k
symbol
]
symbol
=
identifier
j
symbol
;
identifier
NewLine
identifier
multiplica
symbol
[
integerConstant
256
symbol
-
identifier
j
symbol
]
symbol
[
integerConstant
1
symbol
]
symbol
=
integerConstant
256
symbol
-
identifier
j
symbol
;
identifier
NewLine
identifier
multiplica
symbol
[
integerConstant
256
symbol
-
identifier
j
symbol
]
symbol
[
identifier
i
symbol
]
symbol
=
identifier
k
symbol
;
identifier
NewLine
identifier
multiplica
symbol
[
integerConstant
256
symbol
-
identifier
j
symbol
]
symbol
[
identifier
j
symbol
]
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
identifier
multiplica
symbol
[
integerConstant
256
symbol
-
identifier
j
symbol
]
symbol
[
identifier
k
symbol
]
symbol
=
integerConstant
256
symbol
-
identifier
i
symbol
;
identifier
NewLine
identifier
multiplica
symbol
[
integerConstant
256
symbol
-
identifier
k
symbol
]
symbol
[
integerConstant
1
symbol
]
symbol
=
integerConstant
256
symbol
-
identifier
k
symbol
;
identifier
NewLine
identifier
multiplica
symbol
[
integerConstant
256
symbol
-
identifier
k
symbol
]
symbol
[
identifier
i
symbol
]
symbol
=
integerConstant
256
symbol
-
identifier
j
symbol
;
identifier
NewLine
identifier
multiplica
symbol
[
integerConstant
256
symbol
-
identifier
k
symbol
]
symbol
[
identifier
j
symbol
]
symbol
=
identifier
i
symbol
;
identifier
NewLine
identifier
multiplica
symbol
[
integerConstant
256
symbol
-
identifier
k
symbol
]
symbol
[
identifier
k
symbol
]
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
identifier
NewLine
identifier
multiplica
symbol
[
integerConstant
1
symbol
]
symbol
[
integerConstant
256
symbol
-
integerConstant
1
symbol
]
symbol
=
integerConstant
256
symbol
-
integerConstant
1
symbol
;
identifier
NewLine
identifier
multiplica
symbol
[
integerConstant
1
symbol
]
symbol
[
integerConstant
256
symbol
-
identifier
i
symbol
]
symbol
=
integerConstant
256
symbol
-
identifier
i
symbol
;
identifier
NewLine
identifier
multiplica
symbol
[
integerConstant
1
symbol
]
symbol
[
integerConstant
256
symbol
-
identifier
j
symbol
]
symbol
=
integerConstant
256
symbol
-
identifier
j
symbol
;
identifier
NewLine
identifier
multiplica
symbol
[
integerConstant
1
symbol
]
symbol
[
integerConstant
256
symbol
-
identifier
k
symbol
]
symbol
=
integerConstant
256
symbol
-
identifier
k
symbol
;
identifier
NewLine
identifier
multiplica
symbol
[
identifier
i
symbol
]
symbol
[
integerConstant
256
symbol
-
integerConstant
1
symbol
]
symbol
=
integerConstant
256
symbol
-
identifier
i
symbol
;
identifier
NewLine
identifier
multiplica
symbol
[
identifier
i
symbol
]
symbol
[
integerConstant
256
symbol
-
identifier
i
symbol
]
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
identifier
multiplica
symbol
[
identifier
i
symbol
]
symbol
[
integerConstant
256
symbol
-
identifier
j
symbol
]
symbol
=
integerConstant
256
symbol
-
identifier
k
symbol
;
identifier
NewLine
identifier
multiplica
symbol
[
identifier
i
symbol
]
symbol
[
integerConstant
256
symbol
-
identifier
k
symbol
]
symbol
=
identifier
j
symbol
;
identifier
NewLine
identifier
multiplica
symbol
[
identifier
j
symbol
]
symbol
[
integerConstant
256
symbol
-
integerConstant
1
symbol
]
symbol
=
integerConstant
256
symbol
-
identifier
j
symbol
;
identifier
NewLine
identifier
multiplica
symbol
[
identifier
j
symbol
]
symbol
[
integerConstant
256
symbol
-
identifier
i
symbol
]
symbol
=
identifier
k
symbol
;
identifier
NewLine
identifier
multiplica
symbol
[
identifier
j
symbol
]
symbol
[
integerConstant
256
symbol
-
identifier
j
symbol
]
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
identifier
multiplica
symbol
[
identifier
j
symbol
]
symbol
[
integerConstant
256
symbol
-
identifier
k
symbol
]
symbol
=
integerConstant
256
symbol
-
identifier
i
symbol
;
identifier
NewLine
identifier
multiplica
symbol
[
identifier
k
symbol
]
symbol
[
integerConstant
256
symbol
-
integerConstant
1
symbol
]
symbol
=
integerConstant
256
symbol
-
identifier
k
symbol
;
identifier
NewLine
identifier
multiplica
symbol
[
identifier
k
symbol
]
symbol
[
integerConstant
256
symbol
-
identifier
i
symbol
]
symbol
=
integerConstant
256
symbol
-
identifier
j
symbol
;
identifier
NewLine
identifier
multiplica
symbol
[
identifier
k
symbol
]
symbol
[
integerConstant
256
symbol
-
identifier
j
symbol
]
symbol
=
identifier
i
symbol
;
identifier
NewLine
identifier
multiplica
symbol
[
identifier
k
symbol
]
symbol
[
integerConstant
256
symbol
-
identifier
k
symbol
]
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
identifier
NewLine
identifier
multiplica
symbol
[
integerConstant
256
symbol
-
integerConstant
1
symbol
]
symbol
[
integerConstant
256
symbol
-
integerConstant
1
symbol
]
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
identifier
multiplica
symbol
[
integerConstant
256
symbol
-
integerConstant
1
symbol
]
symbol
[
integerConstant
256
symbol
-
identifier
i
symbol
]
symbol
=
identifier
i
symbol
;
identifier
NewLine
identifier
multiplica
symbol
[
integerConstant
256
symbol
-
integerConstant
1
symbol
]
symbol
[
integerConstant
256
symbol
-
identifier
j
symbol
]
symbol
=
identifier
j
symbol
;
identifier
NewLine
identifier
multiplica
symbol
[
integerConstant
256
symbol
-
integerConstant
1
symbol
]
symbol
[
integerConstant
256
symbol
-
identifier
k
symbol
]
symbol
=
identifier
k
symbol
;
identifier
NewLine
identifier
multiplica
symbol
[
integerConstant
256
symbol
-
identifier
i
symbol
]
symbol
[
integerConstant
256
symbol
-
integerConstant
1
symbol
]
symbol
=
identifier
i
symbol
;
identifier
NewLine
identifier
multiplica
symbol
[
integerConstant
256
symbol
-
identifier
i
symbol
]
symbol
[
integerConstant
256
symbol
-
identifier
i
symbol
]
symbol
=
integerConstant
256
symbol
-
integerConstant
1
symbol
;
identifier
NewLine
identifier
multiplica
symbol
[
integerConstant
256
symbol
-
identifier
i
symbol
]
symbol
[
integerConstant
256
symbol
-
identifier
j
symbol
]
symbol
=
identifier
k
symbol
;
identifier
NewLine
identifier
multiplica
symbol
[
integerConstant
256
symbol
-
identifier
i
symbol
]
symbol
[
integerConstant
256
symbol
-
identifier
k
symbol
]
symbol
=
integerConstant
256
symbol
-
identifier
j
symbol
;
identifier
NewLine
identifier
multiplica
symbol
[
integerConstant
256
symbol
-
identifier
j
symbol
]
symbol
[
integerConstant
256
symbol
-
integerConstant
1
symbol
]
symbol
=
identifier
j
symbol
;
identifier
NewLine
identifier
multiplica
symbol
[
integerConstant
256
symbol
-
identifier
j
symbol
]
symbol
[
integerConstant
256
symbol
-
identifier
i
symbol
]
symbol
=
integerConstant
256
symbol
-
identifier
k
symbol
;
identifier
NewLine
identifier
multiplica
symbol
[
integerConstant
256
symbol
-
identifier
j
symbol
]
symbol
[
integerConstant
256
symbol
-
identifier
j
symbol
]
symbol
=
integerConstant
256
symbol
-
integerConstant
1
symbol
;
identifier
NewLine
identifier
multiplica
symbol
[
integerConstant
256
symbol
-
identifier
j
symbol
]
symbol
[
integerConstant
256
symbol
-
identifier
k
symbol
]
symbol
=
identifier
i
symbol
;
identifier
NewLine
identifier
multiplica
symbol
[
integerConstant
256
symbol
-
identifier
k
symbol
]
symbol
[
integerConstant
256
symbol
-
integerConstant
1
symbol
]
symbol
=
identifier
k
symbol
;
identifier
NewLine
identifier
multiplica
symbol
[
integerConstant
256
symbol
-
identifier
k
symbol
]
symbol
[
integerConstant
256
symbol
-
identifier
i
symbol
]
symbol
=
identifier
j
symbol
;
identifier
NewLine
identifier
multiplica
symbol
[
integerConstant
256
symbol
-
identifier
k
symbol
]
symbol
[
integerConstant
256
symbol
-
identifier
j
symbol
]
symbol
=
integerConstant
256
symbol
-
identifier
i
symbol
;
identifier
NewLine
identifier
multiplica
symbol
[
integerConstant
256
symbol
-
identifier
k
symbol
]
symbol
[
integerConstant
256
symbol
-
identifier
k
symbol
]
symbol
=
integerConstant
256
symbol
-
integerConstant
1
symbol
;
identifier
NewLine
keyword
int
identifier
T
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
T
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
t
symbol
=
integerConstant
0
symbol
;
identifier
t
symbol
<
identifier
T
symbol
;
symbol
+
symbol
+
identifier
t
symbol
)
symbol
{
identifier
NewLine
identifier
lint
identifier
L
symbol
,
identifier
X
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
L
symbol
>
symbol
>
identifier
X
symbol
;
identifier
NewLine
identifier
string
identifier
s
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
s
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
atual
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
identifier
bool
identifier
hasI
symbol
=
keyword
false
symbol
;
identifier
NewLine
identifier
bool
identifier
hasJ
symbol
=
keyword
false
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
size
symbol
(
identifier
s
symbol
)
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
symbol
{
identifier
NewLine
identifier
atual
symbol
=
identifier
multiplica
symbol
[
identifier
atual
symbol
]
symbol
[
symbol
(
keyword
int
symbol
)
identifier
s
symbol
[
identifier
i
symbol
]
symbol
]
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
atual
symbol
=
symbol
=
identifier
i
symbol
)
symbol
{
identifier
NewLine
identifier
hasI
symbol
=
keyword
true
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
atual
symbol
=
symbol
=
identifier
k
symbol
&
symbol
&
identifier
hasI
symbol
)
symbol
{
identifier
NewLine
identifier
hasJ
symbol
=
keyword
true
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
atual
symbol
=
symbol
=
integerConstant
1
symbol
)
symbol
{
identifier
NewLine
identifier
cout
symbol
<
symbol
<
stringConstant
Case #
symbol
<
symbol
<
identifier
t
symbol
+
integerConstant
1
symbol
<
symbol
<
stringConstant
: NO
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
symbol
}
keyword
else
keyword
if
symbol
(
identifier
atual
symbol
=
symbol
=
integerConstant
256
symbol
-
integerConstant
1
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
X
integerConstant
2
symbol
=
symbol
=
integerConstant
0
symbol
)
symbol
{
identifier
NewLine
identifier
cout
symbol
<
symbol
<
stringConstant
Case #
symbol
<
symbol
<
identifier
t
symbol
+
integerConstant
1
symbol
<
symbol
<
stringConstant
: NO
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
symbol
}
keyword
else
keyword
if
symbol
(
identifier
X
symbol
=
symbol
=
integerConstant
1
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
hasI
symbol
&
symbol
&
identifier
hasJ
symbol
)
symbol
{
identifier
NewLine
identifier
cout
symbol
<
symbol
<
stringConstant
Case #
symbol
<
symbol
<
identifier
t
symbol
+
integerConstant
1
symbol
<
symbol
<
stringConstant
: YES
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
symbol
}
keyword
else
symbol
{
identifier
NewLine
identifier
cout
symbol
<
symbol
<
stringConstant
Case #
symbol
<
symbol
<
identifier
t
symbol
+
integerConstant
1
symbol
<
symbol
<
stringConstant
: NO
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
keyword
else
symbol
{
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
size
symbol
(
identifier
s
symbol
)
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
symbol
{
identifier
NewLine
identifier
atual
symbol
=
identifier
multiplica
symbol
[
identifier
atual
symbol
]
symbol
[
symbol
(
keyword
int
symbol
)
identifier
s
symbol
[
identifier
i
symbol
]
symbol
]
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
atual
symbol
=
symbol
=
identifier
i
symbol
)
symbol
{
identifier
NewLine
identifier
hasI
symbol
=
keyword
true
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
atual
symbol
=
symbol
=
identifier
k
symbol
&
symbol
&
identifier
hasI
symbol
)
symbol
{
identifier
NewLine
identifier
hasJ
symbol
=
keyword
true
symbol
;
identifier
NewLine
identifier
break
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
hasJ
symbol
)
symbol
{
identifier
NewLine
identifier
cout
symbol
<
symbol
<
stringConstant
Case #
symbol
<
symbol
<
identifier
t
symbol
+
integerConstant
1
symbol
<
symbol
<
stringConstant
: YES
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
symbol
}
keyword
else
keyword
if
symbol
(
identifier
hasI
symbol
)
symbol
{
identifier
NewLine
identifier
cout
symbol
<
symbol
<
stringConstant
Case #
symbol
<
symbol
<
identifier
t
symbol
+
integerConstant
1
symbol
<
symbol
<
stringConstant
: NO
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
symbol
}
keyword
else
symbol
{
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
size
symbol
(
identifier
s
symbol
)
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
symbol
{
identifier
NewLine
identifier
atual
symbol
=
identifier
multiplica
symbol
[
identifier
atual
symbol
]
symbol
[
symbol
(
keyword
int
symbol
)
identifier
s
symbol
[
identifier
i
symbol
]
symbol
]
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
atual
symbol
=
symbol
=
identifier
k
symbol
)
symbol
{
identifier
NewLine
identifier
hasJ
symbol
=
keyword
true
symbol
;
identifier
NewLine
identifier
break
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
hasJ
symbol
)
symbol
{
identifier
NewLine
identifier
cout
symbol
<
symbol
<
stringConstant
Case #
symbol
<
symbol
<
identifier
t
symbol
+
integerConstant
1
symbol
<
symbol
<
stringConstant
: YES
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
symbol
}
keyword
else
keyword
if
symbol
(
identifier
X
symbol
=
symbol
=
integerConstant
3
symbol
)
symbol
{
identifier
NewLine
identifier
cout
symbol
<
symbol
<
stringConstant
Case #
symbol
<
symbol
<
identifier
t
symbol
+
integerConstant
1
symbol
<
symbol
<
stringConstant
: NO
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
symbol
}
keyword
else
symbol
{
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
size
symbol
(
identifier
s
symbol
)
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
symbol
{
identifier
NewLine
identifier
atual
symbol
=
identifier
multiplica
symbol
[
identifier
atual
symbol
]
symbol
[
symbol
(
keyword
int
symbol
)
identifier
s
symbol
[
identifier
i
symbol
]
symbol
]
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
atual
symbol
=
symbol
=
identifier
k
symbol
)
symbol
{
identifier
NewLine
identifier
hasJ
symbol
=
keyword
true
symbol
;
identifier
NewLine
identifier
break
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
hasJ
symbol
)
symbol
{
identifier
NewLine
identifier
cout
symbol
<
symbol
<
stringConstant
Case #
symbol
<
symbol
<
identifier
t
symbol
+
integerConstant
1
symbol
<
symbol
<
stringConstant
: YES
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
symbol
}
keyword
else
symbol
{
identifier
NewLine
identifier
cout
symbol
<
symbol
<
stringConstant
Case #
symbol
<
symbol
<
identifier
t
symbol
+
integerConstant
1
symbol
<
symbol
<
stringConstant
: NO
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
keyword
else
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
X
integerConstant
4
symbol
=
integerConstant
2
symbol
)
symbol
{
identifier
NewLine
identifier
cout
symbol
<
symbol
<
stringConstant
Case #
symbol
<
symbol
<
identifier
t
symbol
+
integerConstant
1
symbol
<
symbol
<
stringConstant
: NO
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
symbol
}
keyword
else
symbol
{
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
size
symbol
(
identifier
s
symbol
)
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
symbol
{
identifier
NewLine
identifier
atual
symbol
=
identifier
multiplica
symbol
[
identifier
atual
symbol
]
symbol
[
symbol
(
keyword
int
symbol
)
identifier
s
symbol
[
identifier
i
symbol
]
symbol
]
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
atual
symbol
=
symbol
=
identifier
i
symbol
)
symbol
{
identifier
NewLine
identifier
hasI
symbol
=
keyword
true
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
atual
symbol
=
symbol
=
identifier
k
symbol
&
symbol
&
identifier
hasI
symbol
)
symbol
{
identifier
NewLine
identifier
hasJ
symbol
=
keyword
true
symbol
;
identifier
NewLine
identifier
break
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
hasJ
symbol
)
symbol
{
identifier
NewLine
identifier
cout
symbol
<
symbol
<
stringConstant
Case #
symbol
<
symbol
<
identifier
t
symbol
+
integerConstant
1
symbol
<
symbol
<
stringConstant
: YES
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
symbol
}
keyword
else
keyword
if
symbol
(
identifier
X
symbol
=
symbol
=
integerConstant
2
symbol
)
symbol
{
identifier
NewLine
identifier
cout
symbol
<
symbol
<
stringConstant
Case #
symbol
<
symbol
<
identifier
t
symbol
+
integerConstant
1
symbol
<
symbol
<
stringConstant
: NO
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
symbol
}
keyword
else
symbol
{
identifier
NewLine
identifier
s
symbol
+
symbol
=
identifier
s
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
size
symbol
(
identifier
s
symbol
)
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
symbol
{
identifier
NewLine
identifier
atual
symbol
=
identifier
multiplica
symbol
[
identifier
atual
symbol
]
symbol
[
symbol
(
keyword
int
symbol
)
identifier
s
symbol
[
identifier
i
symbol
]
symbol
]
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
atual
symbol
=
symbol
=
identifier
i
symbol
)
symbol
{
identifier
NewLine
identifier
hasI
symbol
=
keyword
true
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
atual
symbol
=
symbol
=
identifier
k
symbol
&
symbol
&
identifier
hasI
symbol
)
symbol
{
identifier
NewLine
identifier
hasJ
symbol
=
keyword
true
symbol
;
identifier
NewLine
identifier
break
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
hasJ
symbol
)
symbol
{
identifier
NewLine
identifier
cout
symbol
<
symbol
<
stringConstant
Case #
symbol
<
symbol
<
identifier
t
symbol
+
integerConstant
1
symbol
<
symbol
<
stringConstant
: YES
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
symbol
}
keyword
else
keyword
if
symbol
(
identifier
hasI
symbol
)
symbol
{
identifier
NewLine
identifier
cout
symbol
<
symbol
<
stringConstant
Case #
symbol
<
symbol
<
identifier
t
symbol
+
integerConstant
1
symbol
<
symbol
<
stringConstant
: NO
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
symbol
}
keyword
else
symbol
{
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
size
symbol
(
identifier
s
symbol
)
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
symbol
{
identifier
NewLine
identifier
atual
symbol
=
identifier
multiplica
symbol
[
identifier
atual
symbol
]
symbol
[
symbol
(
keyword
int
symbol
)
identifier
s
symbol
[
identifier
i
symbol
]
symbol
]
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
atual
symbol
=
symbol
=
identifier
k
symbol
)
symbol
{
identifier
NewLine
identifier
hasJ
symbol
=
keyword
true
symbol
;
identifier
NewLine
identifier
break
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
hasJ
symbol
)
symbol
{
identifier
NewLine
identifier
cout
symbol
<
symbol
<
stringConstant
Case #
symbol
<
symbol
<
identifier
t
symbol
+
integerConstant
1
symbol
<
symbol
<
stringConstant
: YES
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
symbol
}
keyword
else
keyword
if
symbol
(
identifier
X
symbol
=
symbol
=
integerConstant
6
symbol
)
symbol
{
identifier
NewLine
identifier
cout
symbol
<
symbol
<
stringConstant
Case #
symbol
<
symbol
<
identifier
t
symbol
+
integerConstant
1
symbol
<
symbol
<
stringConstant
: NO
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
symbol
}
keyword
else
symbol
{
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
size
symbol
(
identifier
s
symbol
)
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
symbol
{
identifier
NewLine
identifier
atual
symbol
=
identifier
multiplica
symbol
[
identifier
atual
symbol
]
symbol
[
symbol
(
keyword
int
symbol
)
identifier
s
symbol
[
identifier
i
symbol
]
symbol
]
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
atual
symbol
=
symbol
=
identifier
k
symbol
)
symbol
{
identifier
NewLine
identifier
hasJ
symbol
=
keyword
true
symbol
;
identifier
NewLine
identifier
break
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
hasJ
symbol
)
symbol
{
identifier
NewLine
identifier
cout
symbol
<
symbol
<
stringConstant
Case #
symbol
<
symbol
<
identifier
t
symbol
+
integerConstant
1
symbol
<
symbol
<
stringConstant
: YES
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
symbol
}
keyword
else
symbol
{
identifier
NewLine
identifier
cout
symbol
<
symbol
<
stringConstant
Case #
symbol
<
symbol
<
identifier
t
symbol
+
integerConstant
1
symbol
<
symbol
<
stringConstant
: NO
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/ilackthatsuperpower.0.cpp file...

identifier
NewLine
identifier
include
symbol
<
identifier
cstdlib
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
stdint
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
iostream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
iomanip
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
utility
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
functional
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
fstream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
sstream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
algorithm
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
vector
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
string
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
map
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
set
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
list
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
math
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
std
identifier
ifstream
identifier
inFile
symbol
;
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
template
symbol
<
identifier
typename
identifier
T
symbol
>
identifier
NewLine
keyword
void
identifier
rd
symbol
(
identifier
T
symbol
&
identifier
x
symbol
)
symbol
{
identifier
inFile
symbol
>
symbol
>
identifier
x
symbol
;
symbol
}
identifier
NewLine
identifier
NewLine
identifier
template
symbol
<
identifier
typename
identifier
T
symbol
,
identifier
typename
symbol
.
symbol
.
symbol
.
identifier
Ts
symbol
>
identifier
NewLine
keyword
void
identifier
rd
symbol
(
identifier
T
symbol
&
identifier
x
symbol
,
identifier
Ts
symbol
&
symbol
.
symbol
.
symbol
.
identifier
xs
symbol
)
symbol
{
identifier
inFile
symbol
>
symbol
>
identifier
x
symbol
;
identifier
rd
symbol
(
identifier
xs
symbol
.
symbol
.
symbol
.
symbol
)
symbol
;
symbol
}
identifier
NewLine
identifier
NewLine
identifier
template
symbol
<
identifier
typename
identifier
T
symbol
>
identifier
NewLine
keyword
void
identifier
rdhelp
symbol
(
identifier
std
identifier
vector
symbol
<
identifier
T
symbol
>
symbol
&
identifier
v
symbol
)
symbol
{
identifier
T
identifier
elt
symbol
;
identifier
inFile
symbol
>
symbol
>
identifier
elt
symbol
;
identifier
v
symbol
.
identifier
push
identifier
back
symbol
(
identifier
elt
symbol
)
symbol
;
symbol
}
identifier
NewLine
identifier
NewLine
identifier
template
symbol
<
identifier
typename
identifier
T
symbol
,
identifier
typename
symbol
.
symbol
.
symbol
.
identifier
Ts
symbol
>
identifier
NewLine
keyword
void
identifier
rdhelp
symbol
(
identifier
std
identifier
vector
symbol
<
identifier
T
symbol
>
symbol
&
identifier
v
symbol
,
identifier
std
identifier
vector
symbol
<
identifier
Ts
symbol
>
symbol
&
symbol
.
symbol
.
symbol
.
identifier
vs
symbol
)
identifier
NewLine
symbol
{
identifier
T
identifier
elt
symbol
;
identifier
inFile
symbol
>
symbol
>
identifier
elt
symbol
;
identifier
v
symbol
.
identifier
push
identifier
back
symbol
(
identifier
elt
symbol
)
symbol
;
identifier
rdhelp
symbol
(
identifier
vs
symbol
.
symbol
.
symbol
.
symbol
)
symbol
;
symbol
}
identifier
NewLine
identifier
NewLine
identifier
template
symbol
<
identifier
typename
identifier
T
symbol
,
identifier
typename
symbol
.
symbol
.
symbol
.
identifier
Ts
symbol
>
identifier
NewLine
keyword
void
identifier
rd
symbol
(
keyword
int
identifier
const
identifier
N
symbol
,
identifier
std
identifier
vector
symbol
<
identifier
T
symbol
>
symbol
&
identifier
v
symbol
,
identifier
std
identifier
vector
symbol
<
identifier
Ts
symbol
>
symbol
&
symbol
.
symbol
.
symbol
.
identifier
vs
symbol
)
identifier
NewLine
symbol
{
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
N
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
symbol
{
identifier
rdhelp
symbol
(
identifier
v
symbol
,
identifier
vs
symbol
.
symbol
.
symbol
.
symbol
)
symbol
;
symbol
}
symbol
}
identifier
NewLine
identifier
NewLine
keyword
void
identifier
prhelp
symbol
(
symbol
)
symbol
{
identifier
std
identifier
cout
symbol
<
symbol
<
stringConstant
\n
symbol
;
symbol
}
identifier
NewLine
identifier
NewLine
identifier
template
symbol
<
identifier
typename
identifier
T
symbol
,
identifier
typename
symbol
.
symbol
.
symbol
.
identifier
Ts
symbol
>
identifier
NewLine
keyword
void
identifier
prhelp
symbol
(
identifier
const
identifier
T
symbol
&
identifier
x
symbol
,
identifier
const
identifier
Ts
symbol
&
symbol
.
symbol
.
symbol
.
identifier
xs
symbol
)
symbol
{
identifier
std
identifier
cout
symbol
<
symbol
<
symbol
<
symbol
<
identifier
x
symbol
;
identifier
prhelp
symbol
(
identifier
xs
symbol
.
symbol
.
symbol
.
symbol
)
symbol
;
symbol
}
identifier
NewLine
identifier
NewLine
keyword
void
identifier
pr
symbol
(
symbol
)
symbol
{
identifier
std
identifier
cout
symbol
<
symbol
<
stringConstant
\n
symbol
;
symbol
}
identifier
NewLine
identifier
NewLine
identifier
template
symbol
<
identifier
typename
identifier
T
symbol
,
identifier
typename
symbol
.
symbol
.
symbol
.
identifier
Ts
symbol
>
identifier
NewLine
keyword
void
identifier
pr
symbol
(
identifier
const
identifier
T
symbol
&
identifier
x
symbol
,
identifier
const
identifier
Ts
symbol
&
symbol
.
symbol
.
symbol
.
identifier
xs
symbol
)
symbol
{
identifier
std
identifier
cout
symbol
<
symbol
<
identifier
x
symbol
;
identifier
prhelp
symbol
(
identifier
xs
symbol
.
symbol
.
symbol
.
symbol
)
symbol
;
symbol
}
identifier
NewLine
identifier
NewLine
identifier
template
symbol
<
identifier
typename
identifier
T
symbol
>
identifier
NewLine
keyword
void
identifier
pr
symbol
(
identifier
std
identifier
vector
symbol
<
identifier
T
symbol
>
identifier
const
symbol
&
identifier
v
symbol
)
identifier
NewLine
symbol
{
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
symbol
(
keyword
int
symbol
)
identifier
v
symbol
.
identifier
size
symbol
(
symbol
)
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
i
symbol
>
integerConstant
0
symbol
)
identifier
std
identifier
cout
symbol
<
symbol
<
symbol
;
identifier
NewLine
identifier
std
identifier
cout
symbol
<
symbol
<
identifier
v
symbol
[
identifier
i
symbol
]
symbol
;
symbol
}
identifier
NewLine
identifier
std
identifier
cout
symbol
<
symbol
<
stringConstant
\n
symbol
;
symbol
}
identifier
NewLine
identifier
NewLine
identifier
template
symbol
<
identifier
typename
identifier
T
symbol
>
identifier
NewLine
keyword
void
identifier
pr
symbol
(
identifier
std
identifier
set
symbol
<
identifier
T
symbol
>
identifier
const
symbol
&
identifier
s
symbol
)
identifier
NewLine
symbol
{
identifier
for
symbol
(
identifier
auto
identifier
it
symbol
=
identifier
s
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
;
identifier
it
symbol
=
identifier
s
symbol
.
identifier
end
symbol
(
symbol
)
symbol
;
symbol
+
symbol
+
identifier
it
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
it
symbol
=
identifier
s
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
)
identifier
std
identifier
cout
symbol
<
symbol
<
symbol
;
identifier
NewLine
identifier
std
identifier
cout
symbol
<
symbol
<
symbol
*
identifier
it
symbol
;
symbol
}
identifier
NewLine
identifier
std
identifier
cout
symbol
<
symbol
<
stringConstant
\n
symbol
;
symbol
}
identifier
NewLine
identifier
NewLine
identifier
template
symbol
<
identifier
typename
identifier
T
symbol
,
identifier
typename
identifier
S
symbol
>
identifier
NewLine
keyword
void
identifier
pr
symbol
(
identifier
std
identifier
map
symbol
<
identifier
T
symbol
,
identifier
S
symbol
>
identifier
const
symbol
&
identifier
m
symbol
)
identifier
NewLine
symbol
{
identifier
for
symbol
(
identifier
auto
identifier
it
symbol
=
identifier
m
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
;
identifier
it
symbol
=
identifier
m
symbol
.
identifier
end
symbol
(
symbol
)
symbol
;
symbol
+
symbol
+
identifier
it
symbol
)
symbol
{
identifier
NewLine
identifier
std
identifier
cout
symbol
<
symbol
<
identifier
it
symbol
-
symbol
>
identifier
first
symbol
<
symbol
<
symbol
<
symbol
<
identifier
it
symbol
-
symbol
>
identifier
second
symbol
<
symbol
<
stringConstant
\n
symbol
;
symbol
}
symbol
}
identifier
NewLine
identifier
NewLine
identifier
template
symbol
<
identifier
typename
identifier
T
symbol
>
identifier
NewLine
identifier
const
identifier
T
symbol
&
identifier
mxeq
symbol
(
identifier
T
symbol
&
identifier
m
symbol
,
identifier
const
identifier
T
symbol
&
identifier
v
symbol
)
symbol
{
identifier
m
symbol
=
identifier
std
identifier
max
symbol
(
identifier
m
symbol
,
identifier
v
symbol
)
symbol
;
keyword
return
identifier
m
symbol
;
symbol
}
identifier
NewLine
identifier
NewLine
identifier
template
symbol
<
identifier
typename
identifier
T
symbol
>
identifier
NewLine
identifier
const
identifier
T
symbol
&
identifier
mneq
symbol
(
identifier
T
symbol
&
identifier
m
symbol
,
identifier
const
identifier
T
symbol
&
identifier
v
symbol
)
symbol
{
identifier
m
symbol
=
identifier
std
identifier
min
symbol
(
identifier
m
symbol
,
identifier
v
symbol
)
symbol
;
keyword
return
identifier
m
symbol
;
symbol
}
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
NewLine
keyword
void
identifier
setup
symbol
(
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
NewLine
keyword
void
identifier
processCase
symbol
(
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
int
identifier
n
symbol
;
identifier
NewLine
identifier
std
identifier
string
identifier
s
symbol
;
identifier
NewLine
identifier
rd
symbol
(
identifier
n
symbol
)
symbol
;
identifier
NewLine
identifier
rd
symbol
(
identifier
s
symbol
)
symbol
;
identifier
NewLine
identifier
std
identifier
vector
symbol
<
keyword
int
symbol
>
identifier
v
symbol
(
identifier
n
symbol
+
integerConstant
1
symbol
)
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
symbol
=
identifier
n
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
v
symbol
[
identifier
i
symbol
]
symbol
=
identifier
s
symbol
[
identifier
i
symbol
]
symbol
-
integerConstant
0
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
t
symbol
=
identifier
v
symbol
[
integerConstant
0
symbol
]
symbol
;
identifier
NewLine
keyword
int
identifier
a
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
1
symbol
;
identifier
i
symbol
<
symbol
=
identifier
n
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
v
symbol
[
identifier
i
symbol
]
symbol
&
symbol
&
identifier
t
symbol
<
identifier
i
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
add
symbol
=
identifier
i
symbol
-
identifier
t
symbol
;
identifier
NewLine
identifier
a
symbol
+
symbol
=
identifier
add
symbol
;
identifier
NewLine
identifier
t
symbol
+
symbol
=
identifier
add
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
t
symbol
+
symbol
=
identifier
v
symbol
[
identifier
i
symbol
]
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
pr
symbol
(
identifier
a
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
keyword
int
identifier
argc
symbol
,
keyword
char
identifier
const
symbol
*
identifier
argv
symbol
[
symbol
]
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
argc
symbol
=
integerConstant
2
symbol
)
symbol
{
identifier
pr
symbol
(
stringConstant
Expected one argument
symbol
)
symbol
;
identifier
std
identifier
exit
symbol
(
integerConstant
0
symbol
)
symbol
;
symbol
}
identifier
NewLine
identifier
NewLine
keyword
int
identifier
T
symbol
;
identifier
inFile
symbol
.
identifier
open
symbol
(
identifier
argv
symbol
[
integerConstant
1
symbol
]
symbol
)
symbol
;
identifier
rd
symbol
(
identifier
T
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
identifier
setup
symbol
(
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
identifier
std
identifier
cout
symbol
<
symbol
<
identifier
std
identifier
setprecision
symbol
(
integerConstant
9
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
caseIndex
symbol
=
integerConstant
1
symbol
;
identifier
caseIndex
symbol
<
symbol
=
identifier
T
symbol
;
identifier
caseIndex
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
std
identifier
cout
symbol
<
symbol
<
stringConstant
Case #
symbol
<
symbol
<
identifier
caseIndex
symbol
<
symbol
<
stringConstant
: 
symbol
;
identifier
processCase
symbol
(
symbol
)
symbol
;
symbol
}
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/ilackthatsuperpower.1.cpp file...

identifier
NewLine
identifier
include
symbol
<
identifier
cstdlib
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
stdint
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
iostream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
iomanip
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
utility
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
functional
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
fstream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
sstream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
algorithm
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
vector
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
string
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
map
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
set
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
list
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
math
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
std
identifier
ifstream
identifier
inFile
symbol
;
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
template
symbol
<
identifier
typename
identifier
T
symbol
>
identifier
NewLine
keyword
void
identifier
rd
symbol
(
identifier
T
symbol
&
identifier
x
symbol
)
symbol
{
identifier
inFile
symbol
>
symbol
>
identifier
x
symbol
;
symbol
}
identifier
NewLine
identifier
NewLine
identifier
template
symbol
<
identifier
typename
identifier
T
symbol
,
identifier
typename
symbol
.
symbol
.
symbol
.
identifier
Ts
symbol
>
identifier
NewLine
keyword
void
identifier
rd
symbol
(
identifier
T
symbol
&
identifier
x
symbol
,
identifier
Ts
symbol
&
symbol
.
symbol
.
symbol
.
identifier
xs
symbol
)
symbol
{
identifier
inFile
symbol
>
symbol
>
identifier
x
symbol
;
identifier
rd
symbol
(
identifier
xs
symbol
.
symbol
.
symbol
.
symbol
)
symbol
;
symbol
}
identifier
NewLine
identifier
NewLine
identifier
template
symbol
<
identifier
typename
identifier
T
symbol
>
identifier
NewLine
keyword
void
identifier
rdhelp
symbol
(
identifier
std
identifier
vector
symbol
<
identifier
T
symbol
>
symbol
&
identifier
v
symbol
)
symbol
{
identifier
T
identifier
elt
symbol
;
identifier
inFile
symbol
>
symbol
>
identifier
elt
symbol
;
identifier
v
symbol
.
identifier
push
identifier
back
symbol
(
identifier
elt
symbol
)
symbol
;
symbol
}
identifier
NewLine
identifier
NewLine
identifier
template
symbol
<
identifier
typename
identifier
T
symbol
,
identifier
typename
symbol
.
symbol
.
symbol
.
identifier
Ts
symbol
>
identifier
NewLine
keyword
void
identifier
rdhelp
symbol
(
identifier
std
identifier
vector
symbol
<
identifier
T
symbol
>
symbol
&
identifier
v
symbol
,
identifier
std
identifier
vector
symbol
<
identifier
Ts
symbol
>
symbol
&
symbol
.
symbol
.
symbol
.
identifier
vs
symbol
)
identifier
NewLine
symbol
{
identifier
T
identifier
elt
symbol
;
identifier
inFile
symbol
>
symbol
>
identifier
elt
symbol
;
identifier
v
symbol
.
identifier
push
identifier
back
symbol
(
identifier
elt
symbol
)
symbol
;
identifier
rdhelp
symbol
(
identifier
vs
symbol
.
symbol
.
symbol
.
symbol
)
symbol
;
symbol
}
identifier
NewLine
identifier
NewLine
identifier
template
symbol
<
identifier
typename
identifier
T
symbol
,
identifier
typename
symbol
.
symbol
.
symbol
.
identifier
Ts
symbol
>
identifier
NewLine
keyword
void
identifier
rd
symbol
(
keyword
int
identifier
const
identifier
N
symbol
,
identifier
std
identifier
vector
symbol
<
identifier
T
symbol
>
symbol
&
identifier
v
symbol
,
identifier
std
identifier
vector
symbol
<
identifier
Ts
symbol
>
symbol
&
symbol
.
symbol
.
symbol
.
identifier
vs
symbol
)
identifier
NewLine
symbol
{
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
N
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
symbol
{
identifier
rdhelp
symbol
(
identifier
v
symbol
,
identifier
vs
symbol
.
symbol
.
symbol
.
symbol
)
symbol
;
symbol
}
symbol
}
identifier
NewLine
identifier
NewLine
keyword
void
identifier
prhelp
symbol
(
symbol
)
symbol
{
identifier
std
identifier
cout
symbol
<
symbol
<
stringConstant
\n
symbol
;
symbol
}
identifier
NewLine
identifier
NewLine
identifier
template
symbol
<
identifier
typename
identifier
T
symbol
,
identifier
typename
symbol
.
symbol
.
symbol
.
identifier
Ts
symbol
>
identifier
NewLine
keyword
void
identifier
prhelp
symbol
(
identifier
const
identifier
T
symbol
&
identifier
x
symbol
,
identifier
const
identifier
Ts
symbol
&
symbol
.
symbol
.
symbol
.
identifier
xs
symbol
)
symbol
{
identifier
std
identifier
cout
symbol
<
symbol
<
symbol
<
symbol
<
identifier
x
symbol
;
identifier
prhelp
symbol
(
identifier
xs
symbol
.
symbol
.
symbol
.
symbol
)
symbol
;
symbol
}
identifier
NewLine
identifier
NewLine
keyword
void
identifier
pr
symbol
(
symbol
)
symbol
{
identifier
std
identifier
cout
symbol
<
symbol
<
stringConstant
\n
symbol
;
symbol
}
identifier
NewLine
identifier
NewLine
identifier
template
symbol
<
identifier
typename
identifier
T
symbol
,
identifier
typename
symbol
.
symbol
.
symbol
.
identifier
Ts
symbol
>
identifier
NewLine
keyword
void
identifier
pr
symbol
(
identifier
const
identifier
T
symbol
&
identifier
x
symbol
,
identifier
const
identifier
Ts
symbol
&
symbol
.
symbol
.
symbol
.
identifier
xs
symbol
)
symbol
{
identifier
std
identifier
cout
symbol
<
symbol
<
identifier
x
symbol
;
identifier
prhelp
symbol
(
identifier
xs
symbol
.
symbol
.
symbol
.
symbol
)
symbol
;
symbol
}
identifier
NewLine
identifier
NewLine
identifier
template
symbol
<
identifier
typename
identifier
T
symbol
>
identifier
NewLine
keyword
void
identifier
pr
symbol
(
identifier
std
identifier
vector
symbol
<
identifier
T
symbol
>
identifier
const
symbol
&
identifier
v
symbol
)
identifier
NewLine
symbol
{
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
symbol
(
keyword
int
symbol
)
identifier
v
symbol
.
identifier
size
symbol
(
symbol
)
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
i
symbol
>
integerConstant
0
symbol
)
identifier
std
identifier
cout
symbol
<
symbol
<
symbol
;
identifier
NewLine
identifier
std
identifier
cout
symbol
<
symbol
<
identifier
v
symbol
[
identifier
i
symbol
]
symbol
;
symbol
}
identifier
NewLine
identifier
std
identifier
cout
symbol
<
symbol
<
stringConstant
\n
symbol
;
symbol
}
identifier
NewLine
identifier
NewLine
identifier
template
symbol
<
identifier
typename
identifier
T
symbol
>
identifier
NewLine
keyword
void
identifier
pr
symbol
(
identifier
std
identifier
set
symbol
<
identifier
T
symbol
>
identifier
const
symbol
&
identifier
s
symbol
)
identifier
NewLine
symbol
{
identifier
for
symbol
(
identifier
auto
identifier
it
symbol
=
identifier
s
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
;
identifier
it
symbol
=
identifier
s
symbol
.
identifier
end
symbol
(
symbol
)
symbol
;
symbol
+
symbol
+
identifier
it
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
it
symbol
=
identifier
s
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
)
identifier
std
identifier
cout
symbol
<
symbol
<
symbol
;
identifier
NewLine
identifier
std
identifier
cout
symbol
<
symbol
<
symbol
*
identifier
it
symbol
;
symbol
}
identifier
NewLine
identifier
std
identifier
cout
symbol
<
symbol
<
stringConstant
\n
symbol
;
symbol
}
identifier
NewLine
identifier
NewLine
identifier
template
symbol
<
identifier
typename
identifier
T
symbol
,
identifier
typename
identifier
S
symbol
>
identifier
NewLine
keyword
void
identifier
pr
symbol
(
identifier
std
identifier
map
symbol
<
identifier
T
symbol
,
identifier
S
symbol
>
identifier
const
symbol
&
identifier
m
symbol
)
identifier
NewLine
symbol
{
identifier
for
symbol
(
identifier
auto
identifier
it
symbol
=
identifier
m
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
;
identifier
it
symbol
=
identifier
m
symbol
.
identifier
end
symbol
(
symbol
)
symbol
;
symbol
+
symbol
+
identifier
it
symbol
)
symbol
{
identifier
NewLine
identifier
std
identifier
cout
symbol
<
symbol
<
identifier
it
symbol
-
symbol
>
identifier
first
symbol
<
symbol
<
symbol
<
symbol
<
identifier
it
symbol
-
symbol
>
identifier
second
symbol
<
symbol
<
stringConstant
\n
symbol
;
symbol
}
symbol
}
identifier
NewLine
identifier
NewLine
identifier
template
symbol
<
identifier
typename
identifier
T
symbol
>
identifier
NewLine
identifier
const
identifier
T
symbol
&
identifier
mxeq
symbol
(
identifier
T
symbol
&
identifier
m
symbol
,
identifier
const
identifier
T
symbol
&
identifier
v
symbol
)
symbol
{
identifier
m
symbol
=
identifier
std
identifier
max
symbol
(
identifier
m
symbol
,
identifier
v
symbol
)
symbol
;
keyword
return
identifier
m
symbol
;
symbol
}
identifier
NewLine
identifier
NewLine
identifier
template
symbol
<
identifier
typename
identifier
T
symbol
>
identifier
NewLine
identifier
const
identifier
T
symbol
&
identifier
mneq
symbol
(
identifier
T
symbol
&
identifier
m
symbol
,
identifier
const
identifier
T
symbol
&
identifier
v
symbol
)
symbol
{
identifier
m
symbol
=
identifier
std
identifier
min
symbol
(
identifier
m
symbol
,
identifier
v
symbol
)
symbol
;
keyword
return
identifier
m
symbol
;
symbol
}
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
NewLine
keyword
void
identifier
setup
symbol
(
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
NewLine
keyword
void
identifier
processCase
symbol
(
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
int
identifier
D
symbol
;
identifier
NewLine
identifier
std
identifier
vector
symbol
<
keyword
int
symbol
>
identifier
P
symbol
;
identifier
NewLine
identifier
NewLine
identifier
rd
symbol
(
identifier
D
symbol
)
symbol
;
identifier
NewLine
identifier
rd
symbol
(
identifier
D
symbol
,
identifier
P
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
mm
symbol
=
symbol
*
identifier
std
identifier
max
identifier
element
symbol
(
identifier
P
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
,
identifier
P
symbol
.
identifier
end
symbol
(
symbol
)
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
minm
symbol
=
identifier
mm
symbol
;
identifier
NewLine
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
m
symbol
=
integerConstant
1
symbol
;
identifier
m
symbol
<
symbol
=
identifier
mm
symbol
;
identifier
m
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
tm
symbol
=
identifier
m
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
D
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
symbol
{
identifier
NewLine
identifier
tm
symbol
+
symbol
=
symbol
(
identifier
P
symbol
[
identifier
i
symbol
]
symbol
+
identifier
m
symbol
-
integerConstant
1
symbol
)
symbol
/
identifier
m
symbol
-
integerConstant
1
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
mneq
symbol
(
identifier
minm
symbol
,
identifier
tm
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
pr
symbol
(
identifier
minm
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
keyword
int
identifier
argc
symbol
,
keyword
char
identifier
const
symbol
*
identifier
argv
symbol
[
symbol
]
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
argc
symbol
=
integerConstant
2
symbol
)
symbol
{
identifier
pr
symbol
(
stringConstant
Expected one argument
symbol
)
symbol
;
identifier
std
identifier
exit
symbol
(
integerConstant
0
symbol
)
symbol
;
symbol
}
identifier
NewLine
identifier
NewLine
keyword
int
identifier
T
symbol
;
identifier
inFile
symbol
.
identifier
open
symbol
(
identifier
argv
symbol
[
integerConstant
1
symbol
]
symbol
)
symbol
;
identifier
rd
symbol
(
identifier
T
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
identifier
setup
symbol
(
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
identifier
std
identifier
cout
symbol
<
symbol
<
identifier
std
identifier
setprecision
symbol
(
integerConstant
9
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
caseIndex
symbol
=
integerConstant
1
symbol
;
identifier
caseIndex
symbol
<
symbol
=
identifier
T
symbol
;
identifier
caseIndex
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
std
identifier
cout
symbol
<
symbol
<
stringConstant
Case #
symbol
<
symbol
<
identifier
caseIndex
symbol
<
symbol
<
stringConstant
: 
symbol
;
identifier
processCase
symbol
(
symbol
)
symbol
;
symbol
}
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/ilackthatsuperpower.2.cpp file...

identifier
NewLine
identifier
include
symbol
<
identifier
cstdlib
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
stdint
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
iostream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
iomanip
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
utility
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
functional
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
fstream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
sstream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
algorithm
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
vector
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
string
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
map
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
set
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
list
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
math
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
std
identifier
ifstream
identifier
inFile
symbol
;
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
template
symbol
<
identifier
typename
identifier
T
symbol
>
identifier
NewLine
keyword
void
identifier
rd
symbol
(
identifier
T
symbol
&
identifier
x
symbol
)
symbol
{
identifier
inFile
symbol
>
symbol
>
identifier
x
symbol
;
symbol
}
identifier
NewLine
identifier
NewLine
identifier
template
symbol
<
identifier
typename
identifier
T
symbol
,
identifier
typename
symbol
.
symbol
.
symbol
.
identifier
Ts
symbol
>
identifier
NewLine
keyword
void
identifier
rd
symbol
(
identifier
T
symbol
&
identifier
x
symbol
,
identifier
Ts
symbol
&
symbol
.
symbol
.
symbol
.
identifier
xs
symbol
)
symbol
{
identifier
inFile
symbol
>
symbol
>
identifier
x
symbol
;
identifier
rd
symbol
(
identifier
xs
symbol
.
symbol
.
symbol
.
symbol
)
symbol
;
symbol
}
identifier
NewLine
identifier
NewLine
identifier
template
symbol
<
identifier
typename
identifier
T
symbol
>
identifier
NewLine
keyword
void
identifier
rdhelp
symbol
(
identifier
std
identifier
vector
symbol
<
identifier
T
symbol
>
symbol
&
identifier
v
symbol
)
symbol
{
identifier
T
identifier
elt
symbol
;
identifier
inFile
symbol
>
symbol
>
identifier
elt
symbol
;
identifier
v
symbol
.
identifier
push
identifier
back
symbol
(
identifier
elt
symbol
)
symbol
;
symbol
}
identifier
NewLine
identifier
NewLine
identifier
template
symbol
<
identifier
typename
identifier
T
symbol
,
identifier
typename
symbol
.
symbol
.
symbol
.
identifier
Ts
symbol
>
identifier
NewLine
keyword
void
identifier
rdhelp
symbol
(
identifier
std
identifier
vector
symbol
<
identifier
T
symbol
>
symbol
&
identifier
v
symbol
,
identifier
std
identifier
vector
symbol
<
identifier
Ts
symbol
>
symbol
&
symbol
.
symbol
.
symbol
.
identifier
vs
symbol
)
identifier
NewLine
symbol
{
identifier
T
identifier
elt
symbol
;
identifier
inFile
symbol
>
symbol
>
identifier
elt
symbol
;
identifier
v
symbol
.
identifier
push
identifier
back
symbol
(
identifier
elt
symbol
)
symbol
;
identifier
rdhelp
symbol
(
identifier
vs
symbol
.
symbol
.
symbol
.
symbol
)
symbol
;
symbol
}
identifier
NewLine
identifier
NewLine
identifier
template
symbol
<
identifier
typename
identifier
T
symbol
,
identifier
typename
symbol
.
symbol
.
symbol
.
identifier
Ts
symbol
>
identifier
NewLine
keyword
void
identifier
rd
symbol
(
keyword
int
identifier
const
identifier
N
symbol
,
identifier
std
identifier
vector
symbol
<
identifier
T
symbol
>
symbol
&
identifier
v
symbol
,
identifier
std
identifier
vector
symbol
<
identifier
Ts
symbol
>
symbol
&
symbol
.
symbol
.
symbol
.
identifier
vs
symbol
)
identifier
NewLine
symbol
{
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
N
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
symbol
{
identifier
rdhelp
symbol
(
identifier
v
symbol
,
identifier
vs
symbol
.
symbol
.
symbol
.
symbol
)
symbol
;
symbol
}
symbol
}
identifier
NewLine
identifier
NewLine
keyword
void
identifier
prhelp
symbol
(
symbol
)
symbol
{
identifier
std
identifier
cout
symbol
<
symbol
<
stringConstant
\n
symbol
;
symbol
}
identifier
NewLine
identifier
NewLine
identifier
template
symbol
<
identifier
typename
identifier
T
symbol
,
identifier
typename
symbol
.
symbol
.
symbol
.
identifier
Ts
symbol
>
identifier
NewLine
keyword
void
identifier
prhelp
symbol
(
identifier
const
identifier
T
symbol
&
identifier
x
symbol
,
identifier
const
identifier
Ts
symbol
&
symbol
.
symbol
.
symbol
.
identifier
xs
symbol
)
symbol
{
identifier
std
identifier
cout
symbol
<
symbol
<
symbol
<
symbol
<
identifier
x
symbol
;
identifier
prhelp
symbol
(
identifier
xs
symbol
.
symbol
.
symbol
.
symbol
)
symbol
;
symbol
}
identifier
NewLine
identifier
NewLine
keyword
void
identifier
pr
symbol
(
symbol
)
symbol
{
identifier
std
identifier
cout
symbol
<
symbol
<
stringConstant
\n
symbol
;
symbol
}
identifier
NewLine
identifier
NewLine
identifier
template
symbol
<
identifier
typename
identifier
T
symbol
,
identifier
typename
symbol
.
symbol
.
symbol
.
identifier
Ts
symbol
>
identifier
NewLine
keyword
void
identifier
pr
symbol
(
identifier
const
identifier
T
symbol
&
identifier
x
symbol
,
identifier
const
identifier
Ts
symbol
&
symbol
.
symbol
.
symbol
.
identifier
xs
symbol
)
symbol
{
identifier
std
identifier
cout
symbol
<
symbol
<
identifier
x
symbol
;
identifier
prhelp
symbol
(
identifier
xs
symbol
.
symbol
.
symbol
.
symbol
)
symbol
;
symbol
}
identifier
NewLine
identifier
NewLine
identifier
template
symbol
<
identifier
typename
identifier
T
symbol
>
identifier
NewLine
keyword
void
identifier
pr
symbol
(
identifier
std
identifier
vector
symbol
<
identifier
T
symbol
>
identifier
const
symbol
&
identifier
v
symbol
)
identifier
NewLine
symbol
{
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
symbol
(
keyword
int
symbol
)
identifier
v
symbol
.
identifier
size
symbol
(
symbol
)
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
i
symbol
>
integerConstant
0
symbol
)
identifier
std
identifier
cout
symbol
<
symbol
<
symbol
;
identifier
NewLine
identifier
std
identifier
cout
symbol
<
symbol
<
identifier
v
symbol
[
identifier
i
symbol
]
symbol
;
symbol
}
identifier
NewLine
identifier
std
identifier
cout
symbol
<
symbol
<
stringConstant
\n
symbol
;
symbol
}
identifier
NewLine
identifier
NewLine
identifier
template
symbol
<
identifier
typename
identifier
T
symbol
>
identifier
NewLine
keyword
void
identifier
pr
symbol
(
identifier
std
identifier
set
symbol
<
identifier
T
symbol
>
identifier
const
symbol
&
identifier
s
symbol
)
identifier
NewLine
symbol
{
identifier
for
symbol
(
identifier
auto
identifier
it
symbol
=
identifier
s
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
;
identifier
it
symbol
=
identifier
s
symbol
.
identifier
end
symbol
(
symbol
)
symbol
;
symbol
+
symbol
+
identifier
it
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
it
symbol
=
identifier
s
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
)
identifier
std
identifier
cout
symbol
<
symbol
<
symbol
;
identifier
NewLine
identifier
std
identifier
cout
symbol
<
symbol
<
symbol
*
identifier
it
symbol
;
symbol
}
identifier
NewLine
identifier
std
identifier
cout
symbol
<
symbol
<
stringConstant
\n
symbol
;
symbol
}
identifier
NewLine
identifier
NewLine
identifier
template
symbol
<
identifier
typename
identifier
T
symbol
,
identifier
typename
identifier
S
symbol
>
identifier
NewLine
keyword
void
identifier
pr
symbol
(
identifier
std
identifier
map
symbol
<
identifier
T
symbol
,
identifier
S
symbol
>
identifier
const
symbol
&
identifier
m
symbol
)
identifier
NewLine
symbol
{
identifier
for
symbol
(
identifier
auto
identifier
it
symbol
=
identifier
m
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
;
identifier
it
symbol
=
identifier
m
symbol
.
identifier
end
symbol
(
symbol
)
symbol
;
symbol
+
symbol
+
identifier
it
symbol
)
symbol
{
identifier
NewLine
identifier
std
identifier
cout
symbol
<
symbol
<
identifier
it
symbol
-
symbol
>
identifier
first
symbol
<
symbol
<
symbol
<
symbol
<
identifier
it
symbol
-
symbol
>
identifier
second
symbol
<
symbol
<
stringConstant
\n
symbol
;
symbol
}
symbol
}
identifier
NewLine
identifier
NewLine
identifier
template
symbol
<
identifier
typename
identifier
T
symbol
>
identifier
NewLine
identifier
const
identifier
T
symbol
&
identifier
mxeq
symbol
(
identifier
T
symbol
&
identifier
m
symbol
,
identifier
const
identifier
T
symbol
&
identifier
v
symbol
)
symbol
{
identifier
m
symbol
=
identifier
std
identifier
max
symbol
(
identifier
m
symbol
,
identifier
v
symbol
)
symbol
;
keyword
return
identifier
m
symbol
;
symbol
}
identifier
NewLine
identifier
NewLine
identifier
template
symbol
<
identifier
typename
identifier
T
symbol
>
identifier
NewLine
identifier
const
identifier
T
symbol
&
identifier
mneq
symbol
(
identifier
T
symbol
&
identifier
m
symbol
,
identifier
const
identifier
T
symbol
&
identifier
v
symbol
)
symbol
{
identifier
m
symbol
=
identifier
std
identifier
min
symbol
(
identifier
m
symbol
,
identifier
v
symbol
)
symbol
;
keyword
return
identifier
m
symbol
;
symbol
}
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
NewLine
keyword
void
identifier
setup
symbol
(
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
char
identifier
prod
symbol
(
keyword
char
identifier
q1
symbol
,
keyword
int
symbol
&
identifier
qs
symbol
,
keyword
char
identifier
q2
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
q1
symbol
=
symbol
=
integerConstant
1
symbol
)
symbol
{
identifier
NewLine
keyword
return
identifier
q2
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
q2
symbol
=
symbol
=
integerConstant
1
symbol
)
symbol
{
identifier
NewLine
keyword
return
identifier
q1
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
q1
symbol
=
symbol
=
identifier
q2
symbol
)
symbol
{
identifier
NewLine
identifier
qs
symbol
=
symbol
-
identifier
qs
symbol
;
identifier
NewLine
keyword
return
integerConstant
1
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
q1
symbol
=
symbol
=
identifier
i
symbol
&
symbol
&
identifier
q2
symbol
=
symbol
=
identifier
j
symbol
)
symbol
{
identifier
NewLine
keyword
return
identifier
k
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
q1
symbol
=
symbol
=
identifier
i
symbol
&
symbol
&
identifier
q2
symbol
=
symbol
=
identifier
k
symbol
)
symbol
{
identifier
NewLine
identifier
qs
symbol
=
symbol
-
identifier
qs
symbol
;
identifier
NewLine
keyword
return
identifier
j
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
q1
symbol
=
symbol
=
identifier
j
symbol
&
symbol
&
identifier
q2
symbol
=
symbol
=
identifier
i
symbol
)
symbol
{
identifier
NewLine
identifier
qs
symbol
=
symbol
-
identifier
qs
symbol
;
identifier
NewLine
keyword
return
identifier
k
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
q1
symbol
=
symbol
=
identifier
j
symbol
&
symbol
&
identifier
q2
symbol
=
symbol
=
identifier
k
symbol
)
symbol
{
identifier
NewLine
keyword
return
identifier
i
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
q1
symbol
=
symbol
=
identifier
k
symbol
&
symbol
&
identifier
q2
symbol
=
symbol
=
identifier
i
symbol
)
symbol
{
identifier
NewLine
keyword
return
identifier
j
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
q1
symbol
=
symbol
=
identifier
k
symbol
&
symbol
&
identifier
q2
symbol
=
symbol
=
identifier
j
symbol
)
symbol
{
identifier
NewLine
identifier
qs
symbol
=
symbol
-
identifier
qs
symbol
;
identifier
NewLine
keyword
return
identifier
i
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
std
identifier
cout
symbol
<
symbol
<
stringConstant
error\n
symbol
;
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
NewLine
keyword
void
identifier
processCase
symbol
(
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
int64
identifier
t
identifier
L
symbol
,
identifier
X
symbol
;
identifier
NewLine
identifier
std
identifier
string
identifier
s
symbol
,
identifier
c
symbol
,
identifier
p
symbol
;
identifier
NewLine
identifier
std
identifier
vector
symbol
<
keyword
int
symbol
>
identifier
sgn
symbol
;
identifier
NewLine
identifier
NewLine
identifier
rd
symbol
(
identifier
L
symbol
,
identifier
X
symbol
,
identifier
s
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
keyword
if
symbol
(
identifier
X
symbol
>
integerConstant
20
symbol
)
identifier
NewLine
identifier
X
symbol
=
integerConstant
20
symbol
+
identifier
X
integerConstant
4
symbol
;
identifier
NewLine
identifier
NewLine
identifier
c
symbol
=
identifier
s
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
1
symbol
;
identifier
i
symbol
<
identifier
X
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
symbol
{
identifier
NewLine
identifier
c
symbol
=
identifier
c
symbol
+
identifier
s
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
char
identifier
pc
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
keyword
int
identifier
ps
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
identifier
for
symbol
(
identifier
int64
identifier
t
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
symbol
(
identifier
int64
identifier
t
symbol
)
identifier
c
symbol
.
identifier
size
symbol
(
symbol
)
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
symbol
{
identifier
NewLine
identifier
pc
symbol
=
identifier
prod
symbol
(
identifier
pc
symbol
,
identifier
ps
symbol
,
identifier
c
symbol
[
identifier
i
symbol
]
symbol
)
symbol
;
identifier
NewLine
identifier
p
symbol
=
identifier
p
symbol
+
identifier
pc
symbol
;
identifier
NewLine
identifier
sgn
symbol
.
identifier
push
identifier
back
symbol
(
identifier
ps
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
int64
identifier
t
identifier
z
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
NewLine
keyword
while
symbol
(
integerConstant
1
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
p
symbol
[
identifier
z
symbol
]
symbol
=
symbol
=
identifier
i
symbol
&
symbol
&
identifier
sgn
symbol
[
identifier
z
symbol
]
symbol
=
symbol
=
integerConstant
1
symbol
)
symbol
{
identifier
NewLine
identifier
break
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
z
symbol
+
symbol
+
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
z
symbol
=
symbol
=
symbol
(
identifier
int64
identifier
t
symbol
)
identifier
p
symbol
.
identifier
size
symbol
(
symbol
)
symbol
)
symbol
{
identifier
NewLine
identifier
std
identifier
cout
symbol
<
symbol
<
stringConstant
NO\n
symbol
;
identifier
NewLine
keyword
return
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
while
symbol
(
integerConstant
1
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
p
symbol
[
identifier
z
symbol
]
symbol
=
symbol
=
identifier
k
symbol
&
symbol
&
identifier
sgn
symbol
[
identifier
z
symbol
]
symbol
=
symbol
=
integerConstant
1
symbol
)
symbol
{
identifier
NewLine
identifier
break
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
z
symbol
+
symbol
+
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
z
symbol
=
symbol
=
symbol
(
identifier
int64
identifier
t
symbol
)
identifier
p
symbol
.
identifier
size
symbol
(
symbol
)
symbol
)
symbol
{
identifier
NewLine
identifier
std
identifier
cout
symbol
<
symbol
<
stringConstant
NO\n
symbol
;
identifier
NewLine
keyword
return
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
if
symbol
(
identifier
p
symbol
[
identifier
p
symbol
.
identifier
size
symbol
(
symbol
)
symbol
-
integerConstant
1
symbol
]
symbol
=
symbol
=
integerConstant
1
symbol
&
symbol
&
identifier
sgn
symbol
[
identifier
p
symbol
.
identifier
size
symbol
(
symbol
)
symbol
-
integerConstant
1
symbol
]
symbol
=
symbol
=
symbol
-
integerConstant
1
symbol
)
symbol
{
identifier
NewLine
identifier
std
identifier
cout
symbol
<
symbol
<
stringConstant
YES\n
symbol
;
identifier
NewLine
symbol
}
keyword
else
symbol
{
identifier
NewLine
identifier
std
identifier
cout
symbol
<
symbol
<
stringConstant
NO\n
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
keyword
int
identifier
argc
symbol
,
keyword
char
identifier
const
symbol
*
identifier
argv
symbol
[
symbol
]
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
argc
symbol
=
integerConstant
2
symbol
)
symbol
{
identifier
pr
symbol
(
stringConstant
Expected one argument
symbol
)
symbol
;
identifier
std
identifier
exit
symbol
(
integerConstant
0
symbol
)
symbol
;
symbol
}
identifier
NewLine
identifier
NewLine
keyword
int
identifier
T
symbol
;
identifier
inFile
symbol
.
identifier
open
symbol
(
identifier
argv
symbol
[
integerConstant
1
symbol
]
symbol
)
symbol
;
identifier
rd
symbol
(
identifier
T
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
identifier
setup
symbol
(
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
identifier
std
identifier
cout
symbol
<
symbol
<
identifier
std
identifier
setprecision
symbol
(
integerConstant
9
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
caseIndex
symbol
=
integerConstant
1
symbol
;
identifier
caseIndex
symbol
<
symbol
=
identifier
T
symbol
;
identifier
caseIndex
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
std
identifier
cout
symbol
<
symbol
<
stringConstant
Case #
symbol
<
symbol
<
identifier
caseIndex
symbol
<
symbol
<
stringConstant
: 
symbol
;
identifier
processCase
symbol
(
symbol
)
symbol
;
symbol
}
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/iridescent.0.cpp file...

identifier
include
symbol
<
identifier
iostream
symbol
>
identifier
NewLine
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
int
identifier
T
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
T
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
t
symbol
=
integerConstant
1
symbol
;
identifier
t
symbol
<
symbol
=
identifier
T
symbol
;
identifier
t
symbol
+
symbol
+
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
int
identifier
N
symbol
;
identifier
NewLine
identifier
string
identifier
S
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
N
symbol
>
symbol
>
identifier
S
symbol
;
identifier
NewLine
keyword
int
identifier
total
symbol
=
integerConstant
0
symbol
,
identifier
add
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
S
symbol
.
identifier
size
symbol
(
symbol
)
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
while
symbol
(
identifier
S
symbol
[
identifier
i
symbol
]
symbol
=
integerConstant
0
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
while
symbol
(
identifier
total
symbol
<
identifier
i
symbol
)
identifier
NewLine
identifier
total
symbol
+
symbol
+
symbol
,
identifier
add
symbol
+
symbol
+
symbol
;
identifier
NewLine
identifier
S
symbol
[
identifier
i
symbol
]
symbol
-
symbol
-
symbol
;
identifier
NewLine
identifier
total
symbol
+
symbol
+
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
cout
symbol
<
symbol
<
stringConstant
Case #
symbol
<
symbol
<
identifier
t
symbol
<
symbol
<
stringConstant
: 
symbol
<
symbol
<
identifier
add
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/iridescent.1.cpp file...

identifier
include
symbol
<
identifier
bits
symbol
/
identifier
stdc
symbol
+
symbol
+
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
A
symbol
[
integerConstant
1005
symbol
]
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
int
identifier
T
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
T
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
t
symbol
=
integerConstant
1
symbol
;
identifier
t
symbol
<
symbol
=
identifier
T
symbol
;
identifier
t
symbol
+
symbol
+
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
int
identifier
N
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
N
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
1
symbol
;
identifier
i
symbol
<
symbol
=
identifier
N
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
cin
symbol
>
symbol
>
identifier
A
symbol
[
identifier
i
symbol
]
symbol
;
identifier
NewLine
keyword
int
identifier
best
symbol
=
integerConstant
1000
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
h
symbol
=
integerConstant
1
symbol
;
identifier
h
symbol
<
symbol
=
integerConstant
1000
symbol
;
identifier
h
symbol
+
symbol
+
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
int
identifier
add
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
1
symbol
;
identifier
i
symbol
<
symbol
=
identifier
N
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
add
symbol
+
symbol
=
symbol
(
identifier
A
symbol
[
identifier
i
symbol
]
symbol
-
integerConstant
1
symbol
)
symbol
/
identifier
h
symbol
;
identifier
NewLine
identifier
best
symbol
=
identifier
min
symbol
(
identifier
best
symbol
,
identifier
h
symbol
+
identifier
add
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: %d\n
symbol
,
identifier
t
symbol
,
identifier
best
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/iridescent.2.cpp file...

identifier
include
symbol
<
identifier
bits
symbol
/
identifier
stdc
symbol
+
symbol
+
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
keyword
char
identifier
mult
symbol
[
integerConstant
4
symbol
]
symbol
[
integerConstant
4
symbol
]
symbol
=
symbol
{
symbol
{
integerConstant
0
symbol
,
integerConstant
1
symbol
,
integerConstant
2
symbol
,
integerConstant
3
symbol
}
symbol
,
symbol
{
integerConstant
1
symbol
,
integerConstant
0
symbol
,
integerConstant
3
symbol
,
integerConstant
2
symbol
}
symbol
,
symbol
{
integerConstant
2
symbol
,
integerConstant
3
symbol
,
integerConstant
0
symbol
,
integerConstant
1
symbol
}
symbol
,
symbol
{
integerConstant
3
symbol
,
integerConstant
2
symbol
,
integerConstant
1
symbol
,
integerConstant
0
symbol
}
symbol
}
symbol
;
identifier
NewLine
keyword
int
identifier
neg
symbol
[
integerConstant
4
symbol
]
symbol
[
integerConstant
4
symbol
]
symbol
=
symbol
{
symbol
{
integerConstant
0
symbol
,
integerConstant
0
symbol
,
integerConstant
0
symbol
,
integerConstant
0
symbol
}
symbol
,
symbol
{
integerConstant
0
symbol
,
integerConstant
1
symbol
,
integerConstant
0
symbol
,
integerConstant
1
symbol
}
symbol
,
symbol
{
integerConstant
0
symbol
,
integerConstant
1
symbol
,
integerConstant
1
symbol
,
integerConstant
0
symbol
}
symbol
,
symbol
{
integerConstant
0
symbol
,
integerConstant
0
symbol
,
integerConstant
1
symbol
,
integerConstant
1
symbol
}
symbol
}
symbol
;
identifier
NewLine
identifier
NewLine
identifier
string
identifier
S
symbol
;
identifier
NewLine
keyword
int
identifier
A
symbol
[
integerConstant
1231231
symbol
]
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
int
identifier
T
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
T
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
t
symbol
=
integerConstant
1
symbol
;
identifier
t
symbol
<
symbol
=
identifier
T
symbol
;
identifier
t
symbol
+
symbol
+
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
int
identifier
L
symbol
;
identifier
NewLine
identifier
long
identifier
long
identifier
X
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
L
symbol
>
symbol
>
identifier
X
symbol
>
symbol
>
identifier
S
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
X
symbol
>
integerConstant
16
symbol
)
identifier
X
symbol
=
integerConstant
16
symbol
+
identifier
X
integerConstant
4
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
X
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
j
symbol
=
integerConstant
0
symbol
;
identifier
j
symbol
<
identifier
L
symbol
;
identifier
j
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
A
symbol
[
identifier
i
symbol
*
identifier
L
symbol
+
identifier
j
symbol
]
symbol
=
symbol
(
identifier
S
symbol
[
identifier
j
symbol
]
symbol
-
identifier
h
symbol
)
symbol
;
identifier
NewLine
keyword
int
identifier
next
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
keyword
int
identifier
sgn
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
keyword
int
identifier
cur
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
L
symbol
*
identifier
X
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
sgn
symbol
=
identifier
neg
symbol
[
identifier
cur
symbol
]
symbol
[
identifier
A
symbol
[
identifier
i
symbol
]
symbol
]
symbol
;
identifier
NewLine
identifier
cur
symbol
=
identifier
mult
symbol
[
identifier
cur
symbol
]
symbol
[
identifier
A
symbol
[
identifier
i
symbol
]
symbol
]
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
next
symbol
<
symbol
=
integerConstant
3
symbol
&
symbol
&
identifier
cur
symbol
=
symbol
=
identifier
next
symbol
&
symbol
&
identifier
sgn
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
next
symbol
+
symbol
+
symbol
;
identifier
NewLine
identifier
cur
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: 
symbol
,
identifier
t
symbol
)
symbol
;
identifier
NewLine
identifier
cout
symbol
<
symbol
<
symbol
(
symbol
(
identifier
next
symbol
=
symbol
=
integerConstant
4
symbol
&
symbol
&
identifier
cur
symbol
&
symbol
&
identifier
sgn
symbol
)
stringConstant
YES\n
stringConstant
NO\n
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/ishraq.0.cpp file...

identifier
include
symbol
<
identifier
bits
symbol
/
identifier
stdc
symbol
+
symbol
+
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
NewLine
identifier
define
identifier
FO
symbol
(
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
symbol
(
identifier
a
symbol
)
symbol
;
identifier
i
symbol
<
symbol
(
identifier
b
symbol
)
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
define
identifier
sz
symbol
(
identifier
v
symbol
)
keyword
int
symbol
(
identifier
v
symbol
.
identifier
size
symbol
(
symbol
)
symbol
)
identifier
NewLine
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
T
symbol
;
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
T
symbol
)
symbol
;
identifier
NewLine
identifier
FO
symbol
(
identifier
Z
symbol
,
integerConstant
1
symbol
,
identifier
T
symbol
+
integerConstant
1
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
n
symbol
;
keyword
char
identifier
buf
symbol
[
integerConstant
2000
symbol
]
symbol
;
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d %s
symbol
,
symbol
&
identifier
n
symbol
,
identifier
buf
symbol
)
symbol
;
identifier
NewLine
keyword
int
identifier
c
symbol
=
integerConstant
0
symbol
,
identifier
res
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
FO
symbol
(
identifier
i
symbol
,
integerConstant
0
symbol
,
identifier
n
symbol
+
integerConstant
1
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
d
symbol
=
identifier
max
symbol
(
integerConstant
0
symbol
,
identifier
i
symbol
-
identifier
c
symbol
)
symbol
;
identifier
NewLine
identifier
res
symbol
+
symbol
=
identifier
d
symbol
;
identifier
c
symbol
+
symbol
=
identifier
d
symbol
;
identifier
NewLine
identifier
c
symbol
+
symbol
=
identifier
buf
symbol
[
identifier
i
symbol
]
symbol
-
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: %d\n
symbol
,
identifier
Z
symbol
,
identifier
res
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/ishraq.1.cpp file...

identifier
include
symbol
<
identifier
bits
symbol
/
identifier
stdc
symbol
+
symbol
+
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
NewLine
identifier
define
identifier
FO
symbol
(
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
symbol
(
identifier
a
symbol
)
symbol
;
identifier
i
symbol
<
symbol
(
identifier
b
symbol
)
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
define
identifier
sz
symbol
(
identifier
v
symbol
)
keyword
int
symbol
(
identifier
v
symbol
.
identifier
size
symbol
(
symbol
)
symbol
)
identifier
NewLine
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
T
symbol
;
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
T
symbol
)
symbol
;
identifier
NewLine
identifier
FO
symbol
(
identifier
Z
symbol
,
integerConstant
1
symbol
,
identifier
T
symbol
+
integerConstant
1
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
n
symbol
;
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
n
symbol
)
symbol
;
identifier
NewLine
identifier
vector
symbol
<
keyword
int
symbol
>
identifier
v
symbol
(
identifier
n
symbol
)
symbol
;
identifier
NewLine
identifier
FO
symbol
(
identifier
i
symbol
,
integerConstant
0
symbol
,
identifier
n
symbol
)
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
v
symbol
[
identifier
i
symbol
]
symbol
)
symbol
;
identifier
NewLine
keyword
int
identifier
res
symbol
=
integerConstant
1
identifier
e9
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
d
symbol
=
integerConstant
1
symbol
;
identifier
d
symbol
<
symbol
=
integerConstant
1000
symbol
;
identifier
d
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
s
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
x
identifier
v
symbol
)
identifier
s
symbol
+
symbol
=
symbol
(
identifier
x
symbol
-
integerConstant
1
symbol
)
symbol
/
identifier
d
symbol
;
identifier
NewLine
identifier
res
symbol
=
identifier
min
symbol
(
identifier
res
symbol
,
identifier
s
symbol
+
identifier
d
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: %d\n
symbol
,
identifier
Z
symbol
,
identifier
res
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/ishraq.2.cpp file...

identifier
include
symbol
<
identifier
bits
symbol
/
identifier
stdc
symbol
+
symbol
+
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
NewLine
identifier
define
identifier
FO
symbol
(
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
symbol
(
identifier
a
symbol
)
symbol
;
identifier
i
symbol
<
symbol
(
identifier
b
symbol
)
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
define
identifier
sz
symbol
(
identifier
v
symbol
)
keyword
int
symbol
(
identifier
v
symbol
.
identifier
size
symbol
(
symbol
)
symbol
)
identifier
NewLine
identifier
NewLine
identifier
define
identifier
O
integerConstant
1
identifier
NewLine
identifier
define
identifier
I
integerConstant
2
identifier
NewLine
identifier
define
identifier
J
integerConstant
3
identifier
NewLine
identifier
define
identifier
K
integerConstant
4
identifier
NewLine
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
identifier
typedef
identifier
long
identifier
long
identifier
ll
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
S
symbol
[
integerConstant
4
symbol
]
symbol
[
integerConstant
4
symbol
]
symbol
=
symbol
{
identifier
NewLine
symbol
{
integerConstant
1
symbol
,
identifier
I
symbol
,
identifier
J
symbol
,
identifier
K
symbol
}
symbol
,
identifier
NewLine
symbol
{
identifier
I
symbol
,
symbol
-
integerConstant
1
symbol
,
identifier
K
symbol
,
symbol
-
identifier
J
symbol
}
symbol
,
identifier
NewLine
symbol
{
identifier
J
symbol
,
symbol
-
identifier
K
symbol
,
symbol
-
integerConstant
1
symbol
,
identifier
I
symbol
}
symbol
,
identifier
NewLine
symbol
{
identifier
K
symbol
,
identifier
J
symbol
,
symbol
-
identifier
I
symbol
,
symbol
-
integerConstant
1
symbol
}
identifier
NewLine
symbol
}
symbol
;
identifier
NewLine
identifier
NewLine
keyword
char
identifier
C
symbol
[
symbol
]
symbol
=
stringConstant
ijk
symbol
;
identifier
NewLine
keyword
int
identifier
V
symbol
[
symbol
]
symbol
=
symbol
{
identifier
I
symbol
,
identifier
J
symbol
,
identifier
K
symbol
}
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
toi
symbol
(
keyword
char
identifier
ch
symbol
)
symbol
{
identifier
NewLine
identifier
FO
symbol
(
identifier
i
symbol
,
integerConstant
0
symbol
,
integerConstant
3
symbol
)
keyword
if
symbol
(
identifier
C
symbol
[
identifier
i
symbol
]
symbol
=
symbol
=
identifier
ch
symbol
)
keyword
return
identifier
V
symbol
[
identifier
i
symbol
]
symbol
;
identifier
NewLine
identifier
assert
symbol
(
keyword
false
symbol
)
symbol
;
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
int
identifier
mul
symbol
(
keyword
int
identifier
a
symbol
,
keyword
int
identifier
b
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
s
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
a
symbol
<
integerConstant
0
symbol
)
symbol
{
identifier
NewLine
identifier
s
symbol
*
symbol
=
symbol
-
integerConstant
1
symbol
;
identifier
NewLine
identifier
a
symbol
*
symbol
=
symbol
-
integerConstant
1
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
b
symbol
<
integerConstant
0
symbol
)
symbol
{
identifier
NewLine
identifier
s
symbol
*
symbol
=
symbol
-
integerConstant
1
symbol
;
identifier
NewLine
identifier
b
symbol
*
symbol
=
symbol
-
integerConstant
1
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
identifier
s
symbol
*
identifier
S
symbol
[
identifier
a
symbol
-
integerConstant
1
symbol
]
symbol
[
identifier
b
symbol
-
integerConstant
1
symbol
]
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
int
identifier
pw
symbol
(
keyword
int
identifier
a
symbol
,
identifier
ll
identifier
b
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
r
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
keyword
while
symbol
(
identifier
b
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
b
symbol
&
integerConstant
1
symbol
)
identifier
r
symbol
=
identifier
mul
symbol
(
identifier
r
symbol
,
identifier
a
symbol
)
symbol
;
identifier
NewLine
identifier
a
symbol
=
identifier
mul
symbol
(
identifier
a
symbol
,
identifier
a
symbol
)
symbol
;
identifier
NewLine
identifier
b
symbol
/
symbol
=
integerConstant
2
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
identifier
r
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
int
identifier
ldiv
symbol
(
keyword
int
identifier
y
symbol
,
keyword
int
identifier
i
symbol
)
symbol
{
identifier
NewLine
identifier
FO
symbol
(
identifier
x
symbol
,
integerConstant
1
symbol
,
integerConstant
5
symbol
)
keyword
if
symbol
(
identifier
mul
symbol
(
identifier
x
symbol
,
identifier
i
symbol
)
symbol
=
symbol
=
identifier
y
symbol
)
keyword
return
identifier
x
symbol
;
identifier
NewLine
identifier
FO
symbol
(
identifier
x
symbol
,
integerConstant
1
symbol
,
integerConstant
5
symbol
)
keyword
if
symbol
(
identifier
mul
symbol
(
symbol
-
identifier
x
symbol
,
identifier
i
symbol
)
symbol
=
symbol
=
identifier
y
symbol
)
keyword
return
symbol
-
identifier
x
symbol
;
identifier
NewLine
identifier
assert
symbol
(
keyword
false
symbol
)
symbol
;
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
int
identifier
rdiv
symbol
(
keyword
int
identifier
y
symbol
,
keyword
int
identifier
i
symbol
)
symbol
{
identifier
NewLine
identifier
FO
symbol
(
identifier
x
symbol
,
integerConstant
1
symbol
,
integerConstant
5
symbol
)
keyword
if
symbol
(
identifier
mul
symbol
(
identifier
i
symbol
,
identifier
x
symbol
)
symbol
=
symbol
=
identifier
y
symbol
)
keyword
return
identifier
x
symbol
;
identifier
NewLine
identifier
FO
symbol
(
identifier
x
symbol
,
integerConstant
1
symbol
,
integerConstant
5
symbol
)
keyword
if
symbol
(
identifier
mul
symbol
(
identifier
i
symbol
,
symbol
-
identifier
x
symbol
)
symbol
=
symbol
=
identifier
y
symbol
)
keyword
return
symbol
-
identifier
x
symbol
;
identifier
NewLine
identifier
assert
symbol
(
keyword
false
symbol
)
symbol
;
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
T
symbol
;
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
T
symbol
)
symbol
;
identifier
NewLine
identifier
FO
symbol
(
identifier
Z
symbol
,
integerConstant
1
symbol
,
identifier
T
symbol
+
integerConstant
1
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
l
symbol
;
identifier
ll
identifier
x
symbol
;
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d %lld
symbol
,
symbol
&
identifier
l
symbol
,
symbol
&
identifier
x
symbol
)
symbol
;
identifier
NewLine
identifier
vector
symbol
<
keyword
char
symbol
>
identifier
s
symbol
(
identifier
l
symbol
+
integerConstant
1
symbol
)
symbol
;
identifier
scanf
symbol
(
stringConstant
%s
symbol
,
symbol
&
identifier
s
symbol
[
integerConstant
0
symbol
]
symbol
)
symbol
;
identifier
NewLine
identifier
vector
symbol
<
keyword
int
symbol
>
identifier
v
symbol
(
identifier
l
symbol
)
symbol
;
identifier
FO
symbol
(
identifier
i
symbol
,
integerConstant
0
symbol
,
identifier
l
symbol
)
identifier
v
symbol
[
identifier
i
symbol
]
symbol
=
identifier
toi
symbol
(
identifier
s
symbol
[
identifier
i
symbol
]
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
identifier
vector
symbol
<
keyword
int
symbol
>
identifier
pref
symbol
(
identifier
l
symbol
+
integerConstant
1
symbol
)
symbol
,
identifier
suff
symbol
(
identifier
l
symbol
+
integerConstant
1
symbol
)
symbol
;
identifier
NewLine
identifier
pref
symbol
[
integerConstant
0
symbol
]
symbol
=
identifier
suff
symbol
[
integerConstant
0
symbol
]
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
identifier
FO
symbol
(
identifier
i
symbol
,
integerConstant
1
symbol
,
identifier
l
symbol
+
integerConstant
1
symbol
)
identifier
pref
symbol
[
identifier
i
symbol
]
symbol
=
identifier
mul
symbol
(
identifier
pref
symbol
[
identifier
i
symbol
-
integerConstant
1
symbol
]
symbol
,
identifier
v
symbol
[
identifier
i
symbol
-
integerConstant
1
symbol
]
symbol
)
symbol
;
identifier
NewLine
identifier
FO
symbol
(
identifier
i
symbol
,
integerConstant
1
symbol
,
identifier
l
symbol
+
integerConstant
1
symbol
)
identifier
suff
symbol
[
identifier
i
symbol
]
symbol
=
identifier
mul
symbol
(
identifier
v
symbol
[
identifier
l
symbol
-
identifier
i
symbol
]
symbol
,
identifier
suff
symbol
[
identifier
i
symbol
-
integerConstant
1
symbol
]
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
identifier
map
symbol
<
keyword
int
symbol
,
keyword
int
symbol
>
identifier
fpref
symbol
,
identifier
fsuff
symbol
;
identifier
NewLine
identifier
FO
symbol
(
identifier
i
symbol
,
integerConstant
0
symbol
,
identifier
l
symbol
+
integerConstant
1
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
fpref
symbol
.
identifier
count
symbol
(
identifier
pref
symbol
[
identifier
i
symbol
]
symbol
)
symbol
)
symbol
{
identifier
NewLine
identifier
fpref
symbol
[
identifier
pref
symbol
[
identifier
i
symbol
]
symbol
]
symbol
=
identifier
i
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
fsuff
symbol
.
identifier
count
symbol
(
identifier
suff
symbol
[
identifier
i
symbol
]
symbol
)
symbol
)
symbol
{
identifier
NewLine
identifier
fsuff
symbol
[
identifier
suff
symbol
[
identifier
i
symbol
]
symbol
]
symbol
=
identifier
i
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
char
identifier
ans
symbol
[
integerConstant
50
symbol
]
symbol
;
identifier
sprintf
symbol
(
identifier
ans
symbol
,
stringConstant
Case #%d: 
symbol
,
identifier
Z
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
pw
symbol
(
identifier
pref
symbol
[
identifier
l
symbol
]
symbol
,
identifier
x
symbol
)
symbol
=
symbol
-
integerConstant
1
symbol
)
symbol
{
identifier
NewLine
identifier
strcat
symbol
(
identifier
ans
symbol
,
stringConstant
NO
symbol
)
symbol
;
identifier
NewLine
symbol
}
keyword
else
symbol
{
identifier
NewLine
identifier
ll
identifier
spref
symbol
=
integerConstant
1
identifier
e17
symbol
;
identifier
NewLine
identifier
set
symbol
<
keyword
int
symbol
>
identifier
seen
symbol
;
identifier
NewLine
keyword
int
identifier
c
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
identifier
FO
symbol
(
identifier
i
symbol
,
integerConstant
0
symbol
,
identifier
x
symbol
+
integerConstant
1
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
seen
symbol
.
identifier
count
symbol
(
identifier
c
symbol
)
symbol
)
identifier
break
symbol
;
identifier
NewLine
identifier
seen
symbol
.
identifier
insert
symbol
(
identifier
c
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
keyword
if
symbol
(
identifier
fpref
symbol
.
identifier
count
symbol
(
identifier
rdiv
symbol
(
identifier
I
symbol
,
identifier
c
symbol
)
symbol
)
symbol
)
symbol
{
identifier
NewLine
identifier
spref
symbol
=
identifier
i
symbol
*
identifier
l
symbol
+
identifier
fpref
symbol
[
identifier
rdiv
symbol
(
identifier
I
symbol
,
identifier
c
symbol
)
symbol
]
symbol
;
identifier
NewLine
identifier
break
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
c
symbol
=
identifier
mul
symbol
(
identifier
c
symbol
,
identifier
pref
symbol
[
identifier
l
symbol
]
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
ll
identifier
ssuf
symbol
=
integerConstant
1
identifier
e17
symbol
;
identifier
NewLine
identifier
seen
symbol
.
identifier
clear
symbol
(
symbol
)
symbol
;
identifier
NewLine
identifier
c
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
identifier
FO
symbol
(
identifier
i
symbol
,
integerConstant
0
symbol
,
identifier
x
symbol
+
integerConstant
1
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
seen
symbol
.
identifier
count
symbol
(
identifier
c
symbol
)
symbol
)
identifier
break
symbol
;
identifier
NewLine
identifier
seen
symbol
.
identifier
insert
symbol
(
identifier
c
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
keyword
if
symbol
(
identifier
fsuff
symbol
.
identifier
count
symbol
(
identifier
ldiv
symbol
(
identifier
K
symbol
,
identifier
c
symbol
)
symbol
)
symbol
)
symbol
{
identifier
NewLine
identifier
ssuf
symbol
=
identifier
i
symbol
*
identifier
l
symbol
+
identifier
fsuff
symbol
[
identifier
ldiv
symbol
(
identifier
K
symbol
,
identifier
c
symbol
)
symbol
]
symbol
;
identifier
NewLine
identifier
break
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
c
symbol
=
identifier
mul
symbol
(
identifier
suff
symbol
[
identifier
l
symbol
]
symbol
,
identifier
c
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
if
symbol
(
identifier
spref
symbol
+
identifier
ssuf
symbol
<
identifier
x
symbol
*
identifier
l
symbol
)
symbol
{
identifier
NewLine
identifier
strcat
symbol
(
identifier
ans
symbol
,
stringConstant
YES
symbol
)
symbol
;
identifier
NewLine
symbol
}
keyword
else
symbol
{
identifier
NewLine
identifier
strcat
symbol
(
identifier
ans
symbol
,
stringConstant
NO
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
printf
symbol
(
stringConstant
%s\n
symbol
,
identifier
ans
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/JayXon.0.cpp file...

identifier
include
symbol
<
identifier
iostream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
fstream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstring
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
string
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
algorithm
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
functional
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cmath
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstdint
symbol
>
identifier
NewLine
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
keyword
void
identifier
solve
identifier
case
symbol
(
identifier
ifstream
symbol
&
identifier
fin
symbol
,
identifier
ofstream
symbol
&
identifier
fout
symbol
,
keyword
int
identifier
case
identifier
num
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
int
identifier
smax
symbol
,
identifier
r
symbol
=
integerConstant
0
symbol
,
identifier
sum
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
string
identifier
s
symbol
;
identifier
NewLine
identifier
fin
symbol
>
symbol
>
identifier
smax
symbol
>
symbol
>
identifier
s
symbol
;
identifier
NewLine
identifier
NewLine
identifier
sum
symbol
=
identifier
s
symbol
[
integerConstant
0
symbol
]
symbol
-
integerConstant
0
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
1
symbol
;
identifier
i
symbol
<
symbol
=
identifier
smax
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
sum
symbol
<
identifier
i
symbol
)
symbol
{
identifier
NewLine
identifier
r
symbol
+
symbol
=
identifier
i
symbol
-
identifier
sum
symbol
;
identifier
NewLine
identifier
sum
symbol
=
identifier
i
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
sum
symbol
+
symbol
=
identifier
s
symbol
[
identifier
i
symbol
]
symbol
-
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
fout
symbol
<
symbol
<
stringConstant
Case #
symbol
<
symbol
<
identifier
case
identifier
num
symbol
<
symbol
<
stringConstant
: 
symbol
;
identifier
NewLine
identifier
fout
symbol
<
symbol
<
identifier
r
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
keyword
int
identifier
argc
symbol
,
keyword
char
identifier
const
symbol
*
identifier
argv
symbol
[
symbol
]
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
argc
symbol
=
integerConstant
2
symbol
)
identifier
NewLine
keyword
return
integerConstant
1
symbol
;
identifier
NewLine
keyword
char
identifier
name
symbol
[
integerConstant
256
symbol
]
symbol
;
identifier
NewLine
identifier
strcpy
symbol
(
identifier
name
symbol
,
identifier
argv
symbol
[
integerConstant
1
symbol
]
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
identifier
ifstream
identifier
fin
symbol
(
identifier
name
symbol
)
symbol
;
identifier
NewLine
identifier
name
symbol
[
identifier
strlen
symbol
(
identifier
name
symbol
)
symbol
-
integerConstant
2
symbol
]
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
strcat
symbol
(
identifier
name
symbol
,
stringConstant
out
symbol
)
symbol
;
identifier
NewLine
identifier
ofstream
identifier
fout
symbol
(
identifier
name
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
keyword
if
symbol
(
identifier
fin
symbol
.
identifier
is
identifier
open
symbol
(
symbol
)
symbol
|
symbol
|
identifier
fout
symbol
.
identifier
is
identifier
open
symbol
(
symbol
)
symbol
)
identifier
NewLine
keyword
return
integerConstant
1
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
t
symbol
,
identifier
t1
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
NewLine
identifier
fin
symbol
>
symbol
>
identifier
t
symbol
;
identifier
NewLine
identifier
NewLine
keyword
while
symbol
(
identifier
t1
symbol
+
symbol
+
symbol
<
identifier
t
symbol
)
symbol
{
identifier
NewLine
identifier
cerr
symbol
<
symbol
<
stringConstant
Solving case 
symbol
<
symbol
<
identifier
t1
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
identifier
solve
identifier
case
symbol
(
identifier
fin
symbol
,
identifier
fout
symbol
,
identifier
t1
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
symbol
}
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/JayXon.1.cpp file...

identifier
include
symbol
<
identifier
iostream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
fstream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstring
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
string
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
algorithm
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
functional
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cmath
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstdint
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
vector
symbol
>
identifier
NewLine
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
identifier
NewLine
keyword
void
identifier
solve
identifier
case
symbol
(
identifier
ifstream
symbol
&
identifier
fin
symbol
,
identifier
ofstream
symbol
&
identifier
fout
symbol
,
keyword
int
identifier
case
identifier
num
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
int
identifier
d
symbol
,
identifier
r
symbol
=
identifier
INT
identifier
MAX
symbol
;
identifier
NewLine
identifier
fin
symbol
>
symbol
>
identifier
d
symbol
;
identifier
NewLine
keyword
int
identifier
p
symbol
[
identifier
d
symbol
]
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
d
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
fin
symbol
>
symbol
>
identifier
p
symbol
[
identifier
i
symbol
]
symbol
;
identifier
NewLine
identifier
sort
symbol
(
identifier
p
symbol
,
identifier
p
symbol
+
identifier
d
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
identifier
vector
symbol
<
identifier
vector
symbol
<
keyword
int
symbol
>
symbol
>
identifier
dp
symbol
(
identifier
d
symbol
,
identifier
vector
symbol
<
keyword
int
symbol
>
symbol
(
identifier
p
symbol
[
identifier
d
symbol
-
integerConstant
1
symbol
]
symbol
)
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
j
symbol
=
integerConstant
0
symbol
;
identifier
j
symbol
<
identifier
p
symbol
[
identifier
d
symbol
-
integerConstant
1
symbol
]
symbol
;
identifier
j
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
dp
symbol
[
integerConstant
0
symbol
]
symbol
[
identifier
j
symbol
]
symbol
=
symbol
(
identifier
p
symbol
[
integerConstant
0
symbol
]
symbol
+
identifier
j
symbol
)
symbol
/
symbol
(
identifier
j
symbol
+
integerConstant
1
symbol
)
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
1
symbol
;
identifier
i
symbol
<
identifier
d
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
m
symbol
=
identifier
p
symbol
[
identifier
i
symbol
]
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
k
symbol
=
integerConstant
1
symbol
;
identifier
k
symbol
<
symbol
=
identifier
j
symbol
;
identifier
k
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
m
symbol
=
identifier
min
symbol
(
identifier
m
symbol
,
identifier
max
symbol
(
identifier
dp
symbol
[
identifier
i
symbol
-
integerConstant
1
symbol
]
symbol
[
identifier
j
symbol
-
identifier
k
symbol
]
symbol
,
symbol
(
identifier
p
symbol
[
identifier
i
symbol
]
symbol
+
identifier
k
symbol
)
symbol
/
symbol
(
identifier
k
symbol
+
integerConstant
1
symbol
)
symbol
)
symbol
)
symbol
;
identifier
NewLine
identifier
dp
symbol
[
identifier
i
symbol
]
symbol
[
identifier
j
symbol
]
symbol
=
identifier
m
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
r
symbol
=
identifier
min
symbol
(
identifier
r
symbol
,
identifier
j
symbol
+
identifier
dp
symbol
[
identifier
d
symbol
-
integerConstant
1
symbol
]
symbol
[
identifier
j
symbol
]
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
fout
symbol
<
symbol
<
stringConstant
Case #
symbol
<
symbol
<
identifier
case
identifier
num
symbol
<
symbol
<
stringConstant
: 
symbol
;
identifier
NewLine
identifier
fout
symbol
<
symbol
<
identifier
r
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
keyword
int
identifier
argc
symbol
,
keyword
char
identifier
const
symbol
*
identifier
argv
symbol
[
symbol
]
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
argc
symbol
=
integerConstant
2
symbol
)
identifier
NewLine
keyword
return
integerConstant
1
symbol
;
identifier
NewLine
keyword
char
identifier
name
symbol
[
integerConstant
256
symbol
]
symbol
;
identifier
NewLine
identifier
strcpy
symbol
(
identifier
name
symbol
,
identifier
argv
symbol
[
integerConstant
1
symbol
]
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
identifier
ifstream
identifier
fin
symbol
(
identifier
name
symbol
)
symbol
;
identifier
NewLine
identifier
name
symbol
[
identifier
strlen
symbol
(
identifier
name
symbol
)
symbol
-
integerConstant
2
symbol
]
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
strcat
symbol
(
identifier
name
symbol
,
stringConstant
out
symbol
)
symbol
;
identifier
NewLine
identifier
ofstream
identifier
fout
symbol
(
identifier
name
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
keyword
if
symbol
(
identifier
fin
symbol
.
identifier
is
identifier
open
symbol
(
symbol
)
symbol
|
symbol
|
identifier
fout
symbol
.
identifier
is
identifier
open
symbol
(
symbol
)
symbol
)
identifier
NewLine
keyword
return
integerConstant
1
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
t
symbol
,
identifier
t1
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
NewLine
identifier
fin
symbol
>
symbol
>
identifier
t
symbol
;
identifier
NewLine
identifier
NewLine
keyword
while
symbol
(
identifier
t1
symbol
+
symbol
+
symbol
<
identifier
t
symbol
)
symbol
{
identifier
NewLine
identifier
cerr
symbol
<
symbol
<
stringConstant
Solving case 
symbol
<
symbol
<
identifier
t1
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
identifier
solve
identifier
case
symbol
(
identifier
fin
symbol
,
identifier
fout
symbol
,
identifier
t1
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
symbol
}
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/JayXon.2.cpp file...

identifier
include
symbol
<
identifier
iostream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
fstream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstring
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
string
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
algorithm
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
functional
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cmath
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstdint
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
vector
symbol
>
identifier
NewLine
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
keyword
char
identifier
multiply
symbol
(
keyword
char
identifier
a
symbol
,
keyword
char
identifier
b
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
a
symbol
<
integerConstant
0
symbol
)
identifier
NewLine
keyword
return
symbol
-
identifier
multiply
symbol
(
symbol
-
identifier
a
symbol
,
identifier
b
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
b
symbol
<
integerConstant
0
symbol
)
identifier
NewLine
keyword
return
symbol
-
identifier
multiply
symbol
(
identifier
a
symbol
,
symbol
-
identifier
b
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
a
symbol
=
symbol
=
integerConstant
1
symbol
)
identifier
NewLine
keyword
return
identifier
b
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
b
symbol
=
symbol
=
integerConstant
1
symbol
)
identifier
NewLine
keyword
return
identifier
a
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
a
symbol
=
symbol
=
identifier
b
symbol
)
identifier
NewLine
keyword
return
symbol
-
integerConstant
1
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
a
symbol
>
identifier
b
symbol
)
identifier
NewLine
keyword
return
symbol
-
identifier
multiply
symbol
(
identifier
b
symbol
,
identifier
a
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
b
symbol
=
symbol
=
identifier
j
symbol
)
identifier
NewLine
keyword
return
identifier
k
symbol
;
identifier
NewLine
keyword
return
identifier
a
symbol
=
symbol
=
identifier
i
symbol
-
identifier
j
identifier
i
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
void
identifier
solve
identifier
case
symbol
(
identifier
ifstream
symbol
&
identifier
fin
symbol
,
identifier
ofstream
symbol
&
identifier
fout
symbol
,
keyword
int
identifier
case
identifier
num
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
int64
identifier
t
identifier
l
symbol
,
identifier
x
symbol
;
identifier
NewLine
identifier
string
identifier
s
symbol
;
identifier
NewLine
identifier
fin
symbol
>
symbol
>
identifier
l
symbol
>
symbol
>
identifier
x
symbol
>
symbol
>
identifier
s
symbol
;
identifier
NewLine
identifier
NewLine
keyword
char
identifier
t
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
identifier
for
symbol
(
identifier
auto
identifier
c
identifier
s
symbol
)
identifier
NewLine
identifier
t
symbol
=
identifier
multiply
symbol
(
identifier
t
symbol
,
identifier
c
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
n
symbol
=
integerConstant
0
symbol
,
identifier
i
symbol
=
integerConstant
0
symbol
,
identifier
nothing
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
keyword
char
identifier
c
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
keyword
while
symbol
(
identifier
x
symbol
&
symbol
&
identifier
n
symbol
<
integerConstant
3
symbol
)
symbol
{
identifier
NewLine
keyword
while
symbol
(
identifier
i
symbol
<
identifier
s
symbol
.
identifier
size
symbol
(
symbol
)
symbol
&
symbol
&
identifier
c
symbol
=
identifier
i
symbol
+
identifier
n
symbol
)
identifier
NewLine
identifier
c
symbol
=
identifier
multiply
symbol
(
identifier
c
symbol
,
identifier
s
symbol
[
identifier
i
symbol
+
symbol
+
symbol
]
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
i
symbol
=
symbol
=
identifier
s
symbol
.
identifier
size
symbol
(
symbol
)
symbol
)
symbol
{
identifier
NewLine
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
x
symbol
-
symbol
-
symbol
;
identifier
NewLine
identifier
nothing
symbol
+
symbol
+
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
nothing
symbol
>
integerConstant
4
symbol
)
identifier
NewLine
identifier
x
symbol
=
integerConstant
4
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
c
symbol
=
symbol
=
identifier
i
symbol
+
identifier
n
symbol
)
symbol
{
identifier
NewLine
identifier
n
symbol
+
symbol
+
symbol
;
identifier
NewLine
identifier
c
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
identifier
nothing
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
n
symbol
=
symbol
=
integerConstant
3
symbol
)
symbol
{
identifier
NewLine
identifier
c
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
i
symbol
)
symbol
{
identifier
NewLine
keyword
while
symbol
(
identifier
i
symbol
<
identifier
s
symbol
.
identifier
size
symbol
(
symbol
)
symbol
)
identifier
NewLine
identifier
c
symbol
=
identifier
multiply
symbol
(
identifier
c
symbol
,
identifier
s
symbol
[
identifier
i
symbol
+
symbol
+
symbol
]
symbol
)
symbol
;
identifier
NewLine
identifier
x
symbol
-
symbol
-
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
x
symbol
=
integerConstant
4
symbol
;
identifier
NewLine
keyword
while
symbol
(
identifier
x
symbol
-
symbol
-
symbol
)
symbol
{
identifier
NewLine
identifier
c
symbol
=
identifier
multiply
symbol
(
identifier
c
symbol
,
identifier
t
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
cout
symbol
<
symbol
<
identifier
x
symbol
<
symbol
<
symbol
<
symbol
<
identifier
c
symbol
<
symbol
<
symbol
<
symbol
<
identifier
n
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
identifier
fout
symbol
<
symbol
<
stringConstant
Case #
symbol
<
symbol
<
identifier
case
identifier
num
symbol
<
symbol
<
stringConstant
: 
symbol
;
identifier
NewLine
identifier
fout
symbol
<
symbol
<
symbol
(
symbol
(
identifier
n
symbol
=
symbol
=
integerConstant
3
symbol
&
symbol
&
identifier
c
symbol
=
symbol
=
integerConstant
1
symbol
)
stringConstant
YES
stringConstant
NO
symbol
)
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
keyword
int
identifier
argc
symbol
,
keyword
char
identifier
const
symbol
*
identifier
argv
symbol
[
symbol
]
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
argc
symbol
=
integerConstant
2
symbol
)
identifier
NewLine
keyword
return
integerConstant
1
symbol
;
identifier
NewLine
keyword
char
identifier
name
symbol
[
integerConstant
256
symbol
]
symbol
;
identifier
NewLine
identifier
strcpy
symbol
(
identifier
name
symbol
,
identifier
argv
symbol
[
integerConstant
1
symbol
]
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
identifier
ifstream
identifier
fin
symbol
(
identifier
name
symbol
)
symbol
;
identifier
NewLine
identifier
name
symbol
[
identifier
strlen
symbol
(
identifier
name
symbol
)
symbol
-
integerConstant
2
symbol
]
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
strcat
symbol
(
identifier
name
symbol
,
stringConstant
out
symbol
)
symbol
;
identifier
NewLine
identifier
ofstream
identifier
fout
symbol
(
identifier
name
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
keyword
if
symbol
(
identifier
fin
symbol
.
identifier
is
identifier
open
symbol
(
symbol
)
symbol
|
symbol
|
identifier
fout
symbol
.
identifier
is
identifier
open
symbol
(
symbol
)
symbol
)
identifier
NewLine
keyword
return
integerConstant
1
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
t
symbol
,
identifier
t1
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
NewLine
identifier
fin
symbol
>
symbol
>
identifier
t
symbol
;
identifier
NewLine
identifier
NewLine
keyword
while
symbol
(
identifier
t1
symbol
+
symbol
+
symbol
<
identifier
t
symbol
)
symbol
{
identifier
NewLine
identifier
cerr
symbol
<
symbol
<
stringConstant
Solving case 
symbol
<
symbol
<
identifier
t1
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
identifier
solve
identifier
case
symbol
(
identifier
fin
symbol
,
identifier
fout
symbol
,
identifier
t1
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
symbol
}
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/Josse.0.cpp file...

identifier
include
symbol
<
identifier
iostream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cassert
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
string
symbol
>
identifier
NewLine
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
solve
symbol
(
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
l
symbol
;
identifier
NewLine
identifier
string
identifier
s
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
l
symbol
>
symbol
>
identifier
s
symbol
;
identifier
NewLine
identifier
assert
symbol
(
symbol
(
keyword
int
symbol
)
identifier
s
symbol
.
identifier
size
symbol
(
symbol
)
symbol
=
symbol
=
identifier
l
symbol
+
integerConstant
1
symbol
)
symbol
;
identifier
NewLine
keyword
int
identifier
ans
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
keyword
int
identifier
sum
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
l
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
sum
symbol
+
symbol
=
identifier
s
symbol
[
identifier
i
symbol
]
symbol
-
integerConstant
0
symbol
;
identifier
NewLine
keyword
int
identifier
delta
symbol
=
identifier
max
symbol
(
identifier
i
symbol
+
integerConstant
1
symbol
-
identifier
sum
symbol
,
integerConstant
0
symbol
)
symbol
;
identifier
NewLine
identifier
ans
symbol
+
symbol
=
identifier
delta
symbol
;
identifier
NewLine
identifier
sum
symbol
+
symbol
=
identifier
delta
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
identifier
ans
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
T
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
T
symbol
;
identifier
NewLine
identifier
assert
symbol
(
identifier
T
symbol
>
symbol
=
integerConstant
1
symbol
&
symbol
&
identifier
T
symbol
<
symbol
=
integerConstant
100
symbol
)
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
T
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
cout
symbol
<
symbol
<
stringConstant
Case #
symbol
<
symbol
<
symbol
(
identifier
i
symbol
+
integerConstant
1
symbol
)
symbol
<
symbol
<
stringConstant
: 
symbol
<
symbol
<
identifier
solve
symbol
(
symbol
)
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/Josse.1.cpp file...

identifier
include
symbol
<
identifier
iostream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cassert
symbol
>
identifier
NewLine
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
P
symbol
[
integerConstant
1000
symbol
]
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
solve
symbol
(
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
D
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
D
symbol
;
identifier
NewLine
identifier
assert
symbol
(
identifier
D
symbol
>
symbol
=
integerConstant
1
symbol
&
symbol
&
identifier
D
symbol
<
symbol
=
integerConstant
1000
symbol
)
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
D
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
P
symbol
[
identifier
i
symbol
]
symbol
;
identifier
NewLine
identifier
assert
symbol
(
identifier
P
symbol
[
identifier
i
symbol
]
symbol
>
symbol
=
integerConstant
1
symbol
&
symbol
&
identifier
P
symbol
[
identifier
i
symbol
]
symbol
<
symbol
=
integerConstant
1000
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
int
identifier
best
symbol
=
integerConstant
1000
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
1
symbol
;
identifier
i
symbol
<
symbol
=
integerConstant
1000
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
cur
symbol
=
identifier
i
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
j
symbol
=
integerConstant
0
symbol
;
identifier
j
symbol
<
identifier
D
symbol
;
identifier
j
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
cur
symbol
+
symbol
=
symbol
(
identifier
P
symbol
[
identifier
j
symbol
]
symbol
-
integerConstant
1
symbol
)
symbol
/
identifier
i
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
best
symbol
=
identifier
min
symbol
(
identifier
best
symbol
,
identifier
cur
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
identifier
best
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
T
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
T
symbol
;
identifier
NewLine
identifier
assert
symbol
(
identifier
T
symbol
>
symbol
=
integerConstant
1
symbol
&
symbol
&
identifier
T
symbol
<
symbol
=
integerConstant
100
symbol
)
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
T
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
cout
symbol
<
symbol
<
stringConstant
Case #
symbol
<
symbol
<
symbol
(
identifier
i
symbol
+
integerConstant
1
symbol
)
symbol
<
symbol
<
stringConstant
: 
symbol
<
symbol
<
identifier
solve
symbol
(
symbol
)
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/Josse.2.cpp file...

identifier
include
symbol
<
identifier
iostream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cassert
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
limits
symbol
>
identifier
NewLine
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
identifier
define
identifier
pos1
integerConstant
0
identifier
NewLine
identifier
define
identifier
posI
integerConstant
1
identifier
NewLine
identifier
define
identifier
posJ
integerConstant
2
identifier
NewLine
identifier
define
identifier
posK
integerConstant
3
identifier
NewLine
identifier
define
identifier
neg1
integerConstant
4
identifier
NewLine
identifier
define
identifier
negI
integerConstant
5
identifier
NewLine
identifier
define
identifier
negJ
integerConstant
6
identifier
NewLine
identifier
define
identifier
negK
integerConstant
7
identifier
NewLine
identifier
NewLine
identifier
const
identifier
long
identifier
long
identifier
MAX
identifier
LEN
symbol
=
integerConstant
10000
symbol
;
identifier
NewLine
identifier
const
identifier
long
identifier
long
identifier
MAX
identifier
X
symbol
=
integerConstant
1000000000000
identifier
ll
symbol
;
identifier
NewLine
identifier
const
identifier
long
identifier
long
identifier
MAX
identifier
LX
symbol
=
integerConstant
10000000000000000
identifier
ll
symbol
;
identifier
NewLine
identifier
const
identifier
long
identifier
long
identifier
NOT
identifier
FOUND
symbol
=
identifier
numeric
identifier
limits
symbol
<
identifier
long
identifier
long
symbol
>
identifier
max
symbol
(
symbol
)
symbol
;
identifier
NewLine
identifier
const
identifier
long
identifier
long
identifier
SOME
identifier
GENEROUS
identifier
UPPER
identifier
BOUND
symbol
=
integerConstant
20
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
table
symbol
[
symbol
]
symbol
[
integerConstant
4
symbol
]
symbol
=
symbol
{
symbol
{
identifier
pos1
symbol
,
identifier
posI
symbol
,
identifier
posJ
symbol
,
identifier
posK
symbol
}
symbol
,
identifier
NewLine
symbol
{
identifier
posI
symbol
,
identifier
neg1
symbol
,
identifier
posK
symbol
,
identifier
negJ
symbol
}
symbol
,
identifier
NewLine
symbol
{
identifier
posJ
symbol
,
identifier
negK
symbol
,
identifier
neg1
symbol
,
identifier
posI
symbol
}
symbol
,
identifier
NewLine
symbol
{
identifier
posK
symbol
,
identifier
posJ
symbol
,
identifier
negI
symbol
,
identifier
neg1
symbol
}
symbol
}
symbol
;
identifier
NewLine
identifier
NewLine
keyword
char
identifier
kar
symbol
[
symbol
]
symbol
=
symbol
{
integerConstant
1
symbol
,
identifier
i
symbol
,
identifier
j
symbol
,
identifier
k
symbol
}
symbol
;
identifier
NewLine
identifier
NewLine
identifier
struct
identifier
quaternion
symbol
{
identifier
NewLine
keyword
int
identifier
val
symbol
;
identifier
quaternion
symbol
(
symbol
)
identifier
val
symbol
(
integerConstant
0
symbol
)
symbol
{
symbol
}
identifier
NewLine
identifier
quaternion
symbol
(
keyword
int
identifier
val
symbol
)
identifier
val
symbol
(
identifier
val
symbol
)
symbol
{
symbol
}
identifier
NewLine
identifier
bool
identifier
operator
symbol
=
symbol
=
symbol
(
identifier
const
identifier
quaternion
symbol
&
identifier
other
symbol
)
identifier
const
symbol
{
identifier
NewLine
keyword
return
identifier
val
symbol
=
symbol
=
identifier
other
symbol
.
identifier
val
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
bool
identifier
operator
symbol
=
symbol
(
identifier
const
identifier
quaternion
symbol
&
identifier
other
symbol
)
identifier
const
symbol
{
identifier
NewLine
keyword
return
identifier
val
symbol
=
identifier
other
symbol
.
identifier
val
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
quaternion
symbol
&
identifier
operator
symbol
*
symbol
=
symbol
(
identifier
const
identifier
quaternion
symbol
&
identifier
other
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
sgn
symbol
=
integerConstant
4
symbol
*
symbol
(
identifier
val
symbol
/
integerConstant
4
symbol
)
symbol
+
integerConstant
4
symbol
*
symbol
(
identifier
other
symbol
.
identifier
val
symbol
/
integerConstant
4
symbol
)
symbol
;
identifier
NewLine
identifier
val
symbol
=
symbol
(
identifier
table
symbol
[
identifier
val
integerConstant
4
symbol
]
symbol
[
identifier
other
symbol
.
identifier
val
integerConstant
4
symbol
]
symbol
+
identifier
sgn
symbol
)
integerConstant
8
symbol
;
identifier
NewLine
keyword
return
symbol
*
keyword
this
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
quaternion
identifier
operator
symbol
*
symbol
(
identifier
const
identifier
quaternion
symbol
&
identifier
other
symbol
)
identifier
const
symbol
{
identifier
NewLine
keyword
return
identifier
quaternion
symbol
(
symbol
*
keyword
this
symbol
)
symbol
*
symbol
=
identifier
other
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
friend
identifier
ostream
symbol
&
identifier
operator
symbol
<
symbol
<
symbol
(
identifier
ostream
symbol
&
identifier
os
symbol
,
identifier
const
identifier
quaternion
symbol
&
identifier
q
symbol
)
symbol
{
identifier
NewLine
identifier
os
symbol
<
symbol
<
symbol
(
identifier
q
symbol
.
identifier
val
symbol
>
symbol
=
integerConstant
4
symbol
-
symbol
)
symbol
<
symbol
<
identifier
kar
symbol
[
identifier
q
symbol
.
identifier
val
integerConstant
4
symbol
]
symbol
;
identifier
NewLine
keyword
return
identifier
os
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
symbol
;
identifier
NewLine
identifier
NewLine
identifier
quaternion
identifier
pow
symbol
(
identifier
quaternion
identifier
q
symbol
,
identifier
long
identifier
long
identifier
exponent
symbol
)
symbol
{
identifier
NewLine
identifier
quaternion
identifier
ans
symbol
;
identifier
NewLine
identifier
for
symbol
(
identifier
long
identifier
long
identifier
i
symbol
=
integerConstant
1
symbol
;
identifier
i
symbol
<
symbol
=
identifier
exponent
symbol
;
identifier
i
symbol
<
symbol
<
symbol
=
integerConstant
1
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
exponent
symbol
&
identifier
i
symbol
)
identifier
ans
symbol
*
symbol
=
identifier
q
symbol
;
identifier
NewLine
identifier
q
symbol
*
symbol
=
identifier
q
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
identifier
ans
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
long
identifier
long
identifier
L
symbol
,
identifier
X
symbol
;
identifier
NewLine
identifier
quaternion
identifier
partial
symbol
[
identifier
MAX
identifier
LEN
symbol
+
integerConstant
1
symbol
]
symbol
;
identifier
NewLine
identifier
quaternion
identifier
powers
symbol
[
identifier
SOME
identifier
GENEROUS
identifier
UPPER
identifier
BOUND
symbol
]
symbol
;
identifier
NewLine
identifier
NewLine
identifier
long
identifier
long
identifier
findPartial
symbol
(
identifier
quaternion
identifier
q
symbol
,
identifier
long
identifier
long
identifier
start
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
practicalX
symbol
=
identifier
min
symbol
(
identifier
SOME
identifier
GENEROUS
identifier
UPPER
identifier
BOUND
symbol
,
identifier
X
symbol
)
symbol
;
identifier
NewLine
identifier
long
identifier
long
identifier
found
symbol
=
identifier
NOT
identifier
FOUND
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
L
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
j
symbol
=
integerConstant
0
symbol
;
identifier
j
symbol
<
identifier
practicalX
symbol
;
identifier
j
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
long
identifier
long
identifier
curPos
symbol
=
identifier
L
symbol
*
identifier
j
symbol
+
identifier
i
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
curPos
symbol
>
symbol
=
identifier
start
symbol
&
symbol
&
identifier
powers
symbol
[
identifier
j
symbol
]
symbol
*
identifier
partial
symbol
[
identifier
i
symbol
]
symbol
=
symbol
=
identifier
q
symbol
)
identifier
NewLine
identifier
found
symbol
=
identifier
min
symbol
(
identifier
found
symbol
,
identifier
curPos
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
identifier
found
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
bool
identifier
solve
symbol
(
symbol
)
symbol
{
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
L
symbol
>
symbol
>
identifier
X
symbol
;
identifier
NewLine
identifier
assert
symbol
(
identifier
L
symbol
>
symbol
=
integerConstant
1
symbol
&
symbol
&
identifier
L
symbol
<
symbol
=
identifier
MAX
identifier
LEN
symbol
)
symbol
;
identifier
NewLine
identifier
assert
symbol
(
identifier
X
symbol
>
symbol
=
integerConstant
1
symbol
&
symbol
&
identifier
X
symbol
<
symbol
=
identifier
MAX
identifier
X
symbol
)
symbol
;
identifier
NewLine
identifier
assert
symbol
(
identifier
L
symbol
*
identifier
X
symbol
<
symbol
=
identifier
MAX
identifier
LX
symbol
)
symbol
;
identifier
NewLine
identifier
string
identifier
s
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
s
symbol
;
identifier
NewLine
identifier
assert
symbol
(
symbol
(
keyword
int
symbol
)
identifier
s
symbol
.
identifier
size
symbol
(
symbol
)
symbol
=
symbol
=
identifier
L
symbol
)
symbol
;
identifier
NewLine
identifier
partial
symbol
[
integerConstant
0
symbol
]
symbol
=
identifier
quaternion
symbol
(
integerConstant
0
symbol
)
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
L
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
assert
symbol
(
identifier
s
symbol
[
identifier
i
symbol
]
symbol
=
symbol
=
identifier
i
symbol
|
symbol
|
identifier
s
symbol
[
identifier
i
symbol
]
symbol
=
symbol
=
identifier
j
symbol
|
symbol
|
identifier
s
symbol
[
identifier
i
symbol
]
symbol
=
symbol
=
identifier
k
symbol
)
symbol
;
identifier
NewLine
identifier
partial
symbol
[
identifier
i
symbol
+
integerConstant
1
symbol
]
symbol
=
identifier
partial
symbol
[
identifier
i
symbol
]
symbol
*
symbol
(
identifier
quaternion
symbol
)
symbol
{
identifier
s
symbol
[
identifier
i
symbol
]
symbol
-
identifier
h
symbol
}
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
assert
symbol
(
identifier
pow
symbol
(
identifier
partial
symbol
[
identifier
L
symbol
]
symbol
,
identifier
X
symbol
)
symbol
=
symbol
=
identifier
pow
symbol
(
identifier
partial
symbol
[
identifier
L
symbol
]
symbol
,
identifier
X
integerConstant
4
symbol
)
symbol
)
symbol
;
keyword
if
symbol
(
identifier
pow
symbol
(
identifier
partial
symbol
[
identifier
L
symbol
]
symbol
,
identifier
X
symbol
)
symbol
=
identifier
neg1
symbol
)
identifier
NewLine
keyword
return
keyword
false
symbol
;
identifier
NewLine
identifier
powers
symbol
[
integerConstant
0
symbol
]
symbol
=
identifier
quaternion
symbol
(
symbol
)
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
1
symbol
;
identifier
i
symbol
<
identifier
SOME
identifier
GENEROUS
identifier
UPPER
identifier
BOUND
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
powers
symbol
[
identifier
i
symbol
]
symbol
=
identifier
powers
symbol
[
identifier
i
symbol
-
integerConstant
1
symbol
]
symbol
*
identifier
partial
symbol
[
identifier
L
symbol
]
symbol
;
identifier
NewLine
identifier
assert
symbol
(
identifier
powers
symbol
[
identifier
i
symbol
]
symbol
=
symbol
=
identifier
pow
symbol
(
identifier
partial
symbol
[
identifier
L
symbol
]
symbol
,
identifier
i
symbol
)
symbol
)
symbol
;
symbol
}
identifier
NewLine
identifier
long
identifier
long
identifier
firstI
symbol
=
identifier
findPartial
symbol
(
identifier
posI
symbol
,
integerConstant
0
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
firstI
symbol
=
symbol
=
identifier
NOT
identifier
FOUND
symbol
)
keyword
return
keyword
false
symbol
;
identifier
NewLine
identifier
long
identifier
long
identifier
firstK
symbol
=
identifier
findPartial
symbol
(
identifier
posK
symbol
,
identifier
firstI
symbol
)
symbol
;
identifier
NewLine
keyword
return
identifier
firstK
symbol
=
identifier
NOT
identifier
FOUND
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
T
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
T
symbol
;
identifier
NewLine
identifier
assert
symbol
(
identifier
T
symbol
>
symbol
=
integerConstant
1
symbol
&
symbol
&
identifier
T
symbol
<
symbol
=
integerConstant
100
symbol
)
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
T
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
cout
symbol
<
symbol
<
stringConstant
Case #
symbol
<
symbol
<
symbol
(
identifier
i
symbol
+
integerConstant
1
symbol
)
symbol
<
symbol
<
stringConstant
: 
symbol
<
symbol
<
symbol
(
identifier
solve
symbol
(
symbol
)
stringConstant
YES
stringConstant
NO
symbol
)
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/kcm1700.0.cpp file...

identifier
include
symbol
<
identifier
cstdio
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
algorithm
symbol
>
identifier
NewLine
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
keyword
char
identifier
dat
symbol
[
integerConstant
2000
symbol
]
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
T
symbol
;
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
T
symbol
)
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
testcase
symbol
=
integerConstant
1
symbol
;
identifier
testcase
symbol
<
symbol
=
identifier
T
symbol
;
identifier
testcase
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
smax
symbol
;
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
smax
symbol
)
symbol
;
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%s
symbol
,
identifier
dat
symbol
)
symbol
;
identifier
NewLine
keyword
int
identifier
cnt
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
keyword
int
identifier
ans
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
symbol
=
identifier
smax
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
cnt
symbol
<
identifier
i
symbol
)
symbol
{
identifier
NewLine
identifier
ans
symbol
+
symbol
+
symbol
;
identifier
NewLine
identifier
cnt
symbol
+
symbol
+
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
cnt
symbol
+
symbol
=
identifier
dat
symbol
[
identifier
i
symbol
]
symbol
-
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: %d\n
symbol
,
identifier
testcase
symbol
,
identifier
ans
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
symbol
}
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/kcm1700.1.cpp file...

identifier
include
symbol
<
identifier
cstdio
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
algorithm
symbol
>
identifier
NewLine
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
dat
symbol
[
integerConstant
2000
symbol
]
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
T
symbol
;
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
T
symbol
)
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
testcase
symbol
=
integerConstant
1
symbol
;
identifier
testcase
symbol
<
symbol
=
identifier
T
symbol
;
identifier
testcase
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
ans
symbol
=
identifier
INT
identifier
MAX
symbol
;
identifier
NewLine
keyword
int
identifier
n
symbol
;
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
n
symbol
)
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
n
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
dat
symbol
[
identifier
i
symbol
]
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
int
identifier
maxp
symbol
=
symbol
*
identifier
max
identifier
element
symbol
(
identifier
dat
symbol
,
identifier
dat
symbol
+
identifier
n
symbol
)
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
maxv
symbol
=
integerConstant
1
symbol
;
identifier
maxv
symbol
<
symbol
=
identifier
maxp
symbol
;
identifier
maxv
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
stage1
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
n
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
stage1
symbol
+
symbol
=
symbol
(
identifier
dat
symbol
[
identifier
i
symbol
]
symbol
-
integerConstant
1
symbol
)
symbol
/
identifier
maxv
symbol
;
identifier
NewLine
identifier
ans
symbol
=
identifier
min
symbol
(
identifier
ans
symbol
,
identifier
stage1
symbol
+
identifier
maxv
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: %d\n
symbol
,
identifier
testcase
symbol
,
identifier
ans
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
symbol
}
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/kcm1700.2.cpp file...

identifier
include
symbol
<
identifier
cstdio
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstring
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
algorithm
symbol
>
identifier
NewLine
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
cloj
symbol
[
integerConstant
24
symbol
]
symbol
[
integerConstant
24
symbol
]
symbol
;
identifier
NewLine
keyword
int
identifier
rep
symbol
[
integerConstant
24
symbol
]
symbol
[
integerConstant
24
symbol
]
symbol
;
identifier
NewLine
keyword
int
identifier
tmp
symbol
[
integerConstant
24
symbol
]
symbol
[
integerConstant
24
symbol
]
symbol
;
identifier
NewLine
keyword
char
identifier
dat
symbol
[
integerConstant
1000003
symbol
]
symbol
;
identifier
NewLine
keyword
int
identifier
trans
symbol
[
integerConstant
4
symbol
]
symbol
[
integerConstant
24
symbol
]
symbol
[
integerConstant
24
symbol
]
symbol
;
identifier
NewLine
identifier
NewLine
identifier
const
keyword
int
identifier
quaternion
identifier
multiplication
symbol
[
integerConstant
4
symbol
]
symbol
[
integerConstant
4
symbol
]
symbol
=
identifier
NewLine
symbol
{
identifier
NewLine
integerConstant
0
symbol
,
integerConstant
1
symbol
,
integerConstant
2
symbol
,
integerConstant
3
symbol
,
identifier
NewLine
integerConstant
1
symbol
,
integerConstant
4
symbol
,
integerConstant
3
symbol
,
integerConstant
6
symbol
,
identifier
NewLine
integerConstant
2
symbol
,
integerConstant
7
symbol
,
integerConstant
4
symbol
,
integerConstant
1
symbol
,
identifier
NewLine
integerConstant
3
symbol
,
integerConstant
2
symbol
,
integerConstant
5
symbol
,
integerConstant
4
identifier
NewLine
symbol
}
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
multiply
symbol
(
keyword
int
identifier
a
symbol
,
keyword
int
identifier
b
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
neg
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
a
symbol
>
symbol
=
integerConstant
4
symbol
)
symbol
{
identifier
neg
symbol
=
integerConstant
1
symbol
;
identifier
a
symbol
-
symbol
=
integerConstant
4
symbol
;
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
b
symbol
>
symbol
=
integerConstant
4
symbol
)
symbol
{
identifier
neg
symbol
=
integerConstant
1
symbol
;
identifier
b
symbol
-
symbol
=
integerConstant
4
symbol
;
symbol
}
identifier
NewLine
keyword
return
symbol
(
identifier
quaternion
identifier
multiplication
symbol
[
identifier
a
symbol
]
symbol
[
identifier
b
symbol
]
symbol
+
identifier
neg
symbol
*
integerConstant
4
symbol
)
integerConstant
8
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
void
identifier
matmul
symbol
(
keyword
int
identifier
dest
symbol
[
integerConstant
24
symbol
]
symbol
[
integerConstant
24
symbol
]
symbol
,
keyword
int
identifier
mul
symbol
[
integerConstant
24
symbol
]
symbol
[
integerConstant
24
symbol
]
symbol
)
symbol
{
identifier
NewLine
identifier
memset
symbol
(
identifier
tmp
symbol
,
integerConstant
0
symbol
,
identifier
sizeof
symbol
(
identifier
tmp
symbol
)
symbol
)
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
integerConstant
24
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
j
symbol
=
integerConstant
0
symbol
;
identifier
j
symbol
<
integerConstant
24
symbol
;
identifier
j
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
station
symbol
=
identifier
dest
symbol
[
identifier
j
symbol
]
symbol
[
identifier
i
symbol
]
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
k
symbol
=
integerConstant
0
symbol
;
identifier
k
symbol
<
integerConstant
24
symbol
;
identifier
k
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
tmp
symbol
[
identifier
j
symbol
]
symbol
[
identifier
k
symbol
]
symbol
|
symbol
=
symbol
(
identifier
station
symbol
&
symbol
&
identifier
mul
symbol
[
identifier
i
symbol
]
symbol
[
identifier
k
symbol
]
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
memcpy
symbol
(
identifier
dest
symbol
,
identifier
tmp
symbol
,
identifier
sizeof
symbol
(
identifier
tmp
symbol
)
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
T
symbol
;
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
T
symbol
)
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
cur
symbol
=
integerConstant
1
symbol
;
identifier
cur
symbol
<
symbol
=
integerConstant
3
symbol
;
identifier
cur
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
row
symbol
=
integerConstant
0
symbol
;
identifier
row
symbol
<
integerConstant
24
symbol
;
identifier
row
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
index
symbol
=
identifier
row
symbol
/
integerConstant
8
symbol
;
identifier
NewLine
keyword
int
identifier
pre
symbol
=
identifier
row
integerConstant
8
symbol
;
identifier
NewLine
keyword
int
identifier
next
symbol
=
identifier
multiply
symbol
(
identifier
pre
symbol
,
identifier
cur
symbol
)
symbol
;
identifier
NewLine
identifier
trans
symbol
[
identifier
cur
symbol
]
symbol
[
identifier
row
symbol
]
symbol
[
integerConstant
8
symbol
*
identifier
index
symbol
+
identifier
next
symbol
]
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
keyword
if
symbol
(
symbol
(
identifier
index
symbol
=
symbol
=
integerConstant
0
symbol
&
symbol
&
identifier
next
symbol
=
symbol
=
integerConstant
1
symbol
)
symbol
|
symbol
|
identifier
NewLine
symbol
(
identifier
index
symbol
=
symbol
=
integerConstant
1
symbol
&
symbol
&
identifier
next
symbol
=
symbol
=
integerConstant
2
symbol
)
symbol
)
symbol
{
identifier
NewLine
identifier
trans
symbol
[
identifier
cur
symbol
]
symbol
[
identifier
row
symbol
]
symbol
[
integerConstant
8
symbol
*
symbol
(
identifier
index
symbol
+
integerConstant
1
symbol
)
symbol
+
integerConstant
0
symbol
]
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
testcase
symbol
=
integerConstant
1
symbol
;
identifier
testcase
symbol
<
symbol
=
identifier
T
symbol
;
identifier
testcase
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
bool
identifier
ans
symbol
=
keyword
false
symbol
;
identifier
NewLine
keyword
int
identifier
L
symbol
;
identifier
NewLine
identifier
long
identifier
long
identifier
X
symbol
;
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d%lld
symbol
,
symbol
&
identifier
L
symbol
,
symbol
&
identifier
X
symbol
)
symbol
;
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%s
symbol
,
identifier
dat
symbol
)
symbol
;
identifier
NewLine
identifier
memset
symbol
(
identifier
cloj
symbol
,
integerConstant
0
symbol
,
identifier
sizeof
symbol
(
identifier
cloj
symbol
)
symbol
)
symbol
;
identifier
NewLine
identifier
memset
symbol
(
identifier
rep
symbol
,
integerConstant
0
symbol
,
identifier
sizeof
symbol
(
identifier
rep
symbol
)
symbol
)
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
integerConstant
24
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
cloj
symbol
[
identifier
i
symbol
]
symbol
[
identifier
i
symbol
]
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
identifier
rep
symbol
[
identifier
i
symbol
]
symbol
[
identifier
i
symbol
]
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
L
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
cur
symbol
=
identifier
dat
symbol
[
identifier
i
symbol
]
symbol
-
identifier
i
symbol
+
integerConstant
1
symbol
;
identifier
NewLine
identifier
matmul
symbol
(
identifier
cloj
symbol
,
identifier
trans
symbol
[
identifier
cur
symbol
]
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
while
symbol
(
identifier
X
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
X
symbol
&
integerConstant
1
symbol
)
symbol
{
identifier
NewLine
identifier
matmul
symbol
(
identifier
rep
symbol
,
identifier
cloj
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
matmul
symbol
(
identifier
cloj
symbol
,
identifier
cloj
symbol
)
symbol
;
identifier
NewLine
identifier
X
symbol
>
symbol
>
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
ans
symbol
=
identifier
rep
symbol
[
integerConstant
0
symbol
]
symbol
[
integerConstant
2
symbol
*
integerConstant
8
symbol
+
integerConstant
3
symbol
]
symbol
;
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: %s\n
symbol
,
identifier
testcase
symbol
,
identifier
ans
stringConstant
YES
stringConstant
NO
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
symbol
}
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/kevinsogo.0.cpp file...

identifier
include
symbol
<
identifier
stdio
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
stdlib
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
math
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
string
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
define
identifier
fo
symbol
(
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
dfo
symbol
(
keyword
int
symbol
,
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
NewLine
identifier
define
identifier
fr
symbol
(
identifier
i
symbol
,
identifier
n
symbol
)
identifier
dfr
symbol
(
keyword
int
symbol
,
identifier
i
symbol
,
identifier
n
symbol
)
identifier
NewLine
identifier
define
identifier
fe
symbol
(
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
dfe
symbol
(
keyword
int
symbol
,
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
NewLine
identifier
define
identifier
fq
symbol
(
identifier
i
symbol
,
identifier
n
symbol
)
identifier
dfq
symbol
(
keyword
int
symbol
,
identifier
i
symbol
,
identifier
n
symbol
)
identifier
NewLine
identifier
define
identifier
nfo
symbol
(
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
dfo
symbol
(
symbol
,
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
NewLine
identifier
define
identifier
nfr
symbol
(
identifier
i
symbol
,
identifier
n
symbol
)
identifier
dfr
symbol
(
symbol
,
identifier
i
symbol
,
identifier
n
symbol
)
identifier
NewLine
identifier
define
identifier
nfe
symbol
(
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
dfe
symbol
(
symbol
,
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
NewLine
identifier
define
identifier
nfq
symbol
(
identifier
i
symbol
,
identifier
n
symbol
)
identifier
dfq
symbol
(
symbol
,
identifier
i
symbol
,
identifier
n
symbol
)
identifier
NewLine
identifier
define
identifier
dfo
symbol
(
identifier
d
symbol
,
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
for
symbol
(
identifier
d
identifier
i
symbol
=
symbol
(
identifier
a
symbol
)
symbol
;
identifier
i
symbol
<
symbol
(
identifier
b
symbol
)
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
define
identifier
dfr
symbol
(
identifier
d
symbol
,
identifier
i
symbol
,
identifier
n
symbol
)
identifier
dfo
symbol
(
identifier
d
symbol
,
identifier
i
symbol
,
integerConstant
0
symbol
,
identifier
n
symbol
)
identifier
NewLine
identifier
define
identifier
dfe
symbol
(
identifier
d
symbol
,
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
for
symbol
(
identifier
d
identifier
i
symbol
=
symbol
(
identifier
a
symbol
)
symbol
;
identifier
i
symbol
<
symbol
=
symbol
(
identifier
b
symbol
)
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
define
identifier
dfq
symbol
(
identifier
d
symbol
,
identifier
i
symbol
,
identifier
n
symbol
)
identifier
dfe
symbol
(
identifier
d
symbol
,
identifier
i
symbol
,
integerConstant
1
symbol
,
identifier
n
symbol
)
identifier
NewLine
identifier
define
identifier
ffo
symbol
(
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
dffo
symbol
(
keyword
int
symbol
,
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
NewLine
identifier
define
identifier
ffr
symbol
(
identifier
i
symbol
,
identifier
n
symbol
)
identifier
dffr
symbol
(
keyword
int
symbol
,
identifier
i
symbol
,
identifier
n
symbol
)
identifier
NewLine
identifier
define
identifier
ffe
symbol
(
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
dffe
symbol
(
keyword
int
symbol
,
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
NewLine
identifier
define
identifier
ffq
symbol
(
identifier
i
symbol
,
identifier
n
symbol
)
identifier
dffq
symbol
(
keyword
int
symbol
,
identifier
i
symbol
,
identifier
n
symbol
)
identifier
NewLine
identifier
define
identifier
nffo
symbol
(
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
dffo
symbol
(
symbol
,
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
NewLine
identifier
define
identifier
nffr
symbol
(
identifier
i
symbol
,
identifier
n
symbol
)
identifier
dffr
symbol
(
symbol
,
identifier
i
symbol
,
identifier
n
symbol
)
identifier
NewLine
identifier
define
identifier
nffe
symbol
(
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
dffe
symbol
(
symbol
,
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
NewLine
identifier
define
identifier
nffq
symbol
(
identifier
i
symbol
,
identifier
n
symbol
)
identifier
dffq
symbol
(
symbol
,
identifier
i
symbol
,
identifier
n
symbol
)
identifier
NewLine
identifier
define
identifier
dffo
symbol
(
identifier
d
symbol
,
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
for
symbol
(
identifier
d
identifier
i
symbol
=
symbol
(
identifier
b
symbol
)
symbol
-
integerConstant
1
symbol
;
identifier
i
symbol
>
symbol
=
symbol
(
identifier
a
symbol
)
symbol
;
identifier
i
symbol
-
symbol
-
symbol
)
identifier
NewLine
identifier
define
identifier
dffr
symbol
(
identifier
d
symbol
,
identifier
i
symbol
,
identifier
n
symbol
)
identifier
dffo
symbol
(
identifier
d
symbol
,
identifier
i
symbol
,
integerConstant
0
symbol
,
identifier
n
symbol
)
identifier
NewLine
identifier
define
identifier
dffe
symbol
(
identifier
d
symbol
,
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
for
symbol
(
identifier
d
identifier
i
symbol
=
symbol
(
identifier
b
symbol
)
symbol
;
identifier
i
symbol
>
symbol
=
symbol
(
identifier
a
symbol
)
symbol
;
identifier
i
symbol
-
symbol
-
symbol
)
identifier
NewLine
identifier
define
identifier
dffq
symbol
(
identifier
d
symbol
,
identifier
i
symbol
,
identifier
n
symbol
)
identifier
dffe
symbol
(
identifier
d
symbol
,
identifier
i
symbol
,
integerConstant
1
symbol
,
identifier
n
symbol
)
identifier
NewLine
identifier
define
identifier
ll
identifier
long
identifier
long
identifier
NewLine
identifier
define
identifier
alok
symbol
(
identifier
n
symbol
,
identifier
t
symbol
)
symbol
(
symbol
(
identifier
t
symbol
*
symbol
)
identifier
malloc
symbol
(
symbol
(
identifier
n
symbol
)
symbol
*
identifier
sizeof
symbol
(
identifier
t
symbol
)
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
pf
identifier
printf
identifier
NewLine
identifier
define
identifier
sf
identifier
scanf
identifier
NewLine
identifier
define
identifier
pln
identifier
pf
symbol
(
stringConstant
\n
symbol
)
identifier
NewLine
identifier
NewLine
keyword
char
identifier
s
symbol
[
integerConstant
11111
symbol
]
symbol
;
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
z
symbol
;
identifier
NewLine
identifier
sf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
z
symbol
)
symbol
;
identifier
NewLine
identifier
fq
symbol
(
identifier
cas
symbol
,
identifier
z
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
n
symbol
;
identifier
NewLine
identifier
sf
symbol
(
stringConstant
%d%s
symbol
,
symbol
&
identifier
n
symbol
,
identifier
s
symbol
)
symbol
;
identifier
NewLine
identifier
fe
symbol
(
identifier
i
symbol
,
integerConstant
0
symbol
,
identifier
n
symbol
)
identifier
s
symbol
[
identifier
i
symbol
]
symbol
-
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
keyword
int
identifier
ans
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
keyword
int
identifier
clp
symbol
=
identifier
s
symbol
[
integerConstant
0
symbol
]
symbol
;
identifier
NewLine
identifier
fq
symbol
(
identifier
i
symbol
,
identifier
n
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
clp
symbol
<
identifier
i
symbol
)
symbol
{
identifier
NewLine
identifier
ans
symbol
+
symbol
=
identifier
i
symbol
-
identifier
clp
symbol
;
identifier
NewLine
identifier
clp
symbol
=
identifier
i
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
clp
symbol
+
symbol
=
identifier
s
symbol
[
identifier
i
symbol
]
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
pf
symbol
(
stringConstant
Case #%d: %d\n
symbol
,
identifier
cas
symbol
,
identifier
ans
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/kevinsogo.1.cpp file...

identifier
include
symbol
<
identifier
stdio
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
stdlib
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
math
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
string
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
define
identifier
fo
symbol
(
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
dfo
symbol
(
keyword
int
symbol
,
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
NewLine
identifier
define
identifier
fr
symbol
(
identifier
i
symbol
,
identifier
n
symbol
)
identifier
dfr
symbol
(
keyword
int
symbol
,
identifier
i
symbol
,
identifier
n
symbol
)
identifier
NewLine
identifier
define
identifier
fe
symbol
(
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
dfe
symbol
(
keyword
int
symbol
,
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
NewLine
identifier
define
identifier
fq
symbol
(
identifier
i
symbol
,
identifier
n
symbol
)
identifier
dfq
symbol
(
keyword
int
symbol
,
identifier
i
symbol
,
identifier
n
symbol
)
identifier
NewLine
identifier
define
identifier
nfo
symbol
(
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
dfo
symbol
(
symbol
,
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
NewLine
identifier
define
identifier
nfr
symbol
(
identifier
i
symbol
,
identifier
n
symbol
)
identifier
dfr
symbol
(
symbol
,
identifier
i
symbol
,
identifier
n
symbol
)
identifier
NewLine
identifier
define
identifier
nfe
symbol
(
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
dfe
symbol
(
symbol
,
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
NewLine
identifier
define
identifier
nfq
symbol
(
identifier
i
symbol
,
identifier
n
symbol
)
identifier
dfq
symbol
(
symbol
,
identifier
i
symbol
,
identifier
n
symbol
)
identifier
NewLine
identifier
define
identifier
dfo
symbol
(
identifier
d
symbol
,
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
for
symbol
(
identifier
d
identifier
i
symbol
=
symbol
(
identifier
a
symbol
)
symbol
;
identifier
i
symbol
<
symbol
(
identifier
b
symbol
)
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
define
identifier
dfr
symbol
(
identifier
d
symbol
,
identifier
i
symbol
,
identifier
n
symbol
)
identifier
dfo
symbol
(
identifier
d
symbol
,
identifier
i
symbol
,
integerConstant
0
symbol
,
identifier
n
symbol
)
identifier
NewLine
identifier
define
identifier
dfe
symbol
(
identifier
d
symbol
,
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
for
symbol
(
identifier
d
identifier
i
symbol
=
symbol
(
identifier
a
symbol
)
symbol
;
identifier
i
symbol
<
symbol
=
symbol
(
identifier
b
symbol
)
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
define
identifier
dfq
symbol
(
identifier
d
symbol
,
identifier
i
symbol
,
identifier
n
symbol
)
identifier
dfe
symbol
(
identifier
d
symbol
,
identifier
i
symbol
,
integerConstant
1
symbol
,
identifier
n
symbol
)
identifier
NewLine
identifier
define
identifier
ffo
symbol
(
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
dffo
symbol
(
keyword
int
symbol
,
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
NewLine
identifier
define
identifier
ffr
symbol
(
identifier
i
symbol
,
identifier
n
symbol
)
identifier
dffr
symbol
(
keyword
int
symbol
,
identifier
i
symbol
,
identifier
n
symbol
)
identifier
NewLine
identifier
define
identifier
ffe
symbol
(
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
dffe
symbol
(
keyword
int
symbol
,
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
NewLine
identifier
define
identifier
ffq
symbol
(
identifier
i
symbol
,
identifier
n
symbol
)
identifier
dffq
symbol
(
keyword
int
symbol
,
identifier
i
symbol
,
identifier
n
symbol
)
identifier
NewLine
identifier
define
identifier
nffo
symbol
(
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
dffo
symbol
(
symbol
,
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
NewLine
identifier
define
identifier
nffr
symbol
(
identifier
i
symbol
,
identifier
n
symbol
)
identifier
dffr
symbol
(
symbol
,
identifier
i
symbol
,
identifier
n
symbol
)
identifier
NewLine
identifier
define
identifier
nffe
symbol
(
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
dffe
symbol
(
symbol
,
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
NewLine
identifier
define
identifier
nffq
symbol
(
identifier
i
symbol
,
identifier
n
symbol
)
identifier
dffq
symbol
(
symbol
,
identifier
i
symbol
,
identifier
n
symbol
)
identifier
NewLine
identifier
define
identifier
dffo
symbol
(
identifier
d
symbol
,
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
for
symbol
(
identifier
d
identifier
i
symbol
=
symbol
(
identifier
b
symbol
)
symbol
-
integerConstant
1
symbol
;
identifier
i
symbol
>
symbol
=
symbol
(
identifier
a
symbol
)
symbol
;
identifier
i
symbol
-
symbol
-
symbol
)
identifier
NewLine
identifier
define
identifier
dffr
symbol
(
identifier
d
symbol
,
identifier
i
symbol
,
identifier
n
symbol
)
identifier
dffo
symbol
(
identifier
d
symbol
,
identifier
i
symbol
,
integerConstant
0
symbol
,
identifier
n
symbol
)
identifier
NewLine
identifier
define
identifier
dffe
symbol
(
identifier
d
symbol
,
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
for
symbol
(
identifier
d
identifier
i
symbol
=
symbol
(
identifier
b
symbol
)
symbol
;
identifier
i
symbol
>
symbol
=
symbol
(
identifier
a
symbol
)
symbol
;
identifier
i
symbol
-
symbol
-
symbol
)
identifier
NewLine
identifier
define
identifier
dffq
symbol
(
identifier
d
symbol
,
identifier
i
symbol
,
identifier
n
symbol
)
identifier
dffe
symbol
(
identifier
d
symbol
,
identifier
i
symbol
,
integerConstant
1
symbol
,
identifier
n
symbol
)
identifier
NewLine
identifier
define
identifier
ll
identifier
long
identifier
long
identifier
NewLine
identifier
define
identifier
alok
symbol
(
identifier
n
symbol
,
identifier
t
symbol
)
symbol
(
symbol
(
identifier
t
symbol
*
symbol
)
identifier
malloc
symbol
(
symbol
(
identifier
n
symbol
)
symbol
*
identifier
sizeof
symbol
(
identifier
t
symbol
)
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
pf
identifier
printf
identifier
NewLine
identifier
define
identifier
sf
identifier
scanf
identifier
NewLine
identifier
define
identifier
pln
identifier
pf
symbol
(
stringConstant
\n
symbol
)
identifier
NewLine
identifier
NewLine
keyword
int
identifier
p
symbol
[
integerConstant
111111
symbol
]
symbol
;
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
z
symbol
;
identifier
NewLine
identifier
sf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
z
symbol
)
symbol
;
identifier
NewLine
identifier
fq
symbol
(
identifier
cas
symbol
,
identifier
z
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
n
symbol
;
identifier
NewLine
identifier
sf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
n
symbol
)
symbol
;
identifier
NewLine
keyword
int
identifier
m
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
fr
symbol
(
identifier
i
symbol
,
identifier
n
symbol
)
identifier
sf
symbol
(
stringConstant
%d
symbol
,
identifier
p
symbol
+
identifier
i
symbol
)
symbol
,
identifier
m
symbol
=
identifier
m
symbol
>
identifier
p
symbol
[
identifier
i
symbol
]
identifier
m
identifier
p
symbol
[
identifier
i
symbol
]
symbol
;
identifier
NewLine
keyword
int
identifier
ans
symbol
=
integerConstant
11111111
symbol
;
identifier
NewLine
identifier
fq
symbol
(
identifier
v
symbol
,
identifier
m
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
ptl
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
fr
symbol
(
identifier
i
symbol
,
identifier
n
symbol
)
symbol
{
identifier
NewLine
identifier
ptl
symbol
+
symbol
=
symbol
(
identifier
p
symbol
[
identifier
i
symbol
]
symbol
-
integerConstant
1
symbol
)
symbol
/
identifier
v
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
int
identifier
cur
symbol
=
identifier
ptl
symbol
+
identifier
v
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
ans
symbol
>
identifier
cur
symbol
)
identifier
ans
symbol
=
identifier
cur
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
pf
symbol
(
stringConstant
Case #%d: %d\n
symbol
,
identifier
cas
symbol
,
identifier
ans
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/kevinsogo.2.cpp file...

identifier
include
symbol
<
identifier
stdio
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
stdlib
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
math
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
string
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
define
identifier
fo
symbol
(
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
dfo
symbol
(
keyword
int
symbol
,
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
NewLine
identifier
define
identifier
fr
symbol
(
identifier
i
symbol
,
identifier
n
symbol
)
identifier
dfr
symbol
(
keyword
int
symbol
,
identifier
i
symbol
,
identifier
n
symbol
)
identifier
NewLine
identifier
define
identifier
fe
symbol
(
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
dfe
symbol
(
keyword
int
symbol
,
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
NewLine
identifier
define
identifier
fq
symbol
(
identifier
i
symbol
,
identifier
n
symbol
)
identifier
dfq
symbol
(
keyword
int
symbol
,
identifier
i
symbol
,
identifier
n
symbol
)
identifier
NewLine
identifier
define
identifier
nfo
symbol
(
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
dfo
symbol
(
symbol
,
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
NewLine
identifier
define
identifier
nfr
symbol
(
identifier
i
symbol
,
identifier
n
symbol
)
identifier
dfr
symbol
(
symbol
,
identifier
i
symbol
,
identifier
n
symbol
)
identifier
NewLine
identifier
define
identifier
nfe
symbol
(
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
dfe
symbol
(
symbol
,
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
NewLine
identifier
define
identifier
nfq
symbol
(
identifier
i
symbol
,
identifier
n
symbol
)
identifier
dfq
symbol
(
symbol
,
identifier
i
symbol
,
identifier
n
symbol
)
identifier
NewLine
identifier
define
identifier
dfo
symbol
(
identifier
d
symbol
,
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
for
symbol
(
identifier
d
identifier
i
symbol
=
symbol
(
identifier
a
symbol
)
symbol
;
identifier
i
symbol
<
symbol
(
identifier
b
symbol
)
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
define
identifier
dfr
symbol
(
identifier
d
symbol
,
identifier
i
symbol
,
identifier
n
symbol
)
identifier
dfo
symbol
(
identifier
d
symbol
,
identifier
i
symbol
,
integerConstant
0
symbol
,
identifier
n
symbol
)
identifier
NewLine
identifier
define
identifier
dfe
symbol
(
identifier
d
symbol
,
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
for
symbol
(
identifier
d
identifier
i
symbol
=
symbol
(
identifier
a
symbol
)
symbol
;
identifier
i
symbol
<
symbol
=
symbol
(
identifier
b
symbol
)
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
define
identifier
dfq
symbol
(
identifier
d
symbol
,
identifier
i
symbol
,
identifier
n
symbol
)
identifier
dfe
symbol
(
identifier
d
symbol
,
identifier
i
symbol
,
integerConstant
1
symbol
,
identifier
n
symbol
)
identifier
NewLine
identifier
define
identifier
ffo
symbol
(
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
dffo
symbol
(
keyword
int
symbol
,
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
NewLine
identifier
define
identifier
ffr
symbol
(
identifier
i
symbol
,
identifier
n
symbol
)
identifier
dffr
symbol
(
keyword
int
symbol
,
identifier
i
symbol
,
identifier
n
symbol
)
identifier
NewLine
identifier
define
identifier
ffe
symbol
(
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
dffe
symbol
(
keyword
int
symbol
,
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
NewLine
identifier
define
identifier
ffq
symbol
(
identifier
i
symbol
,
identifier
n
symbol
)
identifier
dffq
symbol
(
keyword
int
symbol
,
identifier
i
symbol
,
identifier
n
symbol
)
identifier
NewLine
identifier
define
identifier
nffo
symbol
(
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
dffo
symbol
(
symbol
,
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
NewLine
identifier
define
identifier
nffr
symbol
(
identifier
i
symbol
,
identifier
n
symbol
)
identifier
dffr
symbol
(
symbol
,
identifier
i
symbol
,
identifier
n
symbol
)
identifier
NewLine
identifier
define
identifier
nffe
symbol
(
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
dffe
symbol
(
symbol
,
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
NewLine
identifier
define
identifier
nffq
symbol
(
identifier
i
symbol
,
identifier
n
symbol
)
identifier
dffq
symbol
(
symbol
,
identifier
i
symbol
,
identifier
n
symbol
)
identifier
NewLine
identifier
define
identifier
dffo
symbol
(
identifier
d
symbol
,
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
for
symbol
(
identifier
d
identifier
i
symbol
=
symbol
(
identifier
b
symbol
)
symbol
-
integerConstant
1
symbol
;
identifier
i
symbol
>
symbol
=
symbol
(
identifier
a
symbol
)
symbol
;
identifier
i
symbol
-
symbol
-
symbol
)
identifier
NewLine
identifier
define
identifier
dffr
symbol
(
identifier
d
symbol
,
identifier
i
symbol
,
identifier
n
symbol
)
identifier
dffo
symbol
(
identifier
d
symbol
,
identifier
i
symbol
,
integerConstant
0
symbol
,
identifier
n
symbol
)
identifier
NewLine
identifier
define
identifier
dffe
symbol
(
identifier
d
symbol
,
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
for
symbol
(
identifier
d
identifier
i
symbol
=
symbol
(
identifier
b
symbol
)
symbol
;
identifier
i
symbol
>
symbol
=
symbol
(
identifier
a
symbol
)
symbol
;
identifier
i
symbol
-
symbol
-
symbol
)
identifier
NewLine
identifier
define
identifier
dffq
symbol
(
identifier
d
symbol
,
identifier
i
symbol
,
identifier
n
symbol
)
identifier
dffe
symbol
(
identifier
d
symbol
,
identifier
i
symbol
,
integerConstant
1
symbol
,
identifier
n
symbol
)
identifier
NewLine
identifier
define
identifier
ll
identifier
long
identifier
long
identifier
NewLine
identifier
define
identifier
alok
symbol
(
identifier
n
symbol
,
identifier
t
symbol
)
symbol
(
symbol
(
identifier
t
symbol
*
symbol
)
identifier
malloc
symbol
(
symbol
(
identifier
n
symbol
)
symbol
*
identifier
sizeof
symbol
(
identifier
t
symbol
)
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
pf
identifier
printf
identifier
NewLine
identifier
define
identifier
sf
identifier
scanf
identifier
NewLine
identifier
define
identifier
pln
identifier
pf
symbol
(
stringConstant
\n
symbol
)
identifier
NewLine
identifier
NewLine
identifier
define
identifier
I
integerConstant
10
identifier
NewLine
identifier
define
identifier
J
integerConstant
20
identifier
NewLine
identifier
define
identifier
K
integerConstant
30
identifier
NewLine
keyword
int
identifier
mul
symbol
[
integerConstant
111
symbol
]
symbol
[
integerConstant
111
symbol
]
symbol
;
identifier
NewLine
identifier
bool
identifier
good
symbol
[
integerConstant
111
symbol
]
symbol
;
identifier
NewLine
identifier
bool
identifier
chk
symbol
=
keyword
false
symbol
;
identifier
NewLine
identifier
struct
identifier
Q
symbol
{
identifier
NewLine
keyword
int
identifier
v
symbol
;
identifier
NewLine
identifier
Q
symbol
(
keyword
int
identifier
v
symbol
=
integerConstant
1
symbol
)
identifier
v
symbol
(
identifier
v
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
chk
symbol
&
symbol
&
symbol
(
identifier
v
symbol
<
integerConstant
0
identifier
good
symbol
[
symbol
-
identifier
v
symbol
]
identifier
good
symbol
[
identifier
v
symbol
]
symbol
)
symbol
)
identifier
pf
symbol
(
stringConstant
BAD!!!\n
symbol
)
symbol
,
identifier
exit
symbol
(
integerConstant
0
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
Q
identifier
operator
symbol
*
symbol
(
identifier
Q
symbol
&
identifier
other
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
v1
symbol
=
identifier
v
symbol
;
identifier
NewLine
keyword
int
identifier
v2
symbol
=
identifier
other
symbol
.
identifier
v
symbol
;
identifier
NewLine
keyword
int
identifier
sgn
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
v1
symbol
<
integerConstant
0
symbol
)
identifier
v1
symbol
=
symbol
-
identifier
v1
symbol
,
identifier
sgn
symbol
*
symbol
=
symbol
-
integerConstant
1
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
v2
symbol
<
integerConstant
0
symbol
)
identifier
v2
symbol
=
symbol
-
identifier
v2
symbol
,
identifier
sgn
symbol
*
symbol
=
symbol
-
integerConstant
1
symbol
;
identifier
NewLine
keyword
return
identifier
Q
symbol
(
identifier
sgn
symbol
*
identifier
mul
symbol
[
identifier
v1
symbol
]
symbol
[
identifier
v2
symbol
]
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
symbol
;
identifier
NewLine
identifier
NewLine
identifier
Q
identifier
seq
symbol
[
integerConstant
1111111
symbol
]
symbol
;
identifier
NewLine
keyword
char
identifier
s
symbol
[
integerConstant
111111
symbol
]
symbol
;
identifier
NewLine
identifier
NewLine
keyword
char
identifier
toval
symbol
[
integerConstant
256
symbol
]
symbol
;
identifier
NewLine
identifier
bool
identifier
pcan
symbol
[
integerConstant
4
symbol
]
symbol
[
integerConstant
8
symbol
]
symbol
;
identifier
NewLine
identifier
bool
identifier
ccan
symbol
[
integerConstant
4
symbol
]
symbol
[
integerConstant
8
symbol
]
symbol
;
identifier
NewLine
keyword
int
identifier
sqs
symbol
[
integerConstant
8
symbol
]
symbol
=
symbol
{
integerConstant
1
symbol
,
identifier
I
symbol
,
identifier
J
symbol
,
identifier
K
symbol
,
symbol
-
integerConstant
1
symbol
,
symbol
-
identifier
I
symbol
,
symbol
-
identifier
J
symbol
,
symbol
-
identifier
K
symbol
}
symbol
;
identifier
NewLine
identifier
Q
identifier
sqs
symbol
[
integerConstant
8
symbol
]
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
symbol
{
identifier
NewLine
identifier
chk
symbol
=
keyword
true
symbol
;
identifier
NewLine
identifier
good
symbol
[
integerConstant
1
symbol
]
symbol
=
identifier
good
symbol
[
identifier
I
symbol
]
symbol
=
identifier
good
symbol
[
identifier
J
symbol
]
symbol
=
identifier
good
symbol
[
identifier
K
symbol
]
symbol
=
keyword
true
symbol
;
identifier
NewLine
identifier
fr
symbol
(
identifier
i
symbol
,
integerConstant
8
symbol
)
identifier
sqs
symbol
[
identifier
i
symbol
]
symbol
=
identifier
Q
symbol
(
identifier
sqs
symbol
[
identifier
i
symbol
]
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
identifier
toval
symbol
[
integerConstant
1
symbol
]
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
identifier
toval
symbol
[
identifier
i
symbol
]
symbol
=
identifier
I
symbol
;
identifier
NewLine
identifier
toval
symbol
[
identifier
j
symbol
]
symbol
=
identifier
J
symbol
;
identifier
NewLine
identifier
toval
symbol
[
identifier
k
symbol
]
symbol
=
identifier
K
symbol
;
identifier
NewLine
identifier
mul
symbol
[
integerConstant
1
symbol
]
symbol
[
integerConstant
1
symbol
]
symbol
=
integerConstant
1
symbol
,
identifier
mul
symbol
[
integerConstant
1
symbol
]
symbol
[
identifier
I
symbol
]
symbol
=
identifier
I
symbol
,
identifier
mul
symbol
[
integerConstant
1
symbol
]
symbol
[
identifier
J
symbol
]
symbol
=
identifier
J
symbol
,
identifier
mul
symbol
[
integerConstant
1
symbol
]
symbol
[
identifier
K
symbol
]
symbol
=
identifier
K
symbol
;
identifier
NewLine
identifier
mul
symbol
[
identifier
I
symbol
]
symbol
[
integerConstant
1
symbol
]
symbol
=
identifier
I
symbol
,
identifier
mul
symbol
[
identifier
I
symbol
]
symbol
[
identifier
I
symbol
]
symbol
=
symbol
-
integerConstant
1
symbol
,
identifier
mul
symbol
[
identifier
I
symbol
]
symbol
[
identifier
J
symbol
]
symbol
=
identifier
K
symbol
,
identifier
mul
symbol
[
identifier
I
symbol
]
symbol
[
identifier
K
symbol
]
symbol
=
symbol
-
identifier
J
symbol
;
identifier
NewLine
identifier
mul
symbol
[
identifier
J
symbol
]
symbol
[
integerConstant
1
symbol
]
symbol
=
identifier
J
symbol
,
identifier
mul
symbol
[
identifier
J
symbol
]
symbol
[
identifier
I
symbol
]
symbol
=
symbol
-
identifier
K
symbol
,
identifier
mul
symbol
[
identifier
J
symbol
]
symbol
[
identifier
J
symbol
]
symbol
=
symbol
-
integerConstant
1
symbol
,
identifier
mul
symbol
[
identifier
J
symbol
]
symbol
[
identifier
K
symbol
]
symbol
=
identifier
I
symbol
;
identifier
NewLine
identifier
mul
symbol
[
identifier
K
symbol
]
symbol
[
integerConstant
1
symbol
]
symbol
=
identifier
K
symbol
,
identifier
mul
symbol
[
identifier
K
symbol
]
symbol
[
identifier
I
symbol
]
symbol
=
identifier
J
symbol
,
identifier
mul
symbol
[
identifier
K
symbol
]
symbol
[
identifier
J
symbol
]
symbol
=
symbol
-
identifier
I
symbol
,
identifier
mul
symbol
[
identifier
K
symbol
]
symbol
[
identifier
K
symbol
]
symbol
=
symbol
-
integerConstant
1
symbol
;
identifier
NewLine
keyword
int
identifier
z
symbol
;
identifier
NewLine
identifier
sf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
z
symbol
)
symbol
;
identifier
NewLine
identifier
fq
symbol
(
identifier
cas
symbol
,
identifier
z
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
n
symbol
;
identifier
NewLine
identifier
ll
identifier
x
symbol
;
identifier
NewLine
identifier
sf
symbol
(
stringConstant
%d%lld%s
symbol
,
symbol
&
identifier
n
symbol
,
symbol
&
identifier
x
symbol
,
identifier
s
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
x
symbol
>
integerConstant
32
symbol
)
identifier
x
symbol
-
symbol
=
identifier
x
symbol
-
integerConstant
32
symbol
>
symbol
>
integerConstant
2
symbol
<
symbol
<
integerConstant
2
symbol
;
identifier
NewLine
identifier
fr
symbol
(
identifier
i
symbol
,
identifier
n
symbol
)
identifier
seq
symbol
[
identifier
i
symbol
]
symbol
=
identifier
Q
symbol
(
identifier
toval
symbol
[
identifier
s
symbol
[
identifier
i
symbol
]
symbol
]
symbol
)
symbol
;
identifier
NewLine
keyword
int
identifier
on
symbol
=
identifier
n
symbol
;
identifier
NewLine
keyword
while
symbol
(
symbol
-
symbol
-
identifier
x
symbol
)
symbol
{
identifier
NewLine
identifier
fr
symbol
(
identifier
i
symbol
,
identifier
on
symbol
)
symbol
{
identifier
NewLine
identifier
seq
symbol
[
identifier
n
symbol
]
symbol
=
identifier
seq
symbol
[
identifier
n
symbol
-
identifier
on
symbol
]
symbol
;
identifier
NewLine
identifier
n
symbol
+
symbol
+
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
fr
symbol
(
identifier
t
symbol
,
integerConstant
4
symbol
)
identifier
fr
symbol
(
identifier
v
symbol
,
integerConstant
8
symbol
)
identifier
ccan
symbol
[
identifier
t
symbol
]
symbol
[
identifier
v
symbol
]
symbol
=
keyword
false
symbol
;
identifier
NewLine
identifier
ccan
symbol
[
integerConstant
0
symbol
]
symbol
[
integerConstant
0
symbol
]
symbol
=
keyword
true
symbol
;
identifier
NewLine
identifier
fr
symbol
(
identifier
i
symbol
,
identifier
n
symbol
)
symbol
{
identifier
NewLine
identifier
fr
symbol
(
identifier
t
symbol
,
integerConstant
4
symbol
)
identifier
fr
symbol
(
identifier
v
symbol
,
integerConstant
8
symbol
)
identifier
pcan
symbol
[
identifier
t
symbol
]
symbol
[
identifier
v
symbol
]
symbol
=
identifier
ccan
symbol
[
identifier
t
symbol
]
symbol
[
identifier
v
symbol
]
symbol
;
identifier
NewLine
identifier
fr
symbol
(
identifier
t
symbol
,
integerConstant
4
symbol
)
identifier
fr
symbol
(
identifier
v
symbol
,
integerConstant
8
symbol
)
symbol
{
identifier
NewLine
identifier
ccan
symbol
[
identifier
t
symbol
]
symbol
[
identifier
v
symbol
]
symbol
=
keyword
false
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
t
symbol
&
symbol
&
identifier
v
symbol
&
symbol
&
identifier
ccan
symbol
[
identifier
t
symbol
-
integerConstant
1
symbol
]
symbol
[
identifier
t
symbol
]
symbol
)
symbol
{
identifier
NewLine
identifier
ccan
symbol
[
identifier
t
symbol
]
symbol
[
identifier
v
symbol
]
symbol
=
keyword
true
symbol
;
identifier
NewLine
symbol
}
keyword
else
symbol
{
identifier
NewLine
identifier
Q
identifier
trg
symbol
=
identifier
sqs
symbol
[
identifier
v
symbol
]
symbol
;
identifier
NewLine
identifier
fr
symbol
(
identifier
ov
symbol
,
integerConstant
8
symbol
)
keyword
if
symbol
(
identifier
pcan
symbol
[
identifier
t
symbol
]
symbol
[
identifier
ov
symbol
]
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
symbol
(
identifier
sqs
symbol
[
identifier
ov
symbol
]
symbol
*
identifier
seq
symbol
[
identifier
i
symbol
]
symbol
)
symbol
.
identifier
v
symbol
=
symbol
=
identifier
sqs
symbol
[
identifier
v
symbol
]
symbol
.
identifier
v
symbol
)
symbol
{
identifier
NewLine
identifier
ccan
symbol
[
identifier
t
symbol
]
symbol
[
identifier
v
symbol
]
symbol
=
keyword
true
symbol
;
identifier
NewLine
identifier
break
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
symbol
}
identifier
NewLine
identifier
pf
symbol
(
stringConstant
Case #%d: %s\n
symbol
,
identifier
cas
symbol
,
identifier
ccan
symbol
[
integerConstant
3
symbol
]
symbol
[
integerConstant
0
symbol
]
stringConstant
YES
stringConstant
NO
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/ksun48.0.cpp file...

identifier
include
symbol
<
identifier
cstdio
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstdlib
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cassert
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
iostream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
string
symbol
>
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
typedef
identifier
long
identifier
long
identifier
LL
symbol
;
identifier
NewLine
identifier
NewLine
identifier
main
symbol
(
symbol
)
symbol
{
identifier
NewLine
identifier
FILE
symbol
*
identifier
fin
symbol
=
identifier
freopen
symbol
(
stringConstant
A-large.in
symbol
,
stringConstant
r
symbol
,
identifier
stdin
symbol
)
symbol
;
identifier
NewLine
identifier
assert
symbol
(
identifier
fin
symbol
=
identifier
NULL
symbol
)
symbol
;
identifier
NewLine
identifier
FILE
symbol
*
identifier
fout
symbol
=
identifier
freopen
symbol
(
stringConstant
A-large.out
symbol
,
stringConstant
w
symbol
,
identifier
stdout
symbol
)
symbol
;
identifier
NewLine
keyword
int
identifier
T
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
T
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
t
symbol
=
integerConstant
1
symbol
;
identifier
t
symbol
<
symbol
=
identifier
T
symbol
;
identifier
t
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
n
symbol
;
identifier
NewLine
identifier
string
identifier
stuff
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
n
symbol
>
symbol
>
identifier
stuff
symbol
;
identifier
NewLine
keyword
int
identifier
add
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
keyword
int
identifier
sum
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
symbol
=
identifier
n
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
k
symbol
=
symbol
(
identifier
stuff
symbol
[
identifier
i
symbol
]
symbol
-
integerConstant
0
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
symbol
(
identifier
add
symbol
+
identifier
sum
symbol
<
identifier
i
symbol
)
symbol
&
symbol
&
identifier
k
symbol
>
integerConstant
0
symbol
)
symbol
{
identifier
NewLine
identifier
add
symbol
+
symbol
=
symbol
(
identifier
i
symbol
-
identifier
add
symbol
-
identifier
sum
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
sum
symbol
+
symbol
=
identifier
k
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
cout
symbol
<
symbol
<
stringConstant
Case #
symbol
<
symbol
<
identifier
t
symbol
<
symbol
<
stringConstant
: 
symbol
;
identifier
NewLine
identifier
cout
symbol
<
symbol
<
identifier
add
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
exit
symbol
(
integerConstant
0
symbol
)
symbol
;
identifier
NewLine
symbol
}
symbol
}
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/ksun48.1.cpp file...

identifier
include
symbol
<
identifier
cstdio
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstdlib
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cassert
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
iostream
symbol
>
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
typedef
identifier
long
identifier
long
identifier
LL
symbol
;
identifier
NewLine
identifier
NewLine
identifier
main
symbol
(
symbol
)
symbol
{
identifier
NewLine
identifier
FILE
symbol
*
identifier
fin
symbol
=
identifier
freopen
symbol
(
stringConstant
B-large.in
symbol
,
stringConstant
r
symbol
,
identifier
stdin
symbol
)
symbol
;
identifier
NewLine
identifier
assert
symbol
(
identifier
fin
symbol
=
identifier
NULL
symbol
)
symbol
;
identifier
NewLine
identifier
FILE
symbol
*
identifier
fout
symbol
=
identifier
freopen
symbol
(
stringConstant
B-large.out
symbol
,
stringConstant
w
symbol
,
identifier
stdout
symbol
)
symbol
;
identifier
NewLine
keyword
int
identifier
T
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
T
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
t
symbol
=
integerConstant
1
symbol
;
identifier
t
symbol
<
symbol
=
identifier
T
symbol
;
identifier
t
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
cout
symbol
<
symbol
<
stringConstant
Case #
symbol
<
symbol
<
identifier
t
symbol
<
symbol
<
stringConstant
: 
symbol
;
identifier
NewLine
keyword
int
identifier
n
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
n
symbol
;
identifier
NewLine
keyword
int
identifier
stuff
symbol
[
identifier
n
symbol
]
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
n
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
cin
symbol
>
symbol
>
identifier
stuff
symbol
[
identifier
i
symbol
]
symbol
;
identifier
NewLine
keyword
int
identifier
answer
symbol
=
integerConstant
1000
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
1
symbol
;
identifier
i
symbol
<
symbol
=
integerConstant
1000
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
cur
symbol
=
identifier
i
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
j
symbol
=
integerConstant
0
symbol
;
identifier
j
symbol
<
identifier
n
symbol
;
identifier
j
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
cur
symbol
+
symbol
=
symbol
(
identifier
stuff
symbol
[
identifier
j
symbol
]
symbol
-
integerConstant
1
symbol
)
symbol
/
identifier
i
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
answer
symbol
=
identifier
min
symbol
(
identifier
answer
symbol
,
identifier
cur
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
cout
symbol
<
symbol
<
identifier
answer
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
exit
symbol
(
integerConstant
0
symbol
)
symbol
;
identifier
NewLine
symbol
}
symbol
}
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/ksun48.2.cpp file...

identifier
include
symbol
<
identifier
cstdio
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstdlib
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cassert
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
iostream
symbol
>
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
typedef
identifier
long
identifier
long
identifier
LL
symbol
;
identifier
NewLine
keyword
int
identifier
m
symbol
(
keyword
int
identifier
a
symbol
,
keyword
int
identifier
b
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
a1
symbol
=
identifier
a
symbol
/
integerConstant
4
symbol
;
identifier
NewLine
keyword
int
identifier
a2
symbol
=
identifier
a
integerConstant
4
symbol
;
identifier
NewLine
keyword
int
identifier
b1
symbol
=
identifier
b
symbol
/
integerConstant
4
symbol
;
identifier
NewLine
keyword
int
identifier
b2
symbol
=
identifier
b
integerConstant
4
symbol
;
identifier
NewLine
keyword
int
identifier
c
symbol
=
symbol
(
identifier
a1
symbol
+
identifier
b1
symbol
)
integerConstant
2
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
a2
symbol
=
symbol
=
integerConstant
0
symbol
|
symbol
|
identifier
b2
symbol
=
symbol
=
integerConstant
0
symbol
)
keyword
return
symbol
(
identifier
c
symbol
*
integerConstant
4
symbol
+
identifier
a2
symbol
+
identifier
b2
symbol
)
integerConstant
8
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
a2
symbol
=
symbol
=
identifier
b2
symbol
)
keyword
return
symbol
(
identifier
c
symbol
*
integerConstant
4
symbol
+
integerConstant
4
symbol
)
integerConstant
8
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
a2
symbol
=
symbol
=
integerConstant
1
symbol
&
symbol
&
identifier
b2
symbol
=
symbol
=
integerConstant
2
symbol
)
keyword
return
symbol
(
identifier
c
symbol
*
integerConstant
4
symbol
+
integerConstant
3
symbol
)
integerConstant
8
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
a2
symbol
=
symbol
=
integerConstant
2
symbol
&
symbol
&
identifier
b2
symbol
=
symbol
=
integerConstant
3
symbol
)
keyword
return
symbol
(
identifier
c
symbol
*
integerConstant
4
symbol
+
integerConstant
1
symbol
)
integerConstant
8
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
a2
symbol
=
symbol
=
integerConstant
3
symbol
&
symbol
&
identifier
b2
symbol
=
symbol
=
integerConstant
1
symbol
)
keyword
return
symbol
(
identifier
c
symbol
*
integerConstant
4
symbol
+
integerConstant
2
symbol
)
integerConstant
8
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
a2
symbol
=
symbol
=
integerConstant
2
symbol
&
symbol
&
identifier
b2
symbol
=
symbol
=
integerConstant
1
symbol
)
keyword
return
symbol
(
identifier
c
symbol
*
integerConstant
4
symbol
+
integerConstant
7
symbol
)
integerConstant
8
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
a2
symbol
=
symbol
=
integerConstant
3
symbol
&
symbol
&
identifier
b2
symbol
=
symbol
=
integerConstant
2
symbol
)
keyword
return
symbol
(
identifier
c
symbol
*
integerConstant
4
symbol
+
integerConstant
5
symbol
)
integerConstant
8
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
a2
symbol
=
symbol
=
integerConstant
1
symbol
&
symbol
&
identifier
b2
symbol
=
symbol
=
integerConstant
3
symbol
)
keyword
return
symbol
(
identifier
c
symbol
*
integerConstant
4
symbol
+
integerConstant
6
symbol
)
integerConstant
8
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
main
symbol
(
symbol
)
symbol
{
identifier
NewLine
identifier
FILE
symbol
*
identifier
fin
symbol
=
identifier
freopen
symbol
(
stringConstant
C-large.in
symbol
,
stringConstant
r
symbol
,
identifier
stdin
symbol
)
symbol
;
identifier
NewLine
identifier
assert
symbol
(
identifier
fin
symbol
=
identifier
NULL
symbol
)
symbol
;
identifier
NewLine
identifier
FILE
symbol
*
identifier
fout
symbol
=
identifier
freopen
symbol
(
stringConstant
C-large.out
symbol
,
stringConstant
w
symbol
,
identifier
stdout
symbol
)
symbol
;
identifier
NewLine
keyword
int
identifier
T
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
T
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
t
symbol
=
integerConstant
1
symbol
;
identifier
t
symbol
<
symbol
=
identifier
T
symbol
;
identifier
t
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
cout
symbol
<
symbol
<
stringConstant
Case #
symbol
<
symbol
<
identifier
t
symbol
<
symbol
<
stringConstant
: 
symbol
;
identifier
NewLine
identifier
LL
identifier
l
symbol
,
identifier
x
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
l
symbol
>
symbol
>
identifier
x
symbol
;
identifier
NewLine
identifier
string
identifier
k
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
k
symbol
;
identifier
NewLine
keyword
int
identifier
prodseg
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
for
symbol
(
identifier
LL
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
l
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
num
symbol
=
identifier
k
symbol
[
identifier
i
symbol
]
symbol
-
identifier
h
symbol
;
identifier
NewLine
identifier
prodseg
symbol
=
identifier
m
symbol
(
identifier
prodseg
symbol
,
identifier
num
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
int
identifier
total
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
for
symbol
(
identifier
LL
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
symbol
(
identifier
x
integerConstant
4
symbol
)
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
total
symbol
=
identifier
m
symbol
(
identifier
prodseg
symbol
,
identifier
total
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
total
symbol
=
integerConstant
4
symbol
)
symbol
{
identifier
NewLine
identifier
cout
symbol
<
symbol
<
stringConstant
NO
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
identifier
continue
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
LL
identifier
minleft
symbol
=
symbol
-
integerConstant
1
symbol
;
identifier
NewLine
keyword
int
identifier
lprod
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
for
symbol
(
identifier
LL
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
integerConstant
5
symbol
*
identifier
l
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
num
symbol
=
identifier
k
symbol
[
identifier
i
identifier
l
symbol
]
symbol
-
identifier
h
symbol
;
identifier
NewLine
identifier
lprod
symbol
=
identifier
m
symbol
(
identifier
lprod
symbol
,
identifier
num
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
lprod
symbol
=
symbol
=
integerConstant
1
symbol
)
symbol
{
identifier
NewLine
identifier
minleft
symbol
=
identifier
i
symbol
+
integerConstant
1
symbol
;
identifier
NewLine
identifier
break
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
LL
identifier
minright
symbol
=
symbol
-
integerConstant
1
symbol
;
identifier
NewLine
keyword
int
identifier
rprod
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
for
symbol
(
identifier
LL
identifier
i
symbol
=
integerConstant
5
symbol
*
identifier
l
symbol
-
integerConstant
1
symbol
;
identifier
i
symbol
>
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
-
symbol
-
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
num
symbol
=
identifier
k
symbol
[
identifier
i
identifier
l
symbol
]
symbol
-
identifier
h
symbol
;
identifier
NewLine
identifier
rprod
symbol
=
identifier
m
symbol
(
identifier
num
symbol
,
identifier
rprod
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
rprod
symbol
=
symbol
=
integerConstant
3
symbol
)
symbol
{
identifier
NewLine
identifier
minright
symbol
=
integerConstant
5
symbol
*
identifier
l
symbol
-
identifier
i
symbol
;
identifier
NewLine
identifier
break
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
minleft
symbol
=
symbol
=
symbol
-
integerConstant
1
symbol
|
symbol
|
identifier
minright
symbol
=
symbol
=
symbol
-
integerConstant
1
symbol
)
symbol
{
identifier
NewLine
identifier
cout
symbol
<
symbol
<
stringConstant
NO
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
identifier
continue
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
minleft
symbol
+
identifier
minright
symbol
<
identifier
l
symbol
*
identifier
x
symbol
)
symbol
{
identifier
NewLine
identifier
cout
symbol
<
symbol
<
stringConstant
YES
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
symbol
}
keyword
else
symbol
{
identifier
NewLine
identifier
cout
symbol
<
symbol
<
stringConstant
NO
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
symbol
}
identifier
NewLine
identifier
exit
symbol
(
integerConstant
0
symbol
)
symbol
;
identifier
NewLine
symbol
}
symbol
}
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/LazyAnna.0.cpp file...

identifier
include
symbol
<
identifier
iostream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
iomanip
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
string
symbol
>
identifier
NewLine
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
tests
symbol
;
identifier
NewLine
keyword
int
identifier
sMax
symbol
;
identifier
NewLine
keyword
int
identifier
a
symbol
[
integerConstant
2000
symbol
]
symbol
;
identifier
NewLine
identifier
string
identifier
str
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
tests
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
t
symbol
=
integerConstant
1
symbol
;
identifier
t
symbol
<
symbol
=
identifier
tests
symbol
;
symbol
+
symbol
+
identifier
t
symbol
)
symbol
{
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
sMax
symbol
>
symbol
>
identifier
str
symbol
;
identifier
NewLine
keyword
int
identifier
s
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
keyword
int
identifier
ans
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
j
symbol
=
integerConstant
0
symbol
;
identifier
j
symbol
<
symbol
=
identifier
sMax
symbol
;
symbol
+
symbol
+
identifier
j
symbol
)
symbol
{
identifier
NewLine
identifier
a
symbol
[
identifier
j
symbol
]
symbol
=
identifier
str
symbol
[
identifier
j
symbol
]
symbol
-
integerConstant
48
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
s
symbol
<
identifier
j
symbol
)
symbol
{
identifier
NewLine
identifier
ans
symbol
+
symbol
=
symbol
(
identifier
j
symbol
-
identifier
s
symbol
)
symbol
;
identifier
NewLine
identifier
s
symbol
=
identifier
j
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
s
symbol
+
symbol
=
identifier
a
symbol
[
identifier
j
symbol
]
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
cout
symbol
<
symbol
<
stringConstant
Case #
symbol
<
symbol
<
identifier
t
symbol
<
symbol
<
stringConstant
: 
symbol
<
symbol
<
identifier
ans
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
symbol
}
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/LazyAnna.1.cpp file...

identifier
include
symbol
<
identifier
iostream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
iomanip
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
string
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
algorithm
symbol
>
identifier
NewLine
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
tests
symbol
;
identifier
NewLine
keyword
int
identifier
d
symbol
;
identifier
NewLine
keyword
int
identifier
ans
symbol
;
identifier
NewLine
keyword
int
identifier
a
symbol
[
integerConstant
3000
symbol
]
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
tests
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
t
symbol
=
integerConstant
1
symbol
;
identifier
t
symbol
<
symbol
=
identifier
tests
symbol
;
symbol
+
symbol
+
identifier
t
symbol
)
symbol
{
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
d
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
d
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
symbol
{
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
a
symbol
[
identifier
i
symbol
]
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
sort
symbol
(
identifier
a
symbol
,
identifier
a
symbol
+
identifier
d
symbol
)
symbol
;
identifier
NewLine
identifier
ans
symbol
=
identifier
a
symbol
[
identifier
d
symbol
-
integerConstant
1
symbol
]
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
1
symbol
;
identifier
i
symbol
<
symbol
=
identifier
a
symbol
[
identifier
d
symbol
-
integerConstant
1
symbol
]
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
count
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
j
symbol
=
integerConstant
0
symbol
;
identifier
j
symbol
<
identifier
d
symbol
;
symbol
+
symbol
+
identifier
j
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
x
symbol
=
identifier
a
symbol
[
identifier
j
symbol
]
symbol
/
identifier
i
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
x
symbol
*
identifier
i
symbol
<
identifier
a
symbol
[
identifier
j
symbol
]
symbol
)
symbol
+
symbol
+
identifier
x
symbol
;
identifier
NewLine
identifier
count
symbol
+
symbol
=
symbol
(
identifier
x
symbol
-
integerConstant
1
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
count
symbol
+
identifier
i
symbol
<
identifier
ans
symbol
)
identifier
ans
symbol
=
identifier
count
symbol
+
identifier
i
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
cout
symbol
<
symbol
<
stringConstant
Case #
symbol
<
symbol
<
identifier
t
symbol
<
symbol
<
stringConstant
: 
symbol
<
symbol
<
identifier
ans
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
symbol
}
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/LazyAnna.2.cpp file...

identifier
include
symbol
<
identifier
iostream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
iomanip
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
string
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
algorithm
symbol
>
identifier
NewLine
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
a
symbol
[
integerConstant
4
symbol
]
symbol
[
integerConstant
4
symbol
]
symbol
[
integerConstant
2
symbol
]
symbol
=
symbol
{
symbol
{
symbol
{
integerConstant
0
symbol
,
integerConstant
0
symbol
}
symbol
,
symbol
{
integerConstant
1
symbol
,
integerConstant
0
symbol
}
symbol
,
symbol
{
integerConstant
2
symbol
,
integerConstant
0
symbol
}
symbol
,
symbol
{
integerConstant
3
symbol
,
integerConstant
0
symbol
}
symbol
}
symbol
,
identifier
NewLine
symbol
{
symbol
{
integerConstant
1
symbol
,
integerConstant
0
symbol
}
symbol
,
symbol
{
integerConstant
0
symbol
,
integerConstant
1
symbol
}
symbol
,
symbol
{
integerConstant
3
symbol
,
integerConstant
0
symbol
}
symbol
,
symbol
{
integerConstant
2
symbol
,
integerConstant
1
symbol
}
symbol
}
symbol
,
identifier
NewLine
symbol
{
symbol
{
integerConstant
2
symbol
,
integerConstant
0
symbol
}
symbol
,
symbol
{
integerConstant
3
symbol
,
integerConstant
1
symbol
}
symbol
,
symbol
{
integerConstant
0
symbol
,
integerConstant
1
symbol
}
symbol
,
symbol
{
integerConstant
1
symbol
,
integerConstant
0
symbol
}
symbol
}
symbol
,
identifier
NewLine
symbol
{
symbol
{
integerConstant
3
symbol
,
integerConstant
0
symbol
}
symbol
,
symbol
{
integerConstant
2
symbol
,
integerConstant
0
symbol
}
symbol
,
symbol
{
integerConstant
1
symbol
,
integerConstant
1
symbol
}
symbol
,
symbol
{
integerConstant
0
symbol
,
integerConstant
1
symbol
}
symbol
}
symbol
}
symbol
;
identifier
NewLine
identifier
NewLine
identifier
struct
identifier
Foo
identifier
NewLine
symbol
{
identifier
NewLine
keyword
int
identifier
q1
symbol
;
identifier
NewLine
keyword
int
identifier
q2
symbol
;
identifier
NewLine
symbol
}
symbol
;
identifier
NewLine
identifier
NewLine
identifier
Foo
identifier
mult
symbol
(
keyword
int
identifier
x1
symbol
,
keyword
int
identifier
x2
symbol
,
identifier
long
identifier
long
identifier
x
symbol
)
symbol
{
identifier
NewLine
identifier
Foo
identifier
ans
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
x
symbol
=
symbol
=
integerConstant
1
symbol
)
symbol
{
identifier
NewLine
identifier
ans
symbol
.
identifier
q1
symbol
=
identifier
x1
symbol
;
identifier
NewLine
identifier
ans
symbol
.
identifier
q2
symbol
=
identifier
x2
symbol
;
identifier
NewLine
keyword
return
identifier
ans
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
ans
symbol
.
identifier
q1
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
ans
symbol
.
identifier
q2
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
x
integerConstant
2
symbol
=
symbol
=
integerConstant
1
symbol
)
symbol
{
identifier
NewLine
identifier
ans
symbol
.
identifier
q1
symbol
=
identifier
x1
symbol
;
identifier
NewLine
identifier
ans
symbol
.
identifier
q2
symbol
=
identifier
x2
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
long
identifier
long
identifier
w
symbol
=
identifier
x
symbol
/
integerConstant
2
symbol
;
identifier
NewLine
identifier
Foo
identifier
sub
symbol
=
identifier
mult
symbol
(
identifier
x1
symbol
,
identifier
x2
symbol
,
identifier
w
symbol
)
symbol
;
identifier
NewLine
identifier
ans
symbol
.
identifier
q2
symbol
=
symbol
(
identifier
a
symbol
[
identifier
sub
symbol
.
identifier
q1
symbol
]
symbol
[
identifier
ans
symbol
.
identifier
q1
symbol
]
symbol
[
integerConstant
1
symbol
]
symbol
+
identifier
sub
symbol
.
identifier
q2
symbol
+
identifier
ans
symbol
.
identifier
q2
symbol
)
integerConstant
2
symbol
;
identifier
NewLine
identifier
ans
symbol
.
identifier
q1
symbol
=
identifier
a
symbol
[
identifier
sub
symbol
.
identifier
q1
symbol
]
symbol
[
identifier
ans
symbol
.
identifier
q1
symbol
]
symbol
[
integerConstant
0
symbol
]
symbol
;
identifier
NewLine
identifier
ans
symbol
.
identifier
q2
symbol
=
symbol
(
identifier
a
symbol
[
identifier
sub
symbol
.
identifier
q1
symbol
]
symbol
[
identifier
ans
symbol
.
identifier
q1
symbol
]
symbol
[
integerConstant
1
symbol
]
symbol
+
identifier
sub
symbol
.
identifier
q2
symbol
+
identifier
ans
symbol
.
identifier
q2
symbol
)
integerConstant
2
symbol
;
identifier
NewLine
identifier
ans
symbol
.
identifier
q1
symbol
=
identifier
a
symbol
[
identifier
sub
symbol
.
identifier
q1
symbol
]
symbol
[
identifier
ans
symbol
.
identifier
q1
symbol
]
symbol
[
integerConstant
0
symbol
]
symbol
;
identifier
NewLine
keyword
return
identifier
ans
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
tests
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
tests
symbol
;
identifier
NewLine
identifier
long
identifier
long
identifier
x
symbol
,
identifier
l
symbol
;
identifier
NewLine
identifier
string
identifier
str
symbol
;
identifier
NewLine
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
t
symbol
=
integerConstant
1
symbol
;
identifier
t
symbol
<
symbol
=
identifier
tests
symbol
;
symbol
+
symbol
+
identifier
t
symbol
)
symbol
{
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
l
symbol
>
symbol
>
identifier
x
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
str
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
str
symbol
.
identifier
length
symbol
(
symbol
)
symbol
=
symbol
=
integerConstant
1
symbol
)
symbol
{
identifier
NewLine
identifier
cout
symbol
<
symbol
<
stringConstant
Case #
symbol
<
symbol
<
identifier
t
symbol
<
symbol
<
stringConstant
: NO
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
identifier
continue
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
if
symbol
(
identifier
x
symbol
<
symbol
=
integerConstant
8
symbol
)
symbol
{
identifier
NewLine
identifier
string
identifier
str1
symbol
=
identifier
str
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
x
symbol
-
integerConstant
1
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
identifier
NewLine
identifier
str
symbol
+
symbol
=
identifier
str1
symbol
;
identifier
NewLine
keyword
int
identifier
count
symbol
=
identifier
str
symbol
.
identifier
length
symbol
(
symbol
)
symbol
+
integerConstant
1
symbol
;
identifier
NewLine
keyword
int
identifier
x1
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
keyword
int
identifier
x2
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
str
symbol
.
identifier
length
symbol
(
symbol
)
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
symbol
{
identifier
NewLine
identifier
x2
symbol
=
symbol
(
identifier
a
symbol
[
identifier
x1
symbol
]
symbol
[
identifier
str
symbol
[
identifier
i
symbol
]
symbol
-
identifier
a
symbol
-
integerConstant
7
symbol
]
symbol
[
integerConstant
1
symbol
]
symbol
+
identifier
x2
symbol
)
integerConstant
2
symbol
;
identifier
NewLine
identifier
x1
symbol
=
identifier
a
symbol
[
identifier
x1
symbol
]
symbol
[
identifier
str
symbol
[
identifier
i
symbol
]
symbol
-
identifier
a
symbol
-
integerConstant
7
symbol
]
symbol
[
integerConstant
0
symbol
]
symbol
;
identifier
NewLine
keyword
if
symbol
(
symbol
(
identifier
x1
symbol
=
symbol
=
integerConstant
1
symbol
)
symbol
&
symbol
&
symbol
(
identifier
x2
symbol
=
symbol
=
integerConstant
0
symbol
)
symbol
)
symbol
{
identifier
NewLine
identifier
count
symbol
=
identifier
i
symbol
+
integerConstant
1
symbol
;
identifier
NewLine
identifier
break
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
keyword
int
identifier
y1
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
keyword
int
identifier
y2
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
identifier
str
symbol
.
identifier
length
symbol
(
symbol
)
symbol
;
identifier
i
symbol
>
symbol
=
integerConstant
1
symbol
;
symbol
-
symbol
-
identifier
i
symbol
)
symbol
{
identifier
NewLine
identifier
y2
symbol
=
symbol
(
identifier
a
symbol
[
identifier
str
symbol
[
identifier
i
symbol
-
integerConstant
1
symbol
]
symbol
-
identifier
a
symbol
-
integerConstant
7
symbol
]
symbol
[
identifier
y1
symbol
]
symbol
[
integerConstant
1
symbol
]
symbol
+
identifier
x2
symbol
)
integerConstant
2
symbol
;
identifier
NewLine
identifier
y1
symbol
=
identifier
a
symbol
[
identifier
str
symbol
[
identifier
i
symbol
-
integerConstant
1
symbol
]
symbol
-
identifier
a
symbol
-
integerConstant
7
symbol
]
symbol
[
identifier
y1
symbol
]
symbol
[
integerConstant
0
symbol
]
symbol
;
identifier
NewLine
keyword
if
symbol
(
symbol
(
identifier
y1
symbol
=
symbol
=
integerConstant
3
symbol
)
symbol
&
symbol
&
symbol
(
identifier
y2
symbol
=
symbol
=
integerConstant
0
symbol
)
symbol
)
symbol
{
identifier
NewLine
identifier
count
symbol
+
symbol
=
symbol
(
identifier
str
symbol
.
identifier
length
symbol
(
symbol
)
symbol
-
identifier
i
symbol
+
integerConstant
1
symbol
)
symbol
;
identifier
NewLine
identifier
break
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
x1
symbol
=
identifier
a
symbol
[
identifier
str
symbol
[
integerConstant
0
symbol
]
symbol
-
identifier
a
symbol
-
integerConstant
7
symbol
]
symbol
[
identifier
str
symbol
[
integerConstant
1
symbol
]
symbol
-
identifier
a
symbol
-
integerConstant
7
symbol
]
symbol
[
integerConstant
0
symbol
]
symbol
;
identifier
NewLine
identifier
x2
symbol
=
identifier
a
symbol
[
identifier
str
symbol
[
integerConstant
0
symbol
]
symbol
-
identifier
a
symbol
-
integerConstant
7
symbol
]
symbol
[
identifier
str
symbol
[
integerConstant
1
symbol
]
symbol
-
identifier
a
symbol
-
integerConstant
7
symbol
]
symbol
[
integerConstant
1
symbol
]
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
2
symbol
;
identifier
i
symbol
<
identifier
str
symbol
.
identifier
length
symbol
(
symbol
)
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
symbol
{
identifier
NewLine
identifier
x2
symbol
=
symbol
(
identifier
a
symbol
[
identifier
x1
symbol
]
symbol
[
identifier
str
symbol
[
identifier
i
symbol
]
symbol
-
identifier
a
symbol
-
integerConstant
7
symbol
]
symbol
[
integerConstant
1
symbol
]
symbol
+
identifier
x2
symbol
)
integerConstant
2
symbol
;
identifier
NewLine
identifier
x1
symbol
=
identifier
a
symbol
[
identifier
x1
symbol
]
symbol
[
identifier
str
symbol
[
identifier
i
symbol
]
symbol
-
identifier
a
symbol
-
integerConstant
7
symbol
]
symbol
[
integerConstant
0
symbol
]
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
if
symbol
(
symbol
(
identifier
count
symbol
<
identifier
str
symbol
.
identifier
length
symbol
(
symbol
)
symbol
)
symbol
&
symbol
&
symbol
(
identifier
x1
symbol
=
symbol
=
integerConstant
0
symbol
)
symbol
&
symbol
&
symbol
(
identifier
x2
symbol
=
symbol
=
integerConstant
1
symbol
)
symbol
)
symbol
{
identifier
NewLine
identifier
cout
symbol
<
symbol
<
stringConstant
Case #
symbol
<
symbol
<
identifier
t
symbol
<
symbol
<
stringConstant
: YES
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
symbol
}
keyword
else
symbol
{
identifier
NewLine
identifier
cout
symbol
<
symbol
<
stringConstant
Case #
symbol
<
symbol
<
identifier
t
symbol
<
symbol
<
stringConstant
: NO
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
symbol
}
keyword
else
symbol
{
identifier
NewLine
keyword
int
identifier
x1
symbol
=
identifier
a
symbol
[
identifier
str
symbol
[
integerConstant
0
symbol
]
symbol
-
identifier
a
symbol
-
integerConstant
7
symbol
]
symbol
[
identifier
str
symbol
[
integerConstant
1
symbol
]
symbol
-
identifier
a
symbol
-
integerConstant
7
symbol
]
symbol
[
integerConstant
0
symbol
]
symbol
;
identifier
NewLine
keyword
int
identifier
x2
symbol
=
identifier
a
symbol
[
identifier
str
symbol
[
integerConstant
0
symbol
]
symbol
-
identifier
a
symbol
-
integerConstant
7
symbol
]
symbol
[
identifier
str
symbol
[
integerConstant
1
symbol
]
symbol
-
identifier
a
symbol
-
integerConstant
7
symbol
]
symbol
[
integerConstant
1
symbol
]
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
2
symbol
;
identifier
i
symbol
<
identifier
str
symbol
.
identifier
length
symbol
(
symbol
)
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
symbol
{
identifier
NewLine
identifier
x2
symbol
=
symbol
(
identifier
a
symbol
[
identifier
x1
symbol
]
symbol
[
identifier
str
symbol
[
identifier
i
symbol
]
symbol
-
identifier
a
symbol
-
integerConstant
7
symbol
]
symbol
[
integerConstant
1
symbol
]
symbol
+
identifier
x2
symbol
)
integerConstant
2
symbol
;
identifier
NewLine
identifier
x1
symbol
=
identifier
a
symbol
[
identifier
x1
symbol
]
symbol
[
identifier
str
symbol
[
identifier
i
symbol
]
symbol
-
identifier
a
symbol
-
integerConstant
7
symbol
]
symbol
[
integerConstant
0
symbol
]
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
int
identifier
i1
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
keyword
int
identifier
i2
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
bool
identifier
flagi
symbol
=
keyword
false
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
integerConstant
4
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
j1
symbol
=
identifier
i1
symbol
;
identifier
NewLine
keyword
int
identifier
j2
symbol
=
identifier
i2
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
j
symbol
=
integerConstant
0
symbol
;
identifier
j
symbol
<
identifier
str
symbol
.
identifier
length
symbol
(
symbol
)
symbol
;
symbol
+
symbol
+
identifier
j
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
symbol
(
identifier
j1
symbol
=
symbol
=
integerConstant
1
symbol
)
symbol
&
symbol
&
symbol
(
identifier
j2
symbol
=
symbol
=
integerConstant
0
symbol
)
symbol
)
symbol
{
identifier
NewLine
identifier
flagi
symbol
=
keyword
true
symbol
;
identifier
NewLine
identifier
break
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
j2
symbol
=
symbol
(
identifier
a
symbol
[
identifier
j1
symbol
]
symbol
[
identifier
str
symbol
[
identifier
j
symbol
]
symbol
-
identifier
a
symbol
-
integerConstant
7
symbol
]
symbol
[
integerConstant
1
symbol
]
symbol
+
identifier
j2
symbol
)
integerConstant
2
symbol
;
identifier
NewLine
identifier
j1
symbol
=
identifier
a
symbol
[
identifier
j1
symbol
]
symbol
[
identifier
str
symbol
[
identifier
j
symbol
]
symbol
-
identifier
a
symbol
-
integerConstant
7
symbol
]
symbol
[
integerConstant
0
symbol
]
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
flagi
symbol
)
identifier
break
symbol
;
identifier
NewLine
identifier
i2
symbol
=
symbol
(
identifier
a
symbol
[
identifier
i1
symbol
]
symbol
[
identifier
x1
symbol
]
symbol
[
integerConstant
1
symbol
]
symbol
+
identifier
x2
symbol
+
identifier
i2
symbol
)
integerConstant
2
symbol
;
identifier
NewLine
identifier
i1
symbol
=
identifier
a
symbol
[
identifier
i1
symbol
]
symbol
[
identifier
x1
symbol
]
symbol
[
integerConstant
0
symbol
]
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
int
identifier
k1
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
keyword
int
identifier
k2
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
bool
identifier
flagk
symbol
=
keyword
false
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
integerConstant
4
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
j1
symbol
=
identifier
k1
symbol
;
identifier
NewLine
keyword
int
identifier
j2
symbol
=
identifier
k2
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
j
symbol
=
identifier
str
symbol
.
identifier
length
symbol
(
symbol
)
symbol
;
identifier
j
symbol
>
symbol
=
integerConstant
1
symbol
;
symbol
-
symbol
-
identifier
j
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
symbol
(
identifier
j1
symbol
=
symbol
=
integerConstant
3
symbol
)
symbol
&
symbol
&
symbol
(
identifier
j2
symbol
=
symbol
=
integerConstant
0
symbol
)
symbol
)
symbol
{
identifier
NewLine
identifier
flagk
symbol
=
keyword
true
symbol
;
identifier
NewLine
identifier
break
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
j2
symbol
=
symbol
(
identifier
a
symbol
[
identifier
str
symbol
[
identifier
j
symbol
-
integerConstant
1
symbol
]
symbol
-
identifier
a
symbol
-
integerConstant
7
symbol
]
symbol
[
identifier
j1
symbol
]
symbol
[
integerConstant
1
symbol
]
symbol
+
identifier
j2
symbol
)
integerConstant
2
symbol
;
identifier
NewLine
identifier
j1
symbol
=
identifier
a
symbol
[
identifier
str
symbol
[
identifier
j
symbol
-
integerConstant
1
symbol
]
symbol
-
identifier
a
symbol
-
integerConstant
7
symbol
]
symbol
[
identifier
j1
symbol
]
symbol
[
integerConstant
0
symbol
]
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
flagk
symbol
)
identifier
break
symbol
;
identifier
NewLine
identifier
k2
symbol
=
symbol
(
identifier
a
symbol
[
identifier
x1
symbol
]
symbol
[
identifier
k1
symbol
]
symbol
[
integerConstant
1
symbol
]
symbol
+
identifier
x2
symbol
+
identifier
k2
symbol
)
integerConstant
2
symbol
;
identifier
NewLine
identifier
k1
symbol
=
identifier
a
symbol
[
identifier
x1
symbol
]
symbol
[
identifier
k1
symbol
]
symbol
[
integerConstant
0
symbol
]
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
Foo
identifier
q
symbol
=
identifier
mult
symbol
(
identifier
x1
symbol
,
identifier
x2
symbol
,
identifier
x
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
symbol
(
identifier
flagi
symbol
)
symbol
&
symbol
&
symbol
(
identifier
flagk
symbol
)
symbol
&
symbol
&
symbol
(
identifier
q
symbol
.
identifier
q1
symbol
=
symbol
=
integerConstant
0
symbol
)
symbol
&
symbol
&
symbol
(
identifier
q
symbol
.
identifier
q2
symbol
=
symbol
=
integerConstant
1
symbol
)
symbol
)
symbol
{
identifier
NewLine
identifier
cout
symbol
<
symbol
<
stringConstant
Case #
symbol
<
symbol
<
identifier
t
symbol
<
symbol
<
stringConstant
: YES
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
symbol
}
keyword
else
symbol
{
identifier
NewLine
identifier
cout
symbol
<
symbol
<
stringConstant
Case #
symbol
<
symbol
<
identifier
t
symbol
<
symbol
<
stringConstant
: NO
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
symbol
}
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/Merkurev.0.cpp file...

identifier
include
symbol
<
identifier
iostream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstdio
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
vector
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
string
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstring
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
algorithm
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
set
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
map
symbol
>
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
ifdef
identifier
LOCAL
identifier
NewLine
identifier
define
identifier
eprintf
symbol
(
symbol
.
symbol
.
symbol
.
symbol
)
identifier
fprintf
symbol
(
identifier
stderr
symbol
,
identifier
VA
identifier
ARGS
symbol
)
identifier
NewLine
keyword
else
identifier
NewLine
identifier
define
identifier
eprintf
symbol
(
symbol
.
symbol
.
symbol
.
symbol
)
integerConstant
42
identifier
NewLine
identifier
endif
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
const
keyword
int
identifier
maxn
symbol
=
integerConstant
1005
symbol
;
identifier
NewLine
keyword
char
identifier
str
symbol
[
identifier
maxn
symbol
]
symbol
;
identifier
NewLine
keyword
int
identifier
a
symbol
[
identifier
maxn
symbol
]
symbol
;
identifier
NewLine
identifier
NewLine
identifier
NewLine
keyword
int
identifier
solve
symbol
(
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
int
identifier
n
symbol
;
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
n
symbol
)
symbol
;
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%s
symbol
,
identifier
str
symbol
)
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
symbol
=
identifier
n
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
a
symbol
[
identifier
i
symbol
]
symbol
=
identifier
str
symbol
[
identifier
i
symbol
]
symbol
-
integerConstant
0
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
ans
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
keyword
int
identifier
cnt
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
symbol
=
identifier
n
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
a
symbol
[
identifier
i
symbol
]
symbol
=
symbol
=
integerConstant
0
symbol
)
identifier
NewLine
identifier
continue
symbol
;
identifier
NewLine
keyword
while
symbol
(
identifier
cnt
symbol
<
identifier
i
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
ans
symbol
+
symbol
+
symbol
;
identifier
NewLine
identifier
cnt
symbol
+
symbol
+
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
cnt
symbol
+
symbol
=
identifier
a
symbol
[
identifier
i
symbol
]
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
identifier
ans
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
ifdef
identifier
LOCAL
identifier
NewLine
identifier
freopen
symbol
(
stringConstant
input.txt
symbol
,
stringConstant
r
symbol
,
identifier
stdin
symbol
)
symbol
;
identifier
NewLine
identifier
freopen
symbol
(
stringConstant
output.txt
symbol
,
stringConstant
w
symbol
,
identifier
stdout
symbol
)
symbol
;
identifier
NewLine
identifier
endif
identifier
NewLine
identifier
NewLine
keyword
int
identifier
t
symbol
;
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
t
symbol
)
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
1
symbol
;
identifier
i
symbol
<
symbol
=
identifier
t
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: %d\n
symbol
,
identifier
i
symbol
,
identifier
solve
symbol
(
symbol
)
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/Merkurev.1.cpp file...

identifier
include
symbol
<
identifier
iostream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstdio
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
vector
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
string
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstring
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
algorithm
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
set
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
map
symbol
>
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
ifdef
identifier
LOCAL
identifier
NewLine
identifier
define
identifier
eprintf
symbol
(
symbol
.
symbol
.
symbol
.
symbol
)
identifier
fprintf
symbol
(
identifier
stderr
symbol
,
identifier
VA
identifier
ARGS
symbol
)
identifier
NewLine
keyword
else
identifier
NewLine
identifier
define
identifier
eprintf
symbol
(
symbol
.
symbol
.
symbol
.
symbol
)
integerConstant
42
identifier
NewLine
identifier
endif
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
const
keyword
int
identifier
maxn
symbol
=
integerConstant
1005
symbol
;
identifier
NewLine
keyword
int
identifier
a
symbol
[
identifier
maxn
symbol
]
symbol
;
identifier
NewLine
keyword
int
identifier
n
symbol
;
identifier
NewLine
identifier
NewLine
identifier
bool
identifier
solve
symbol
(
keyword
int
identifier
st
symbol
,
keyword
int
identifier
x
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
int
identifier
need
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
n
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
need
symbol
+
symbol
=
symbol
(
identifier
a
symbol
[
identifier
i
symbol
]
symbol
+
identifier
x
symbol
-
integerConstant
1
symbol
)
symbol
/
identifier
x
symbol
-
integerConstant
1
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
identifier
need
symbol
<
symbol
=
identifier
st
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
int
identifier
solve
symbol
(
keyword
int
identifier
st
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
int
identifier
l
symbol
=
integerConstant
0
symbol
,
identifier
r
symbol
=
identifier
maxn
symbol
;
identifier
NewLine
keyword
while
symbol
(
identifier
r
symbol
-
identifier
l
symbol
>
integerConstant
1
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
int
identifier
m
symbol
=
symbol
(
identifier
l
symbol
+
identifier
r
symbol
)
symbol
/
integerConstant
2
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
solve
symbol
(
identifier
st
symbol
,
identifier
m
symbol
)
symbol
)
identifier
NewLine
identifier
r
symbol
=
identifier
m
symbol
;
identifier
NewLine
keyword
else
identifier
NewLine
identifier
l
symbol
=
identifier
m
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
identifier
st
symbol
+
identifier
r
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
void
identifier
solve
symbol
(
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
n
symbol
)
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
n
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
a
symbol
[
identifier
i
symbol
]
symbol
)
symbol
;
identifier
NewLine
identifier
sort
symbol
(
identifier
a
symbol
,
identifier
a
symbol
+
identifier
n
symbol
)
symbol
;
identifier
NewLine
identifier
reverse
symbol
(
identifier
a
symbol
,
identifier
a
symbol
+
identifier
n
symbol
)
symbol
;
identifier
NewLine
keyword
int
identifier
ans
symbol
=
identifier
maxn
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
st
symbol
=
integerConstant
0
symbol
;
identifier
st
symbol
<
identifier
maxn
symbol
;
identifier
st
symbol
+
symbol
+
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
ans
symbol
=
identifier
min
symbol
(
identifier
ans
symbol
,
identifier
solve
symbol
(
identifier
st
symbol
)
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
printf
symbol
(
stringConstant
%d
symbol
,
identifier
ans
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
ifdef
identifier
LOCAL
identifier
NewLine
identifier
freopen
symbol
(
stringConstant
input.txt
symbol
,
stringConstant
r
symbol
,
identifier
stdin
symbol
)
symbol
;
identifier
NewLine
identifier
freopen
symbol
(
stringConstant
output.txt
symbol
,
stringConstant
w
symbol
,
identifier
stdout
symbol
)
symbol
;
identifier
NewLine
identifier
endif
identifier
NewLine
identifier
NewLine
keyword
int
identifier
t
symbol
;
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
t
symbol
)
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
1
symbol
;
identifier
i
symbol
<
symbol
=
identifier
t
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
eprintf
symbol
(
stringConstant
Case %d of %d
symbol
,
identifier
i
symbol
,
identifier
t
symbol
)
symbol
;
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: 
symbol
,
identifier
i
symbol
)
symbol
;
identifier
NewLine
identifier
solve
symbol
(
symbol
)
symbol
;
identifier
NewLine
identifier
printf
symbol
(
stringConstant
\n
symbol
)
symbol
;
identifier
NewLine
identifier
eprintf
symbol
(
stringConstant
  done\n
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/Merkurev.2.cpp file...

identifier
include
symbol
<
identifier
iostream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstdio
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
vector
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
string
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstring
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
algorithm
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
set
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
map
symbol
>
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
ifdef
identifier
LOCAL
identifier
NewLine
identifier
define
identifier
eprintf
symbol
(
symbol
.
symbol
.
symbol
.
symbol
)
identifier
fprintf
symbol
(
identifier
stderr
symbol
,
identifier
VA
identifier
ARGS
symbol
)
identifier
NewLine
keyword
else
identifier
NewLine
identifier
define
identifier
eprintf
symbol
(
symbol
.
symbol
.
symbol
.
symbol
)
integerConstant
42
identifier
NewLine
identifier
endif
identifier
NewLine
identifier
NewLine
identifier
const
keyword
int
identifier
maxk
symbol
=
integerConstant
40
symbol
;
identifier
NewLine
identifier
const
keyword
int
identifier
maxn
symbol
=
symbol
(
keyword
int
symbol
)
integerConstant
1
identifier
e4
symbol
+
integerConstant
100
symbol
;
identifier
NewLine
keyword
char
identifier
str
symbol
[
identifier
maxn
symbol
]
symbol
;
identifier
NewLine
keyword
int
identifier
a
symbol
[
identifier
maxn
symbol
*
identifier
maxk
symbol
]
symbol
;
identifier
NewLine
identifier
NewLine
keyword
char
identifier
code
symbol
[
symbol
]
symbol
=
stringConstant
1ijk
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
mul
symbol
[
integerConstant
4
symbol
]
symbol
[
integerConstant
4
symbol
]
symbol
=
identifier
NewLine
symbol
{
identifier
NewLine
symbol
{
integerConstant
0
symbol
,
integerConstant
1
symbol
,
integerConstant
2
symbol
,
integerConstant
3
symbol
}
symbol
,
identifier
NewLine
symbol
{
integerConstant
1
symbol
,
integerConstant
0
symbol
,
integerConstant
3
symbol
,
integerConstant
2
symbol
}
symbol
,
identifier
NewLine
symbol
{
integerConstant
2
symbol
,
integerConstant
3
symbol
,
integerConstant
0
symbol
,
integerConstant
1
symbol
}
symbol
,
identifier
NewLine
symbol
{
integerConstant
3
symbol
,
integerConstant
2
symbol
,
integerConstant
1
symbol
,
integerConstant
0
symbol
}
identifier
NewLine
symbol
}
symbol
;
identifier
NewLine
keyword
int
identifier
sgn
symbol
[
integerConstant
4
symbol
]
symbol
[
integerConstant
4
symbol
]
symbol
=
identifier
NewLine
symbol
{
identifier
NewLine
symbol
{
integerConstant
0
symbol
,
integerConstant
0
symbol
,
integerConstant
0
symbol
,
integerConstant
0
symbol
}
symbol
,
identifier
NewLine
symbol
{
integerConstant
0
symbol
,
integerConstant
1
symbol
,
integerConstant
0
symbol
,
integerConstant
1
symbol
}
symbol
,
identifier
NewLine
symbol
{
integerConstant
0
symbol
,
integerConstant
1
symbol
,
integerConstant
1
symbol
,
integerConstant
0
symbol
}
symbol
,
identifier
NewLine
symbol
{
integerConstant
0
symbol
,
integerConstant
0
symbol
,
integerConstant
1
symbol
,
integerConstant
1
symbol
}
identifier
NewLine
symbol
}
symbol
;
identifier
NewLine
identifier
NewLine
identifier
bool
identifier
dp
symbol
[
identifier
maxn
symbol
*
identifier
maxk
symbol
]
symbol
[
integerConstant
4
symbol
]
symbol
[
integerConstant
4
symbol
]
symbol
[
integerConstant
2
symbol
]
symbol
;
identifier
NewLine
identifier
NewLine
identifier
NewLine
keyword
void
identifier
solve
symbol
(
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
memset
symbol
(
identifier
dp
symbol
,
keyword
false
symbol
,
identifier
sizeof
identifier
dp
symbol
)
symbol
;
identifier
NewLine
keyword
int
identifier
n
symbol
;
identifier
NewLine
identifier
long
identifier
long
identifier
k
symbol
;
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d%lld
symbol
,
symbol
&
identifier
n
symbol
,
symbol
&
identifier
k
symbol
)
symbol
;
identifier
NewLine
identifier
k
symbol
=
identifier
min
symbol
(
identifier
k
symbol
,
integerConstant
20
symbol
+
identifier
k
integerConstant
20
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%s
symbol
,
identifier
str
symbol
)
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
n
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
a
symbol
[
identifier
i
symbol
]
symbol
=
identifier
find
symbol
(
identifier
code
symbol
,
identifier
code
symbol
+
integerConstant
4
symbol
,
identifier
str
symbol
[
identifier
i
symbol
]
symbol
)
symbol
-
identifier
code
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
n
symbol
*
identifier
k
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
a
symbol
[
identifier
i
symbol
]
symbol
=
identifier
a
symbol
[
identifier
i
identifier
n
symbol
]
symbol
;
identifier
NewLine
identifier
n
symbol
*
symbol
=
identifier
k
symbol
;
identifier
NewLine
identifier
dp
symbol
[
integerConstant
0
symbol
]
symbol
[
integerConstant
0
symbol
]
symbol
[
integerConstant
0
symbol
]
symbol
[
integerConstant
0
symbol
]
symbol
=
keyword
true
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
symbol
=
identifier
n
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
j
symbol
=
integerConstant
0
symbol
;
identifier
j
symbol
<
integerConstant
3
symbol
;
identifier
j
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
cur
symbol
=
integerConstant
0
symbol
;
identifier
cur
symbol
<
integerConstant
4
symbol
;
identifier
cur
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
s
symbol
=
integerConstant
0
symbol
;
identifier
s
symbol
<
integerConstant
2
symbol
;
identifier
s
symbol
+
symbol
+
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
dp
symbol
[
identifier
i
symbol
]
symbol
[
identifier
j
symbol
]
symbol
[
identifier
cur
symbol
]
symbol
[
identifier
s
symbol
]
symbol
)
identifier
NewLine
identifier
continue
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
s
symbol
=
symbol
=
integerConstant
0
symbol
&
symbol
&
identifier
cur
symbol
=
symbol
=
identifier
j
symbol
+
integerConstant
1
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
dp
symbol
[
identifier
i
symbol
]
symbol
[
identifier
j
symbol
+
integerConstant
1
symbol
]
symbol
[
integerConstant
0
symbol
]
symbol
[
integerConstant
0
symbol
]
symbol
=
keyword
true
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
i
symbol
=
symbol
=
identifier
n
symbol
)
identifier
NewLine
identifier
continue
symbol
;
identifier
NewLine
keyword
int
identifier
ns
symbol
=
identifier
s
identifier
sgn
symbol
[
identifier
cur
symbol
]
symbol
[
identifier
a
symbol
[
identifier
i
symbol
]
symbol
]
symbol
;
identifier
NewLine
keyword
int
identifier
nxt
symbol
=
identifier
mul
symbol
[
identifier
cur
symbol
]
symbol
[
identifier
a
symbol
[
identifier
i
symbol
]
symbol
]
symbol
;
identifier
NewLine
identifier
dp
symbol
[
identifier
i
symbol
+
integerConstant
1
symbol
]
symbol
[
identifier
j
symbol
]
symbol
[
identifier
nxt
symbol
]
symbol
[
identifier
ns
symbol
]
symbol
=
keyword
true
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
printf
symbol
(
identifier
dp
symbol
[
identifier
n
symbol
]
symbol
[
integerConstant
3
symbol
]
symbol
[
integerConstant
0
symbol
]
symbol
[
integerConstant
0
symbol
]
stringConstant
YES
stringConstant
NO
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
ifdef
identifier
LOCAL
identifier
NewLine
identifier
freopen
symbol
(
stringConstant
input.txt
symbol
,
stringConstant
r
symbol
,
identifier
stdin
symbol
)
symbol
;
identifier
NewLine
identifier
freopen
symbol
(
stringConstant
output.txt
symbol
,
stringConstant
w
symbol
,
identifier
stdout
symbol
)
symbol
;
identifier
NewLine
identifier
endif
identifier
NewLine
identifier
NewLine
keyword
int
identifier
t
symbol
;
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
t
symbol
)
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
1
symbol
;
identifier
i
symbol
<
symbol
=
identifier
t
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
eprintf
symbol
(
stringConstant
Case %d..%d
symbol
,
identifier
i
symbol
,
identifier
t
symbol
)
symbol
;
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: 
symbol
,
identifier
i
symbol
)
symbol
;
identifier
NewLine
identifier
solve
symbol
(
symbol
)
symbol
;
identifier
NewLine
identifier
printf
symbol
(
stringConstant
\n
symbol
)
symbol
;
identifier
NewLine
identifier
eprintf
symbol
(
stringConstant
  done\n
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/mezei.0.cpp file...

identifier
include
symbol
<
identifier
iostream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
stdio
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
algorithm
symbol
>
symbol
>
identifier
NewLine
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
FILE
symbol
*
identifier
reader
symbol
=
identifier
fopen
symbol
(
stringConstant
A-large.in
symbol
,
stringConstant
r
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
T
symbol
;
identifier
NewLine
identifier
fscanf
symbol
(
identifier
reader
symbol
,
stringConstant
%d
symbol
,
symbol
&
identifier
T
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
t
symbol
=
integerConstant
1
symbol
;
identifier
t
symbol
<
symbol
=
identifier
T
symbol
;
identifier
t
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
S
identifier
max
symbol
;
identifier
NewLine
keyword
int
identifier
S
symbol
[
integerConstant
1010
symbol
]
symbol
;
identifier
NewLine
identifier
fscanf
symbol
(
identifier
reader
symbol
,
stringConstant
%d
symbol
,
symbol
&
identifier
S
identifier
max
symbol
)
symbol
;
identifier
NewLine
keyword
char
identifier
c
symbol
;
identifier
NewLine
identifier
fscanf
symbol
(
identifier
reader
symbol
,
stringConstant
%c
symbol
,
symbol
&
identifier
c
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
symbol
=
identifier
S
identifier
max
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
fscanf
symbol
(
identifier
reader
symbol
,
stringConstant
%c
symbol
,
symbol
&
identifier
c
symbol
)
symbol
;
identifier
NewLine
identifier
S
symbol
[
identifier
i
symbol
]
symbol
=
identifier
c
symbol
-
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
int
identifier
standing
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
keyword
int
identifier
friends
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
symbol
=
identifier
S
identifier
max
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
standing
symbol
>
symbol
=
identifier
i
symbol
)
symbol
{
identifier
NewLine
identifier
standing
symbol
+
symbol
=
identifier
S
symbol
[
identifier
i
symbol
]
symbol
;
identifier
NewLine
symbol
}
keyword
else
symbol
{
identifier
NewLine
identifier
friends
symbol
+
symbol
=
identifier
i
symbol
-
identifier
standing
symbol
;
identifier
NewLine
identifier
standing
symbol
=
identifier
i
symbol
+
identifier
S
symbol
[
identifier
i
symbol
]
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: %d\n
symbol
,
identifier
t
symbol
,
identifier
friends
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/mezei.1.cpp file...

identifier
include
symbol
<
identifier
iostream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
stdio
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
algorithm
symbol
>
identifier
NewLine
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
FILE
symbol
*
identifier
reader
symbol
=
identifier
fopen
symbol
(
stringConstant
B-large.in
symbol
,
stringConstant
r
symbol
)
symbol
;
identifier
NewLine
keyword
int
identifier
T
symbol
;
identifier
NewLine
identifier
fscanf
symbol
(
identifier
reader
symbol
,
stringConstant
%d
symbol
,
symbol
&
identifier
T
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
t
symbol
=
integerConstant
1
symbol
;
identifier
t
symbol
<
symbol
=
identifier
T
symbol
;
identifier
t
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
D
symbol
;
identifier
NewLine
identifier
fscanf
symbol
(
identifier
reader
symbol
,
stringConstant
%d
symbol
,
symbol
&
identifier
D
symbol
)
symbol
;
identifier
NewLine
keyword
int
identifier
P
symbol
[
integerConstant
1000
symbol
]
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
D
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
fscanf
symbol
(
identifier
reader
symbol
,
stringConstant
%d
symbol
,
symbol
&
identifier
P
symbol
[
identifier
i
symbol
]
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
int
identifier
time
identifier
best
symbol
=
symbol
-
integerConstant
1
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
opt
symbol
=
integerConstant
1
symbol
;
identifier
opt
symbol
<
symbol
=
integerConstant
1000
symbol
;
identifier
opt
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
time
symbol
=
identifier
opt
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
D
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
time
symbol
+
symbol
=
symbol
(
identifier
P
symbol
[
identifier
i
symbol
]
symbol
-
integerConstant
1
symbol
)
symbol
/
identifier
opt
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
if
symbol
(
identifier
time
identifier
best
symbol
=
symbol
=
symbol
-
integerConstant
1
symbol
|
symbol
|
identifier
time
symbol
<
identifier
time
identifier
best
symbol
)
identifier
NewLine
identifier
time
identifier
best
symbol
=
identifier
time
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: %d\n
symbol
,
identifier
t
symbol
,
identifier
time
identifier
best
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/mezei.2.cpp file...

identifier
include
symbol
<
identifier
iostream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
stdio
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
NewLine
identifier
define
identifier
L
identifier
MAX
integerConstant
10000
identifier
NewLine
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
convert
symbol
(
keyword
char
identifier
c
symbol
)
symbol
;
identifier
NewLine
keyword
int
identifier
multiply
symbol
(
keyword
int
identifier
p
symbol
,
keyword
int
identifier
q
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
FILE
symbol
*
identifier
reader
symbol
=
identifier
fopen
symbol
(
stringConstant
C-large.in
symbol
,
stringConstant
r
symbol
)
symbol
;
identifier
NewLine
keyword
int
identifier
T
symbol
;
identifier
NewLine
identifier
fscanf
symbol
(
identifier
reader
symbol
,
stringConstant
%d
symbol
,
symbol
&
identifier
T
symbol
)
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
t
symbol
=
integerConstant
1
symbol
;
identifier
t
symbol
<
symbol
=
identifier
T
symbol
;
identifier
t
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
L
symbol
;
identifier
NewLine
identifier
long
identifier
long
identifier
X
symbol
;
identifier
NewLine
identifier
fscanf
symbol
(
identifier
reader
symbol
,
stringConstant
%d %lld
symbol
,
symbol
&
identifier
L
symbol
,
symbol
&
identifier
X
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
identifier
X
symbol
=
identifier
min
symbol
(
identifier
X
symbol
,
integerConstant
12
symbol
+
identifier
X
integerConstant
4
symbol
)
symbol
;
identifier
NewLine
keyword
char
identifier
input
symbol
[
integerConstant
20
symbol
*
identifier
L
identifier
MAX
symbol
]
symbol
;
identifier
NewLine
identifier
NewLine
keyword
char
identifier
c
symbol
;
identifier
NewLine
identifier
fscanf
symbol
(
identifier
reader
symbol
,
stringConstant
%c
symbol
,
symbol
&
identifier
c
symbol
)
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
L
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
fscanf
symbol
(
identifier
reader
symbol
,
stringConstant
%c
symbol
,
symbol
&
identifier
c
symbol
)
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
x
symbol
=
integerConstant
0
symbol
;
identifier
x
symbol
<
identifier
X
symbol
;
identifier
x
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
input
symbol
[
identifier
x
symbol
*
identifier
L
symbol
+
identifier
i
symbol
]
symbol
=
identifier
convert
symbol
(
identifier
c
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
int
identifier
total
identifier
length
symbol
=
identifier
X
symbol
*
identifier
L
symbol
;
identifier
NewLine
identifier
NewLine
identifier
NewLine
keyword
int
identifier
find
identifier
i
symbol
,
identifier
find
identifier
j
symbol
,
identifier
find
identifier
k
symbol
;
identifier
NewLine
keyword
int
identifier
val
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
identifier
for
symbol
(
identifier
find
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
find
identifier
i
symbol
<
identifier
total
identifier
length
symbol
;
identifier
find
identifier
i
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
val
symbol
=
identifier
multiply
symbol
(
identifier
val
symbol
,
identifier
input
symbol
[
identifier
find
identifier
i
symbol
]
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
val
symbol
=
symbol
=
identifier
convert
symbol
(
identifier
i
symbol
)
symbol
)
identifier
NewLine
identifier
break
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
val
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
identifier
for
symbol
(
identifier
find
identifier
j
symbol
=
identifier
find
identifier
i
symbol
+
integerConstant
1
symbol
;
identifier
find
identifier
j
symbol
<
identifier
total
identifier
length
symbol
;
identifier
find
identifier
j
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
val
symbol
=
identifier
multiply
symbol
(
identifier
val
symbol
,
identifier
input
symbol
[
identifier
find
identifier
j
symbol
]
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
val
symbol
=
symbol
=
identifier
convert
symbol
(
identifier
j
symbol
)
symbol
)
identifier
NewLine
identifier
break
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
val
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
identifier
for
symbol
(
identifier
find
identifier
k
symbol
=
identifier
find
identifier
j
symbol
+
integerConstant
1
symbol
;
identifier
find
identifier
k
symbol
<
identifier
total
identifier
length
symbol
;
identifier
find
identifier
k
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
val
symbol
=
identifier
multiply
symbol
(
identifier
val
symbol
,
identifier
input
symbol
[
identifier
find
identifier
k
symbol
]
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
if
symbol
(
identifier
val
symbol
=
symbol
=
identifier
convert
symbol
(
identifier
k
symbol
)
symbol
)
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: YES\n
symbol
,
identifier
t
symbol
)
symbol
;
identifier
NewLine
keyword
else
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: NO\n
symbol
,
identifier
t
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
int
identifier
convert
symbol
(
keyword
char
identifier
c
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
c
symbol
=
symbol
=
identifier
i
symbol
)
identifier
NewLine
keyword
return
integerConstant
2
symbol
;
identifier
NewLine
keyword
else
keyword
if
symbol
(
identifier
c
symbol
=
symbol
=
identifier
j
symbol
)
identifier
NewLine
keyword
return
integerConstant
3
symbol
;
identifier
NewLine
keyword
else
keyword
if
symbol
(
identifier
c
symbol
=
symbol
=
identifier
k
symbol
)
identifier
NewLine
keyword
return
integerConstant
4
symbol
;
identifier
NewLine
keyword
else
identifier
NewLine
symbol
{
identifier
NewLine
keyword
return
symbol
-
integerConstant
1
symbol
;
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Error (convert)\n
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
int
identifier
multiply
symbol
(
keyword
int
identifier
p
symbol
,
keyword
int
identifier
q
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
int
identifier
m
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
p
symbol
<
integerConstant
0
symbol
)
symbol
{
identifier
NewLine
identifier
m
symbol
=
symbol
-
identifier
m
symbol
;
identifier
NewLine
identifier
p
symbol
=
symbol
-
identifier
p
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
q
symbol
<
integerConstant
0
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
m
symbol
=
symbol
-
identifier
m
symbol
;
identifier
NewLine
identifier
q
symbol
=
symbol
-
identifier
q
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
if
symbol
(
identifier
p
symbol
=
symbol
=
integerConstant
1
symbol
)
identifier
NewLine
identifier
m
symbol
*
symbol
=
identifier
q
symbol
;
identifier
NewLine
keyword
else
keyword
if
symbol
(
identifier
q
symbol
=
symbol
=
integerConstant
1
symbol
)
identifier
NewLine
identifier
m
symbol
*
symbol
=
identifier
p
symbol
;
identifier
NewLine
keyword
else
keyword
if
symbol
(
identifier
p
symbol
=
symbol
=
identifier
q
symbol
)
identifier
NewLine
identifier
m
symbol
*
symbol
=
symbol
-
integerConstant
1
symbol
;
identifier
NewLine
keyword
else
keyword
if
symbol
(
identifier
p
symbol
=
symbol
=
identifier
convert
symbol
(
identifier
i
symbol
)
symbol
&
symbol
&
identifier
q
symbol
=
symbol
=
identifier
convert
symbol
(
identifier
j
symbol
)
symbol
)
identifier
NewLine
identifier
m
symbol
*
symbol
=
identifier
convert
symbol
(
identifier
k
symbol
)
symbol
;
identifier
NewLine
keyword
else
keyword
if
symbol
(
identifier
p
symbol
=
symbol
=
identifier
convert
symbol
(
identifier
j
symbol
)
symbol
&
symbol
&
identifier
q
symbol
=
symbol
=
identifier
convert
symbol
(
identifier
i
symbol
)
symbol
)
identifier
NewLine
identifier
m
symbol
*
symbol
=
symbol
-
identifier
convert
symbol
(
identifier
k
symbol
)
symbol
;
identifier
NewLine
keyword
else
keyword
if
symbol
(
identifier
p
symbol
=
symbol
=
identifier
convert
symbol
(
identifier
i
symbol
)
symbol
&
symbol
&
identifier
q
symbol
=
symbol
=
identifier
convert
symbol
(
identifier
k
symbol
)
symbol
)
identifier
NewLine
identifier
m
symbol
*
symbol
=
symbol
-
identifier
convert
symbol
(
identifier
j
symbol
)
symbol
;
identifier
NewLine
keyword
else
keyword
if
symbol
(
identifier
p
symbol
=
symbol
=
identifier
convert
symbol
(
identifier
k
symbol
)
symbol
&
symbol
&
identifier
q
symbol
=
symbol
=
identifier
convert
symbol
(
identifier
i
symbol
)
symbol
)
identifier
NewLine
identifier
m
symbol
*
symbol
=
identifier
convert
symbol
(
identifier
j
symbol
)
symbol
;
identifier
NewLine
keyword
else
keyword
if
symbol
(
identifier
p
symbol
=
symbol
=
identifier
convert
symbol
(
identifier
j
symbol
)
symbol
&
symbol
&
identifier
q
symbol
=
symbol
=
identifier
convert
symbol
(
identifier
k
symbol
)
symbol
)
identifier
NewLine
identifier
m
symbol
*
symbol
=
identifier
convert
symbol
(
identifier
i
symbol
)
symbol
;
identifier
NewLine
keyword
else
keyword
if
symbol
(
identifier
p
symbol
=
symbol
=
identifier
convert
symbol
(
identifier
k
symbol
)
symbol
&
symbol
&
identifier
q
symbol
=
symbol
=
identifier
convert
symbol
(
identifier
j
symbol
)
symbol
)
identifier
NewLine
identifier
m
symbol
*
symbol
=
symbol
-
identifier
convert
symbol
(
identifier
i
symbol
)
symbol
;
identifier
NewLine
keyword
else
identifier
NewLine
symbol
{
identifier
NewLine
keyword
return
symbol
-
integerConstant
1
symbol
;
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Error (mult)\n
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
return
identifier
m
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/Mister.0.cpp file...

identifier
include
symbol
<
identifier
bits
symbol
/
identifier
stdc
symbol
+
symbol
+
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
keyword
char
identifier
shy
symbol
[
integerConstant
1005
symbol
]
symbol
;
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
T
symbol
;
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
T
symbol
)
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
cn
symbol
=
integerConstant
1
symbol
;
identifier
cn
symbol
<
symbol
=
identifier
T
symbol
;
symbol
+
symbol
+
identifier
cn
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
S
symbol
,
identifier
csum
symbol
=
integerConstant
0
symbol
,
identifier
ans
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d%s
symbol
,
symbol
&
identifier
S
symbol
,
identifier
shy
symbol
)
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
symbol
=
identifier
S
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
num
symbol
=
identifier
shy
symbol
[
identifier
i
symbol
]
symbol
-
integerConstant
0
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
num
symbol
)
identifier
ans
symbol
=
identifier
max
symbol
(
identifier
ans
symbol
,
identifier
i
symbol
-
identifier
csum
symbol
)
symbol
;
identifier
NewLine
identifier
csum
symbol
+
symbol
=
identifier
num
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: %d\n
symbol
,
identifier
cn
symbol
,
identifier
ans
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/Mister.1.cpp file...

identifier
include
symbol
<
identifier
bits
symbol
/
identifier
stdc
symbol
+
symbol
+
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
keyword
int
identifier
A
symbol
[
integerConstant
1005
symbol
]
symbol
;
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
T
symbol
;
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
T
symbol
)
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
cn
symbol
=
integerConstant
1
symbol
;
identifier
cn
symbol
<
symbol
=
identifier
T
symbol
;
symbol
+
symbol
+
identifier
cn
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
D
symbol
,
identifier
ans
symbol
=
identifier
INT
identifier
MAX
symbol
;
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
D
symbol
)
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
D
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
A
symbol
[
identifier
i
symbol
]
symbol
)
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
mx
symbol
=
integerConstant
1
symbol
;
identifier
mx
symbol
<
symbol
=
integerConstant
1000
symbol
;
symbol
+
symbol
+
identifier
mx
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
req
symbol
=
identifier
mx
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
D
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
identifier
NewLine
identifier
req
symbol
+
symbol
=
symbol
(
identifier
A
symbol
[
identifier
i
symbol
]
symbol
+
identifier
mx
symbol
-
integerConstant
1
symbol
)
symbol
/
identifier
mx
symbol
-
integerConstant
1
symbol
;
identifier
NewLine
identifier
ans
symbol
=
identifier
min
symbol
(
identifier
ans
symbol
,
identifier
req
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: %d\n
symbol
,
identifier
cn
symbol
,
identifier
ans
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/Mister.2.cpp file...

identifier
include
symbol
<
identifier
bits
symbol
/
identifier
stdc
symbol
+
symbol
+
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
keyword
char
identifier
str
symbol
[
integerConstant
110005
symbol
]
symbol
;
identifier
NewLine
keyword
int
identifier
seq
symbol
[
integerConstant
110005
symbol
]
symbol
,
identifier
lmult
symbol
[
integerConstant
110005
symbol
]
symbol
,
identifier
rmult
symbol
[
integerConstant
110005
symbol
]
symbol
,
identifier
conv
symbol
[
integerConstant
256
symbol
]
symbol
;
identifier
NewLine
keyword
int
identifier
MULT
symbol
[
integerConstant
5
symbol
]
symbol
[
integerConstant
5
symbol
]
symbol
=
symbol
{
identifier
NewLine
symbol
{
integerConstant
0
symbol
,
integerConstant
0
symbol
,
integerConstant
0
symbol
,
integerConstant
0
symbol
,
integerConstant
0
symbol
}
symbol
,
identifier
NewLine
symbol
{
integerConstant
0
symbol
,
integerConstant
1
symbol
,
integerConstant
2
symbol
,
integerConstant
3
symbol
,
integerConstant
4
symbol
}
symbol
,
identifier
NewLine
symbol
{
integerConstant
0
symbol
,
integerConstant
2
symbol
,
symbol
-
integerConstant
1
symbol
,
integerConstant
4
symbol
,
symbol
-
integerConstant
3
symbol
}
symbol
,
identifier
NewLine
symbol
{
integerConstant
0
symbol
,
integerConstant
3
symbol
,
symbol
-
integerConstant
4
symbol
,
symbol
-
integerConstant
1
symbol
,
integerConstant
2
symbol
}
symbol
,
identifier
NewLine
symbol
{
integerConstant
0
symbol
,
integerConstant
4
symbol
,
integerConstant
3
symbol
,
symbol
-
integerConstant
2
symbol
,
symbol
-
integerConstant
1
symbol
}
identifier
NewLine
symbol
}
symbol
;
identifier
NewLine
keyword
int
identifier
L
symbol
;
identifier
NewLine
identifier
long
identifier
long
identifier
X
symbol
;
identifier
NewLine
keyword
int
identifier
mult
symbol
(
keyword
int
identifier
a
symbol
,
keyword
int
identifier
b
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
sign
symbol
=
identifier
a
symbol
<
integerConstant
0
symbol
-
integerConstant
1
integerConstant
1
symbol
;
identifier
NewLine
identifier
sign
symbol
*
symbol
=
symbol
(
identifier
b
symbol
<
integerConstant
0
symbol
-
integerConstant
1
integerConstant
1
symbol
)
symbol
;
identifier
NewLine
keyword
return
identifier
sign
symbol
*
identifier
MULT
symbol
[
identifier
abs
symbol
(
identifier
a
symbol
)
symbol
]
symbol
[
identifier
abs
symbol
(
identifier
b
symbol
)
symbol
]
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
bool
identifier
can
symbol
(
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
X
symbol
>
symbol
=
integerConstant
12
symbol
)
symbol
{
identifier
NewLine
identifier
X
symbol
=
integerConstant
8
symbol
+
symbol
(
identifier
X
integerConstant
4
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
int
identifier
N
symbol
=
identifier
X
symbol
*
identifier
L
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
N
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
symbol
{
identifier
NewLine
identifier
seq
symbol
[
identifier
i
symbol
+
integerConstant
1
symbol
]
symbol
=
identifier
conv
symbol
[
identifier
str
symbol
[
identifier
i
identifier
L
symbol
]
symbol
]
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
int
identifier
ipos
symbol
=
integerConstant
0
symbol
,
identifier
kpos
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
lmult
symbol
[
integerConstant
0
symbol
]
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
1
symbol
;
identifier
i
symbol
<
symbol
=
identifier
N
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
symbol
{
identifier
NewLine
identifier
lmult
symbol
[
identifier
i
symbol
]
symbol
=
identifier
mult
symbol
(
identifier
lmult
symbol
[
identifier
i
symbol
-
integerConstant
1
symbol
]
symbol
,
identifier
seq
symbol
[
identifier
i
symbol
]
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
lmult
symbol
[
identifier
i
symbol
]
symbol
=
symbol
=
integerConstant
2
symbol
&
symbol
&
identifier
ipos
symbol
)
identifier
ipos
symbol
=
identifier
i
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
rmult
symbol
[
identifier
N
symbol
+
integerConstant
1
symbol
]
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
identifier
N
symbol
;
identifier
i
symbol
>
symbol
=
integerConstant
1
symbol
;
symbol
-
symbol
-
identifier
i
symbol
)
symbol
{
identifier
NewLine
identifier
rmult
symbol
[
identifier
i
symbol
]
symbol
=
identifier
mult
symbol
(
identifier
seq
symbol
[
identifier
i
symbol
]
symbol
,
identifier
rmult
symbol
[
identifier
i
symbol
+
integerConstant
1
symbol
]
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
rmult
symbol
[
identifier
i
symbol
]
symbol
=
symbol
=
integerConstant
4
symbol
&
symbol
&
identifier
kpos
symbol
)
identifier
kpos
symbol
=
identifier
i
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
lmult
symbol
[
identifier
N
symbol
]
symbol
=
symbol
-
integerConstant
1
symbol
)
keyword
return
keyword
false
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
ipos
symbol
|
symbol
|
identifier
kpos
symbol
|
symbol
|
identifier
ipos
symbol
>
symbol
=
identifier
kpos
symbol
)
keyword
return
keyword
false
symbol
;
identifier
NewLine
keyword
return
keyword
true
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
symbol
{
identifier
NewLine
identifier
conv
symbol
[
integerConstant
1
symbol
]
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
identifier
conv
symbol
[
identifier
i
symbol
]
symbol
=
integerConstant
2
symbol
;
identifier
NewLine
identifier
conv
symbol
[
identifier
j
symbol
]
symbol
=
integerConstant
3
symbol
;
identifier
NewLine
identifier
conv
symbol
[
identifier
k
symbol
]
symbol
=
integerConstant
4
symbol
;
identifier
NewLine
keyword
int
identifier
T
symbol
;
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
T
symbol
)
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
cn
symbol
=
integerConstant
1
symbol
;
identifier
cn
symbol
<
symbol
=
identifier
T
symbol
;
symbol
+
symbol
+
identifier
cn
symbol
)
symbol
{
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d%lld%s
symbol
,
symbol
&
identifier
L
symbol
,
symbol
&
identifier
X
symbol
,
identifier
str
symbol
)
symbol
;
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: 
symbol
,
identifier
cn
symbol
)
symbol
;
identifier
NewLine
identifier
printf
symbol
(
identifier
can
symbol
(
symbol
)
stringConstant
YES\n
stringConstant
NO\n
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/namonakiacc.0.cpp file...

identifier
include
symbol
<
identifier
cstdio
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
vector
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstring
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
functional
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
algorithm
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
math
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
bitset
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
set
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
queue
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
assert
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
iostream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
string
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
sstream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
stack
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
complex
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
numeric
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
map
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
time
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
typedef
identifier
long
identifier
double
identifier
ld
symbol
;
identifier
NewLine
identifier
typedef
identifier
long
identifier
long
identifier
ll
symbol
;
identifier
NewLine
identifier
typedef
identifier
unsigned
identifier
long
identifier
long
identifier
ull
symbol
;
identifier
NewLine
identifier
typedef
identifier
unsigned
keyword
int
identifier
uint
symbol
;
identifier
NewLine
identifier
typedef
identifier
pair
symbol
<
keyword
int
symbol
,
keyword
int
symbol
>
identifier
pii
symbol
;
identifier
NewLine
identifier
typedef
identifier
pair
symbol
<
keyword
int
symbol
,
identifier
ll
symbol
>
identifier
pil
symbol
;
identifier
NewLine
identifier
typedef
identifier
pair
symbol
<
keyword
int
symbol
,
identifier
ull
symbol
>
identifier
piu
symbol
;
identifier
NewLine
identifier
typedef
identifier
pair
symbol
<
identifier
ll
symbol
,
keyword
int
symbol
>
identifier
pli
symbol
;
identifier
NewLine
identifier
typedef
identifier
pair
symbol
<
identifier
ll
symbol
,
identifier
ll
symbol
>
identifier
pll
symbol
;
identifier
NewLine
identifier
typedef
identifier
pair
symbol
<
identifier
pii
symbol
,
identifier
ll
symbol
>
identifier
ppl
symbol
;
identifier
NewLine
identifier
typedef
identifier
pair
symbol
<
identifier
ll
symbol
,
identifier
pii
symbol
>
identifier
plp
symbol
;
identifier
NewLine
identifier
typedef
identifier
pair
symbol
<
keyword
int
symbol
,
identifier
pii
symbol
>
identifier
pip
symbol
;
identifier
NewLine
identifier
typedef
identifier
pair
symbol
<
identifier
pii
symbol
,
keyword
int
symbol
>
identifier
ppi
symbol
;
identifier
NewLine
identifier
typedef
identifier
pair
symbol
<
identifier
pii
symbol
,
identifier
pii
symbol
>
identifier
ppp
symbol
;
identifier
NewLine
identifier
typedef
identifier
pair
symbol
<
identifier
double
symbol
,
keyword
int
symbol
>
identifier
pdi
symbol
;
identifier
NewLine
identifier
typedef
identifier
pair
symbol
<
keyword
int
symbol
,
identifier
double
symbol
>
identifier
pid
symbol
;
identifier
NewLine
identifier
typedef
identifier
pair
symbol
<
identifier
double
symbol
,
identifier
pii
symbol
>
identifier
pdp
symbol
;
identifier
NewLine
identifier
typedef
identifier
pair
symbol
<
identifier
double
symbol
,
identifier
double
symbol
>
identifier
pdd
symbol
;
identifier
NewLine
identifier
typedef
identifier
pair
symbol
<
identifier
pdd
symbol
,
identifier
double
symbol
>
identifier
pd3
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
keyword
int
symbol
>
identifier
vec
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
identifier
vec
symbol
>
identifier
mat
symbol
;
identifier
NewLine
identifier
define
identifier
rep
symbol
(
identifier
i
symbol
,
identifier
n
symbol
)
identifier
for
symbol
(
keyword
int
symbol
(
identifier
i
symbol
)
symbol
=
integerConstant
0
symbol
;
symbol
(
identifier
i
symbol
)
symbol
<
symbol
(
identifier
n
symbol
)
symbol
;
symbol
(
identifier
i
symbol
)
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
define
identifier
repn
symbol
(
identifier
i
symbol
,
identifier
a
symbol
,
identifier
n
symbol
)
identifier
for
symbol
(
keyword
int
symbol
(
identifier
i
symbol
)
symbol
=
symbol
(
identifier
a
symbol
)
symbol
;
symbol
(
identifier
i
symbol
)
symbol
<
symbol
(
identifier
n
symbol
)
symbol
;
symbol
(
identifier
i
symbol
)
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
define
identifier
ALL
symbol
(
identifier
x
symbol
)
symbol
(
identifier
x
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
,
symbol
(
identifier
x
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
identifier
NewLine
identifier
define
identifier
pb
identifier
push
identifier
back
identifier
NewLine
identifier
define
identifier
SORT
symbol
(
identifier
x
symbol
)
identifier
sort
symbol
(
symbol
(
identifier
x
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
,
symbol
(
identifier
x
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
SORTN
symbol
(
identifier
x
symbol
,
identifier
n
symbol
)
identifier
sort
symbol
(
symbol
(
identifier
x
symbol
)
symbol
,
symbol
(
identifier
x
symbol
)
symbol
+
symbol
(
identifier
n
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
ERASE
symbol
(
identifier
x
symbol
)
symbol
(
identifier
x
symbol
)
symbol
.
identifier
erase
symbol
(
identifier
unique
symbol
(
symbol
(
identifier
x
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
,
symbol
(
identifier
x
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
symbol
)
symbol
,
symbol
(
identifier
x
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
COUNT
symbol
(
identifier
x
symbol
,
identifier
c
symbol
)
identifier
count
symbol
(
symbol
(
identifier
x
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
,
symbol
(
identifier
x
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
symbol
,
symbol
(
identifier
c
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
REMOVE
symbol
(
identifier
x
symbol
,
identifier
c
symbol
)
symbol
(
identifier
x
symbol
)
symbol
.
identifier
erase
symbol
(
identifier
remove
symbol
(
symbol
(
identifier
x
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
,
symbol
(
identifier
x
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
symbol
,
symbol
(
identifier
c
symbol
)
symbol
)
symbol
,
symbol
(
identifier
x
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
REVERSE
symbol
(
identifier
x
symbol
)
identifier
reverse
symbol
(
symbol
(
identifier
x
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
,
symbol
(
identifier
x
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
FORIT
symbol
(
identifier
it
symbol
,
identifier
v
symbol
)
identifier
for
symbol
(
identifier
typeof
symbol
(
symbol
(
identifier
v
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
)
identifier
it
symbol
=
symbol
(
identifier
v
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
;
identifier
it
symbol
=
symbol
(
identifier
v
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
symbol
;
identifier
it
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
define
identifier
LB
symbol
(
identifier
x
symbol
,
identifier
a
symbol
)
identifier
lower
identifier
bound
symbol
(
symbol
(
identifier
x
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
,
symbol
(
identifier
x
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
symbol
,
symbol
(
identifier
a
symbol
)
symbol
)
symbol
-
symbol
(
identifier
x
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
identifier
NewLine
identifier
define
identifier
lb
symbol
(
identifier
x
symbol
,
identifier
a
symbol
)
identifier
lower
identifier
bound
symbol
(
symbol
(
identifier
x
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
,
symbol
(
identifier
x
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
symbol
,
symbol
(
identifier
a
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
LBN
symbol
(
identifier
x
symbol
,
identifier
a
symbol
,
identifier
n
symbol
)
identifier
lower
identifier
bound
symbol
(
symbol
(
identifier
x
symbol
)
symbol
,
symbol
(
identifier
x
symbol
)
symbol
+
symbol
(
identifier
n
symbol
)
symbol
,
symbol
(
identifier
a
symbol
)
symbol
)
symbol
-
symbol
(
identifier
x
symbol
)
identifier
NewLine
identifier
define
identifier
lbN
symbol
(
identifier
x
symbol
,
identifier
a
symbol
,
identifier
n
symbol
)
identifier
lower
identifier
bound
symbol
(
symbol
(
identifier
x
symbol
)
symbol
,
symbol
(
identifier
x
symbol
)
symbol
+
symbol
(
identifier
n
symbol
)
symbol
,
symbol
(
identifier
a
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
UB
symbol
(
identifier
x
symbol
,
identifier
a
symbol
)
identifier
upper
identifier
bound
symbol
(
symbol
(
identifier
x
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
,
symbol
(
identifier
x
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
symbol
,
symbol
(
identifier
a
symbol
)
symbol
)
symbol
-
symbol
(
identifier
x
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
identifier
NewLine
identifier
define
identifier
ub
symbol
(
identifier
x
symbol
,
identifier
a
symbol
)
identifier
upper
identifier
bound
symbol
(
symbol
(
identifier
x
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
,
symbol
(
identifier
x
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
symbol
,
symbol
(
identifier
a
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
BS
symbol
(
identifier
x
symbol
,
identifier
a
symbol
)
identifier
binary
identifier
search
symbol
(
symbol
(
identifier
x
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
,
symbol
(
identifier
x
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
symbol
,
symbol
(
identifier
a
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
BS2
symbol
(
identifier
x
symbol
,
identifier
n
symbol
,
identifier
a
symbol
)
identifier
binary
identifier
search
symbol
(
symbol
(
identifier
x
symbol
)
symbol
,
symbol
(
identifier
x
symbol
)
symbol
+
symbol
(
identifier
n
symbol
)
symbol
,
symbol
(
identifier
a
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
NB
symbol
(
identifier
x
symbol
)
symbol
(
symbol
(
symbol
(
identifier
x
symbol
)
symbol
&
symbol
~
symbol
(
symbol
(
identifier
x
symbol
)
symbol
+
symbol
(
symbol
(
identifier
x
symbol
)
symbol
&
symbol
-
symbol
(
identifier
x
symbol
)
symbol
)
symbol
)
symbol
)
symbol
/
symbol
(
symbol
(
identifier
x
symbol
)
symbol
&
symbol
-
symbol
(
identifier
x
symbol
)
symbol
)
symbol
>
symbol
>
integerConstant
1
symbol
)
symbol
|
symbol
(
symbol
(
identifier
x
symbol
)
symbol
+
symbol
(
symbol
(
identifier
x
symbol
)
symbol
&
symbol
-
symbol
(
identifier
x
symbol
)
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
NP
symbol
(
identifier
x
symbol
)
identifier
next
identifier
permutation
symbol
(
symbol
(
identifier
x
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
,
symbol
(
identifier
x
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
MM
symbol
(
identifier
x
symbol
,
identifier
p
symbol
)
identifier
memset
symbol
(
symbol
(
identifier
x
symbol
)
symbol
,
symbol
(
identifier
p
symbol
)
symbol
,
identifier
sizeof
symbol
(
identifier
x
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
SQ
symbol
(
identifier
x
symbol
)
symbol
(
identifier
x
symbol
)
symbol
*
symbol
(
identifier
x
symbol
)
identifier
NewLine
identifier
define
identifier
SC
symbol
(
identifier
c1
symbol
,
identifier
c2
symbol
)
identifier
strcmp
symbol
(
identifier
c1
symbol
,
identifier
c2
symbol
)
symbol
=
symbol
=
integerConstant
0
identifier
NewLine
identifier
define
identifier
mp
identifier
make
identifier
pair
identifier
NewLine
identifier
define
identifier
INF
symbol
(
integerConstant
1
symbol
<
symbol
<
integerConstant
29
symbol
)
identifier
NewLine
identifier
define
identifier
INFL
symbol
(
integerConstant
1
identifier
LL
symbol
<
symbol
<
integerConstant
61
symbol
)
identifier
NewLine
identifier
define
identifier
fi
identifier
first
identifier
NewLine
identifier
define
identifier
se
identifier
second
identifier
NewLine
identifier
define
identifier
MOD
integerConstant
1000000009
identifier
NewLine
identifier
define
identifier
EPS
integerConstant
1
identifier
e
symbol
-
integerConstant
9
identifier
NewLine
identifier
define
identifier
MIN
symbol
(
identifier
x
symbol
,
identifier
a
symbol
)
identifier
x
symbol
=
identifier
min
symbol
(
identifier
x
symbol
,
identifier
a
symbol
)
identifier
NewLine
identifier
define
identifier
MAX
symbol
(
identifier
x
symbol
,
identifier
a
symbol
)
identifier
x
symbol
=
identifier
max
symbol
(
identifier
x
symbol
,
identifier
a
symbol
)
identifier
NewLine
identifier
define
identifier
madd
symbol
(
identifier
x
symbol
,
identifier
a
symbol
)
identifier
x
symbol
=
symbol
(
identifier
x
symbol
+
identifier
a
symbol
)
identifier
MOD
identifier
NewLine
identifier
define
identifier
msub
symbol
(
identifier
x
symbol
,
identifier
a
symbol
)
identifier
x
symbol
=
symbol
(
identifier
x
symbol
+
identifier
MOD
symbol
-
identifier
a
symbol
)
identifier
MOD
identifier
NewLine
identifier
define
identifier
OUTPUT
symbol
(
identifier
x
symbol
)
identifier
rep
symbol
(
identifier
i
symbol
,
identifier
x
symbol
.
identifier
size
symbol
(
symbol
)
symbol
)
identifier
printf
symbol
(
stringConstant
%d%c
symbol
,
identifier
x
symbol
[
identifier
i
symbol
]
symbol
,
identifier
i
symbol
+
integerConstant
1
symbol
=
symbol
=
identifier
x
symbol
.
identifier
size
symbol
(
symbol
)
identifier
n
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
T
symbol
,
identifier
N
symbol
;
identifier
NewLine
keyword
char
identifier
s
symbol
[
integerConstant
2000
symbol
]
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
T
symbol
)
symbol
;
identifier
NewLine
identifier
repn
symbol
(
symbol
,
integerConstant
1
symbol
,
identifier
T
symbol
+
integerConstant
1
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
int
identifier
ans
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
N
symbol
)
symbol
;
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%s
symbol
,
symbol
&
identifier
s
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
now
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
rep
symbol
(
identifier
i
symbol
,
identifier
N
symbol
+
integerConstant
1
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
while
symbol
(
identifier
now
symbol
<
identifier
i
symbol
)
identifier
now
symbol
+
symbol
+
symbol
,
identifier
ans
symbol
+
symbol
+
symbol
;
identifier
NewLine
identifier
now
symbol
+
symbol
=
identifier
s
symbol
[
identifier
i
symbol
]
symbol
-
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: %d\n
symbol
,
symbol
,
identifier
ans
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
symbol
}
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/namonakiacc.1.cpp file...

identifier
include
symbol
<
identifier
cstdio
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
vector
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstring
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
functional
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
algorithm
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
math
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
bitset
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
set
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
queue
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
assert
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
iostream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
string
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
sstream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
stack
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
complex
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
numeric
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
map
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
time
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
typedef
identifier
long
identifier
double
identifier
ld
symbol
;
identifier
NewLine
identifier
typedef
identifier
long
identifier
long
identifier
ll
symbol
;
identifier
NewLine
identifier
typedef
identifier
unsigned
identifier
long
identifier
long
identifier
ull
symbol
;
identifier
NewLine
identifier
typedef
identifier
unsigned
keyword
int
identifier
uint
symbol
;
identifier
NewLine
identifier
typedef
identifier
pair
symbol
<
keyword
int
symbol
,
keyword
int
symbol
>
identifier
pii
symbol
;
identifier
NewLine
identifier
typedef
identifier
pair
symbol
<
keyword
int
symbol
,
identifier
ll
symbol
>
identifier
pil
symbol
;
identifier
NewLine
identifier
typedef
identifier
pair
symbol
<
keyword
int
symbol
,
identifier
ull
symbol
>
identifier
piu
symbol
;
identifier
NewLine
identifier
typedef
identifier
pair
symbol
<
identifier
ll
symbol
,
keyword
int
symbol
>
identifier
pli
symbol
;
identifier
NewLine
identifier
typedef
identifier
pair
symbol
<
identifier
ll
symbol
,
identifier
ll
symbol
>
identifier
pll
symbol
;
identifier
NewLine
identifier
typedef
identifier
pair
symbol
<
identifier
pii
symbol
,
identifier
ll
symbol
>
identifier
ppl
symbol
;
identifier
NewLine
identifier
typedef
identifier
pair
symbol
<
identifier
ll
symbol
,
identifier
pii
symbol
>
identifier
plp
symbol
;
identifier
NewLine
identifier
typedef
identifier
pair
symbol
<
keyword
int
symbol
,
identifier
pii
symbol
>
identifier
pip
symbol
;
identifier
NewLine
identifier
typedef
identifier
pair
symbol
<
identifier
pii
symbol
,
keyword
int
symbol
>
identifier
ppi
symbol
;
identifier
NewLine
identifier
typedef
identifier
pair
symbol
<
identifier
pii
symbol
,
identifier
pii
symbol
>
identifier
ppp
symbol
;
identifier
NewLine
identifier
typedef
identifier
pair
symbol
<
identifier
double
symbol
,
keyword
int
symbol
>
identifier
pdi
symbol
;
identifier
NewLine
identifier
typedef
identifier
pair
symbol
<
keyword
int
symbol
,
identifier
double
symbol
>
identifier
pid
symbol
;
identifier
NewLine
identifier
typedef
identifier
pair
symbol
<
identifier
double
symbol
,
identifier
pii
symbol
>
identifier
pdp
symbol
;
identifier
NewLine
identifier
typedef
identifier
pair
symbol
<
identifier
double
symbol
,
identifier
double
symbol
>
identifier
pdd
symbol
;
identifier
NewLine
identifier
typedef
identifier
pair
symbol
<
identifier
pdd
symbol
,
identifier
double
symbol
>
identifier
pd3
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
keyword
int
symbol
>
identifier
vec
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
identifier
vec
symbol
>
identifier
mat
symbol
;
identifier
NewLine
identifier
define
identifier
rep
symbol
(
identifier
i
symbol
,
identifier
n
symbol
)
identifier
for
symbol
(
keyword
int
symbol
(
identifier
i
symbol
)
symbol
=
integerConstant
0
symbol
;
symbol
(
identifier
i
symbol
)
symbol
<
symbol
(
identifier
n
symbol
)
symbol
;
symbol
(
identifier
i
symbol
)
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
define
identifier
repn
symbol
(
identifier
i
symbol
,
identifier
a
symbol
,
identifier
n
symbol
)
identifier
for
symbol
(
keyword
int
symbol
(
identifier
i
symbol
)
symbol
=
symbol
(
identifier
a
symbol
)
symbol
;
symbol
(
identifier
i
symbol
)
symbol
<
symbol
(
identifier
n
symbol
)
symbol
;
symbol
(
identifier
i
symbol
)
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
define
identifier
ALL
symbol
(
identifier
x
symbol
)
symbol
(
identifier
x
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
,
symbol
(
identifier
x
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
identifier
NewLine
identifier
define
identifier
pb
identifier
push
identifier
back
identifier
NewLine
identifier
define
identifier
SORT
symbol
(
identifier
x
symbol
)
identifier
sort
symbol
(
symbol
(
identifier
x
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
,
symbol
(
identifier
x
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
SORTN
symbol
(
identifier
x
symbol
,
identifier
n
symbol
)
identifier
sort
symbol
(
symbol
(
identifier
x
symbol
)
symbol
,
symbol
(
identifier
x
symbol
)
symbol
+
symbol
(
identifier
n
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
ERASE
symbol
(
identifier
x
symbol
)
symbol
(
identifier
x
symbol
)
symbol
.
identifier
erase
symbol
(
identifier
unique
symbol
(
symbol
(
identifier
x
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
,
symbol
(
identifier
x
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
symbol
)
symbol
,
symbol
(
identifier
x
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
COUNT
symbol
(
identifier
x
symbol
,
identifier
c
symbol
)
identifier
count
symbol
(
symbol
(
identifier
x
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
,
symbol
(
identifier
x
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
symbol
,
symbol
(
identifier
c
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
REMOVE
symbol
(
identifier
x
symbol
,
identifier
c
symbol
)
symbol
(
identifier
x
symbol
)
symbol
.
identifier
erase
symbol
(
identifier
remove
symbol
(
symbol
(
identifier
x
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
,
symbol
(
identifier
x
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
symbol
,
symbol
(
identifier
c
symbol
)
symbol
)
symbol
,
symbol
(
identifier
x
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
REVERSE
symbol
(
identifier
x
symbol
)
identifier
reverse
symbol
(
symbol
(
identifier
x
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
,
symbol
(
identifier
x
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
FORIT
symbol
(
identifier
it
symbol
,
identifier
v
symbol
)
identifier
for
symbol
(
identifier
typeof
symbol
(
symbol
(
identifier
v
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
)
identifier
it
symbol
=
symbol
(
identifier
v
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
;
identifier
it
symbol
=
symbol
(
identifier
v
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
symbol
;
identifier
it
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
define
identifier
LB
symbol
(
identifier
x
symbol
,
identifier
a
symbol
)
identifier
lower
identifier
bound
symbol
(
symbol
(
identifier
x
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
,
symbol
(
identifier
x
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
symbol
,
symbol
(
identifier
a
symbol
)
symbol
)
symbol
-
symbol
(
identifier
x
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
identifier
NewLine
identifier
define
identifier
lb
symbol
(
identifier
x
symbol
,
identifier
a
symbol
)
identifier
lower
identifier
bound
symbol
(
symbol
(
identifier
x
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
,
symbol
(
identifier
x
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
symbol
,
symbol
(
identifier
a
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
LBN
symbol
(
identifier
x
symbol
,
identifier
a
symbol
,
identifier
n
symbol
)
identifier
lower
identifier
bound
symbol
(
symbol
(
identifier
x
symbol
)
symbol
,
symbol
(
identifier
x
symbol
)
symbol
+
symbol
(
identifier
n
symbol
)
symbol
,
symbol
(
identifier
a
symbol
)
symbol
)
symbol
-
symbol
(
identifier
x
symbol
)
identifier
NewLine
identifier
define
identifier
lbN
symbol
(
identifier
x
symbol
,
identifier
a
symbol
,
identifier
n
symbol
)
identifier
lower
identifier
bound
symbol
(
symbol
(
identifier
x
symbol
)
symbol
,
symbol
(
identifier
x
symbol
)
symbol
+
symbol
(
identifier
n
symbol
)
symbol
,
symbol
(
identifier
a
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
UB
symbol
(
identifier
x
symbol
,
identifier
a
symbol
)
identifier
upper
identifier
bound
symbol
(
symbol
(
identifier
x
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
,
symbol
(
identifier
x
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
symbol
,
symbol
(
identifier
a
symbol
)
symbol
)
symbol
-
symbol
(
identifier
x
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
identifier
NewLine
identifier
define
identifier
ub
symbol
(
identifier
x
symbol
,
identifier
a
symbol
)
identifier
upper
identifier
bound
symbol
(
symbol
(
identifier
x
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
,
symbol
(
identifier
x
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
symbol
,
symbol
(
identifier
a
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
BS
symbol
(
identifier
x
symbol
,
identifier
a
symbol
)
identifier
binary
identifier
search
symbol
(
symbol
(
identifier
x
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
,
symbol
(
identifier
x
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
symbol
,
symbol
(
identifier
a
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
BS2
symbol
(
identifier
x
symbol
,
identifier
n
symbol
,
identifier
a
symbol
)
identifier
binary
identifier
search
symbol
(
symbol
(
identifier
x
symbol
)
symbol
,
symbol
(
identifier
x
symbol
)
symbol
+
symbol
(
identifier
n
symbol
)
symbol
,
symbol
(
identifier
a
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
NB
symbol
(
identifier
x
symbol
)
symbol
(
symbol
(
symbol
(
identifier
x
symbol
)
symbol
&
symbol
~
symbol
(
symbol
(
identifier
x
symbol
)
symbol
+
symbol
(
symbol
(
identifier
x
symbol
)
symbol
&
symbol
-
symbol
(
identifier
x
symbol
)
symbol
)
symbol
)
symbol
)
symbol
/
symbol
(
symbol
(
identifier
x
symbol
)
symbol
&
symbol
-
symbol
(
identifier
x
symbol
)
symbol
)
symbol
>
symbol
>
integerConstant
1
symbol
)
symbol
|
symbol
(
symbol
(
identifier
x
symbol
)
symbol
+
symbol
(
symbol
(
identifier
x
symbol
)
symbol
&
symbol
-
symbol
(
identifier
x
symbol
)
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
NP
symbol
(
identifier
x
symbol
)
identifier
next
identifier
permutation
symbol
(
symbol
(
identifier
x
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
,
symbol
(
identifier
x
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
MM
symbol
(
identifier
x
symbol
,
identifier
p
symbol
)
identifier
memset
symbol
(
symbol
(
identifier
x
symbol
)
symbol
,
symbol
(
identifier
p
symbol
)
symbol
,
identifier
sizeof
symbol
(
identifier
x
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
SQ
symbol
(
identifier
x
symbol
)
symbol
(
identifier
x
symbol
)
symbol
*
symbol
(
identifier
x
symbol
)
identifier
NewLine
identifier
define
identifier
SC
symbol
(
identifier
c1
symbol
,
identifier
c2
symbol
)
identifier
strcmp
symbol
(
identifier
c1
symbol
,
identifier
c2
symbol
)
symbol
=
symbol
=
integerConstant
0
identifier
NewLine
identifier
define
identifier
mp
identifier
make
identifier
pair
identifier
NewLine
identifier
define
identifier
INF
symbol
(
integerConstant
1
symbol
<
symbol
<
integerConstant
29
symbol
)
identifier
NewLine
identifier
define
identifier
INFL
symbol
(
integerConstant
1
identifier
LL
symbol
<
symbol
<
integerConstant
61
symbol
)
identifier
NewLine
identifier
define
identifier
fi
identifier
first
identifier
NewLine
identifier
define
identifier
se
identifier
second
identifier
NewLine
identifier
define
identifier
MOD
integerConstant
1000000009
identifier
NewLine
identifier
define
identifier
EPS
integerConstant
1
identifier
e
symbol
-
integerConstant
9
identifier
NewLine
identifier
define
identifier
MIN
symbol
(
identifier
x
symbol
,
identifier
a
symbol
)
identifier
x
symbol
=
identifier
min
symbol
(
identifier
x
symbol
,
identifier
a
symbol
)
identifier
NewLine
identifier
define
identifier
MAX
symbol
(
identifier
x
symbol
,
identifier
a
symbol
)
identifier
x
symbol
=
identifier
max
symbol
(
identifier
x
symbol
,
identifier
a
symbol
)
identifier
NewLine
identifier
define
identifier
madd
symbol
(
identifier
x
symbol
,
identifier
a
symbol
)
identifier
x
symbol
=
symbol
(
identifier
x
symbol
+
identifier
a
symbol
)
identifier
MOD
identifier
NewLine
identifier
define
identifier
msub
symbol
(
identifier
x
symbol
,
identifier
a
symbol
)
identifier
x
symbol
=
symbol
(
identifier
x
symbol
+
identifier
MOD
symbol
-
identifier
a
symbol
)
identifier
MOD
identifier
NewLine
identifier
define
identifier
OUTPUT
symbol
(
identifier
x
symbol
)
identifier
rep
symbol
(
identifier
i
symbol
,
identifier
x
symbol
.
identifier
size
symbol
(
symbol
)
symbol
)
identifier
printf
symbol
(
stringConstant
%d%c
symbol
,
identifier
x
symbol
[
identifier
i
symbol
]
symbol
,
identifier
i
symbol
+
integerConstant
1
symbol
=
symbol
=
identifier
x
symbol
.
identifier
size
symbol
(
symbol
)
identifier
n
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
T
symbol
,
identifier
N
symbol
;
identifier
NewLine
keyword
int
identifier
P
symbol
[
integerConstant
1000
symbol
]
symbol
;
identifier
NewLine
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
T
symbol
)
symbol
;
identifier
NewLine
identifier
repn
symbol
(
symbol
,
integerConstant
1
symbol
,
identifier
T
symbol
+
integerConstant
1
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
int
identifier
ans
symbol
=
identifier
INF
symbol
;
identifier
NewLine
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
N
symbol
)
symbol
;
identifier
NewLine
identifier
rep
symbol
(
identifier
i
symbol
,
identifier
N
symbol
)
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
P
symbol
[
identifier
i
symbol
]
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
identifier
repn
symbol
(
identifier
i
symbol
,
integerConstant
1
symbol
,
integerConstant
1001
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
int
identifier
rr
symbol
=
identifier
i
symbol
;
identifier
NewLine
identifier
rep
symbol
(
identifier
j
symbol
,
identifier
N
symbol
)
identifier
rr
symbol
+
symbol
=
symbol
(
identifier
P
symbol
[
identifier
j
symbol
]
symbol
+
identifier
i
symbol
-
integerConstant
1
symbol
)
symbol
/
identifier
i
symbol
-
integerConstant
1
symbol
;
identifier
NewLine
identifier
NewLine
identifier
MIN
symbol
(
identifier
ans
symbol
,
identifier
rr
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: %d\n
symbol
,
symbol
,
identifier
ans
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
symbol
}
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/namonakiacc.2.cpp file...

identifier
include
symbol
<
identifier
cstdio
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
vector
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstring
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
functional
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
algorithm
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
math
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
bitset
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
set
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
queue
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
assert
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
iostream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
string
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
sstream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
stack
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
complex
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
numeric
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
map
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
time
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
typedef
identifier
long
identifier
double
identifier
ld
symbol
;
identifier
NewLine
identifier
typedef
identifier
long
identifier
long
identifier
ll
symbol
;
identifier
NewLine
identifier
typedef
identifier
unsigned
identifier
long
identifier
long
identifier
ull
symbol
;
identifier
NewLine
identifier
typedef
identifier
unsigned
keyword
int
identifier
uint
symbol
;
identifier
NewLine
identifier
typedef
identifier
pair
symbol
<
keyword
int
symbol
,
keyword
int
symbol
>
identifier
pii
symbol
;
identifier
NewLine
identifier
typedef
identifier
pair
symbol
<
keyword
int
symbol
,
identifier
ll
symbol
>
identifier
pil
symbol
;
identifier
NewLine
identifier
typedef
identifier
pair
symbol
<
keyword
int
symbol
,
identifier
ull
symbol
>
identifier
piu
symbol
;
identifier
NewLine
identifier
typedef
identifier
pair
symbol
<
identifier
ll
symbol
,
keyword
int
symbol
>
identifier
pli
symbol
;
identifier
NewLine
identifier
typedef
identifier
pair
symbol
<
identifier
ll
symbol
,
identifier
ll
symbol
>
identifier
pll
symbol
;
identifier
NewLine
identifier
typedef
identifier
pair
symbol
<
identifier
pii
symbol
,
identifier
ll
symbol
>
identifier
ppl
symbol
;
identifier
NewLine
identifier
typedef
identifier
pair
symbol
<
identifier
ll
symbol
,
identifier
pii
symbol
>
identifier
plp
symbol
;
identifier
NewLine
identifier
typedef
identifier
pair
symbol
<
keyword
int
symbol
,
identifier
pii
symbol
>
identifier
pip
symbol
;
identifier
NewLine
identifier
typedef
identifier
pair
symbol
<
identifier
pii
symbol
,
keyword
int
symbol
>
identifier
ppi
symbol
;
identifier
NewLine
identifier
typedef
identifier
pair
symbol
<
identifier
pii
symbol
,
identifier
pii
symbol
>
identifier
ppp
symbol
;
identifier
NewLine
identifier
typedef
identifier
pair
symbol
<
identifier
double
symbol
,
keyword
int
symbol
>
identifier
pdi
symbol
;
identifier
NewLine
identifier
typedef
identifier
pair
symbol
<
keyword
int
symbol
,
identifier
double
symbol
>
identifier
pid
symbol
;
identifier
NewLine
identifier
typedef
identifier
pair
symbol
<
identifier
double
symbol
,
identifier
pii
symbol
>
identifier
pdp
symbol
;
identifier
NewLine
identifier
typedef
identifier
pair
symbol
<
identifier
double
symbol
,
identifier
double
symbol
>
identifier
pdd
symbol
;
identifier
NewLine
identifier
typedef
identifier
pair
symbol
<
identifier
pdd
symbol
,
identifier
double
symbol
>
identifier
pd3
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
keyword
int
symbol
>
identifier
vec
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
identifier
vec
symbol
>
identifier
mat
symbol
;
identifier
NewLine
identifier
define
identifier
rep
symbol
(
identifier
i
symbol
,
identifier
n
symbol
)
identifier
for
symbol
(
keyword
int
symbol
(
identifier
i
symbol
)
symbol
=
integerConstant
0
symbol
;
symbol
(
identifier
i
symbol
)
symbol
<
symbol
(
identifier
n
symbol
)
symbol
;
symbol
(
identifier
i
symbol
)
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
define
identifier
repn
symbol
(
identifier
i
symbol
,
identifier
a
symbol
,
identifier
n
symbol
)
identifier
for
symbol
(
keyword
int
symbol
(
identifier
i
symbol
)
symbol
=
symbol
(
identifier
a
symbol
)
symbol
;
symbol
(
identifier
i
symbol
)
symbol
<
symbol
(
identifier
n
symbol
)
symbol
;
symbol
(
identifier
i
symbol
)
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
define
identifier
ALL
symbol
(
identifier
x
symbol
)
symbol
(
identifier
x
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
,
symbol
(
identifier
x
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
identifier
NewLine
identifier
define
identifier
pb
identifier
push
identifier
back
identifier
NewLine
identifier
define
identifier
SORT
symbol
(
identifier
x
symbol
)
identifier
sort
symbol
(
symbol
(
identifier
x
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
,
symbol
(
identifier
x
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
SORTN
symbol
(
identifier
x
symbol
,
identifier
n
symbol
)
identifier
sort
symbol
(
symbol
(
identifier
x
symbol
)
symbol
,
symbol
(
identifier
x
symbol
)
symbol
+
symbol
(
identifier
n
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
ERASE
symbol
(
identifier
x
symbol
)
symbol
(
identifier
x
symbol
)
symbol
.
identifier
erase
symbol
(
identifier
unique
symbol
(
symbol
(
identifier
x
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
,
symbol
(
identifier
x
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
symbol
)
symbol
,
symbol
(
identifier
x
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
COUNT
symbol
(
identifier
x
symbol
,
identifier
c
symbol
)
identifier
count
symbol
(
symbol
(
identifier
x
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
,
symbol
(
identifier
x
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
symbol
,
symbol
(
identifier
c
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
REMOVE
symbol
(
identifier
x
symbol
,
identifier
c
symbol
)
symbol
(
identifier
x
symbol
)
symbol
.
identifier
erase
symbol
(
identifier
remove
symbol
(
symbol
(
identifier
x
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
,
symbol
(
identifier
x
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
symbol
,
symbol
(
identifier
c
symbol
)
symbol
)
symbol
,
symbol
(
identifier
x
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
REVERSE
symbol
(
identifier
x
symbol
)
identifier
reverse
symbol
(
symbol
(
identifier
x
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
,
symbol
(
identifier
x
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
FORIT
symbol
(
identifier
it
symbol
,
identifier
v
symbol
)
identifier
for
symbol
(
identifier
typeof
symbol
(
symbol
(
identifier
v
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
)
identifier
it
symbol
=
symbol
(
identifier
v
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
;
identifier
it
symbol
=
symbol
(
identifier
v
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
symbol
;
identifier
it
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
define
identifier
LB
symbol
(
identifier
x
symbol
,
identifier
a
symbol
)
identifier
lower
identifier
bound
symbol
(
symbol
(
identifier
x
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
,
symbol
(
identifier
x
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
symbol
,
symbol
(
identifier
a
symbol
)
symbol
)
symbol
-
symbol
(
identifier
x
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
identifier
NewLine
identifier
define
identifier
lb
symbol
(
identifier
x
symbol
,
identifier
a
symbol
)
identifier
lower
identifier
bound
symbol
(
symbol
(
identifier
x
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
,
symbol
(
identifier
x
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
symbol
,
symbol
(
identifier
a
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
LBN
symbol
(
identifier
x
symbol
,
identifier
a
symbol
,
identifier
n
symbol
)
identifier
lower
identifier
bound
symbol
(
symbol
(
identifier
x
symbol
)
symbol
,
symbol
(
identifier
x
symbol
)
symbol
+
symbol
(
identifier
n
symbol
)
symbol
,
symbol
(
identifier
a
symbol
)
symbol
)
symbol
-
symbol
(
identifier
x
symbol
)
identifier
NewLine
identifier
define
identifier
lbN
symbol
(
identifier
x
symbol
,
identifier
a
symbol
,
identifier
n
symbol
)
identifier
lower
identifier
bound
symbol
(
symbol
(
identifier
x
symbol
)
symbol
,
symbol
(
identifier
x
symbol
)
symbol
+
symbol
(
identifier
n
symbol
)
symbol
,
symbol
(
identifier
a
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
UB
symbol
(
identifier
x
symbol
,
identifier
a
symbol
)
identifier
upper
identifier
bound
symbol
(
symbol
(
identifier
x
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
,
symbol
(
identifier
x
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
symbol
,
symbol
(
identifier
a
symbol
)
symbol
)
symbol
-
symbol
(
identifier
x
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
identifier
NewLine
identifier
define
identifier
ub
symbol
(
identifier
x
symbol
,
identifier
a
symbol
)
identifier
upper
identifier
bound
symbol
(
symbol
(
identifier
x
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
,
symbol
(
identifier
x
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
symbol
,
symbol
(
identifier
a
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
BS
symbol
(
identifier
x
symbol
,
identifier
a
symbol
)
identifier
binary
identifier
search
symbol
(
symbol
(
identifier
x
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
,
symbol
(
identifier
x
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
symbol
,
symbol
(
identifier
a
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
BS2
symbol
(
identifier
x
symbol
,
identifier
n
symbol
,
identifier
a
symbol
)
identifier
binary
identifier
search
symbol
(
symbol
(
identifier
x
symbol
)
symbol
,
symbol
(
identifier
x
symbol
)
symbol
+
symbol
(
identifier
n
symbol
)
symbol
,
symbol
(
identifier
a
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
NB
symbol
(
identifier
x
symbol
)
symbol
(
symbol
(
symbol
(
identifier
x
symbol
)
symbol
&
symbol
~
symbol
(
symbol
(
identifier
x
symbol
)
symbol
+
symbol
(
symbol
(
identifier
x
symbol
)
symbol
&
symbol
-
symbol
(
identifier
x
symbol
)
symbol
)
symbol
)
symbol
)
symbol
/
symbol
(
symbol
(
identifier
x
symbol
)
symbol
&
symbol
-
symbol
(
identifier
x
symbol
)
symbol
)
symbol
>
symbol
>
integerConstant
1
symbol
)
symbol
|
symbol
(
symbol
(
identifier
x
symbol
)
symbol
+
symbol
(
symbol
(
identifier
x
symbol
)
symbol
&
symbol
-
symbol
(
identifier
x
symbol
)
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
NP
symbol
(
identifier
x
symbol
)
identifier
next
identifier
permutation
symbol
(
symbol
(
identifier
x
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
,
symbol
(
identifier
x
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
MM
symbol
(
identifier
x
symbol
,
identifier
p
symbol
)
identifier
memset
symbol
(
symbol
(
identifier
x
symbol
)
symbol
,
symbol
(
identifier
p
symbol
)
symbol
,
identifier
sizeof
symbol
(
identifier
x
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
SQ
symbol
(
identifier
x
symbol
)
symbol
(
identifier
x
symbol
)
symbol
*
symbol
(
identifier
x
symbol
)
identifier
NewLine
identifier
define
identifier
SC
symbol
(
identifier
c1
symbol
,
identifier
c2
symbol
)
identifier
strcmp
symbol
(
identifier
c1
symbol
,
identifier
c2
symbol
)
symbol
=
symbol
=
integerConstant
0
identifier
NewLine
identifier
define
identifier
mp
identifier
make
identifier
pair
identifier
NewLine
identifier
define
identifier
INF
symbol
(
integerConstant
1
symbol
<
symbol
<
integerConstant
29
symbol
)
identifier
NewLine
identifier
define
identifier
INFL
symbol
(
integerConstant
1
identifier
LL
symbol
<
symbol
<
integerConstant
61
symbol
)
identifier
NewLine
identifier
define
identifier
fi
identifier
first
identifier
NewLine
identifier
define
identifier
se
identifier
second
identifier
NewLine
identifier
define
identifier
MOD
integerConstant
1000000009
identifier
NewLine
identifier
define
identifier
EPS
integerConstant
1
identifier
e
symbol
-
integerConstant
9
identifier
NewLine
identifier
define
identifier
MIN
symbol
(
identifier
x
symbol
,
identifier
a
symbol
)
identifier
x
symbol
=
identifier
min
symbol
(
identifier
x
symbol
,
identifier
a
symbol
)
identifier
NewLine
identifier
define
identifier
MAX
symbol
(
identifier
x
symbol
,
identifier
a
symbol
)
identifier
x
symbol
=
identifier
max
symbol
(
identifier
x
symbol
,
identifier
a
symbol
)
identifier
NewLine
identifier
define
identifier
madd
symbol
(
identifier
x
symbol
,
identifier
a
symbol
)
identifier
x
symbol
=
symbol
(
identifier
x
symbol
+
identifier
a
symbol
)
identifier
MOD
identifier
NewLine
identifier
define
identifier
msub
symbol
(
identifier
x
symbol
,
identifier
a
symbol
)
identifier
x
symbol
=
symbol
(
identifier
x
symbol
+
identifier
MOD
symbol
-
identifier
a
symbol
)
identifier
MOD
identifier
NewLine
identifier
define
identifier
OUTPUT
symbol
(
identifier
x
symbol
)
identifier
rep
symbol
(
identifier
i
symbol
,
identifier
x
symbol
.
identifier
size
symbol
(
symbol
)
symbol
)
identifier
printf
symbol
(
stringConstant
%d%c
symbol
,
identifier
x
symbol
[
identifier
i
symbol
]
symbol
,
identifier
i
symbol
+
integerConstant
1
symbol
=
symbol
=
identifier
x
symbol
.
identifier
size
symbol
(
symbol
)
identifier
n
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
T
symbol
,
identifier
n
symbol
,
identifier
K
symbol
;
identifier
NewLine
identifier
ll
identifier
K
identifier
in
symbol
;
identifier
NewLine
keyword
char
identifier
s
symbol
[
integerConstant
10001
symbol
]
symbol
;
identifier
NewLine
keyword
int
identifier
id
symbol
[
integerConstant
10001
symbol
]
symbol
;
identifier
NewLine
keyword
int
identifier
dp
symbol
[
integerConstant
641001
symbol
]
symbol
[
integerConstant
3
symbol
]
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
kk
symbol
[
integerConstant
8
symbol
]
symbol
[
integerConstant
8
symbol
]
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
kk
symbol
[
integerConstant
0
symbol
]
symbol
[
integerConstant
0
symbol
]
symbol
=
integerConstant
0
symbol
,
identifier
kk
symbol
[
integerConstant
0
symbol
]
symbol
[
integerConstant
1
symbol
]
symbol
=
integerConstant
1
symbol
,
identifier
kk
symbol
[
integerConstant
0
symbol
]
symbol
[
integerConstant
2
symbol
]
symbol
=
integerConstant
2
symbol
,
identifier
kk
symbol
[
integerConstant
0
symbol
]
symbol
[
integerConstant
3
symbol
]
symbol
=
integerConstant
3
symbol
;
identifier
NewLine
identifier
kk
symbol
[
integerConstant
1
symbol
]
symbol
[
integerConstant
0
symbol
]
symbol
=
integerConstant
1
symbol
,
identifier
kk
symbol
[
integerConstant
1
symbol
]
symbol
[
integerConstant
1
symbol
]
symbol
=
integerConstant
4
symbol
,
identifier
kk
symbol
[
integerConstant
1
symbol
]
symbol
[
integerConstant
2
symbol
]
symbol
=
integerConstant
3
symbol
,
identifier
kk
symbol
[
integerConstant
1
symbol
]
symbol
[
integerConstant
3
symbol
]
symbol
=
integerConstant
6
symbol
;
identifier
NewLine
identifier
kk
symbol
[
integerConstant
2
symbol
]
symbol
[
integerConstant
0
symbol
]
symbol
=
integerConstant
2
symbol
,
identifier
kk
symbol
[
integerConstant
2
symbol
]
symbol
[
integerConstant
1
symbol
]
symbol
=
integerConstant
7
symbol
,
identifier
kk
symbol
[
integerConstant
2
symbol
]
symbol
[
integerConstant
2
symbol
]
symbol
=
integerConstant
4
symbol
,
identifier
kk
symbol
[
integerConstant
2
symbol
]
symbol
[
integerConstant
3
symbol
]
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
identifier
kk
symbol
[
integerConstant
3
symbol
]
symbol
[
integerConstant
0
symbol
]
symbol
=
integerConstant
3
symbol
,
identifier
kk
symbol
[
integerConstant
3
symbol
]
symbol
[
integerConstant
1
symbol
]
symbol
=
integerConstant
2
symbol
,
identifier
kk
symbol
[
integerConstant
3
symbol
]
symbol
[
integerConstant
2
symbol
]
symbol
=
integerConstant
5
symbol
,
identifier
kk
symbol
[
integerConstant
3
symbol
]
symbol
[
integerConstant
3
symbol
]
symbol
=
integerConstant
4
symbol
;
identifier
NewLine
identifier
rep
symbol
(
identifier
i
symbol
,
integerConstant
8
symbol
)
identifier
rep
symbol
(
identifier
j
symbol
,
integerConstant
8
symbol
)
keyword
if
symbol
(
identifier
i
symbol
>
symbol
=
integerConstant
4
symbol
|
symbol
|
identifier
j
symbol
>
symbol
=
integerConstant
4
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
i
symbol
<
integerConstant
4
symbol
)
identifier
kk
symbol
[
identifier
i
symbol
]
symbol
[
identifier
j
symbol
]
symbol
=
identifier
kk
symbol
[
identifier
i
symbol
]
symbol
[
identifier
j
symbol
-
integerConstant
4
symbol
]
integerConstant
4
symbol
;
identifier
NewLine
keyword
else
keyword
if
symbol
(
identifier
j
symbol
<
integerConstant
4
symbol
)
identifier
kk
symbol
[
identifier
i
symbol
]
symbol
[
identifier
j
symbol
]
symbol
=
identifier
kk
symbol
[
identifier
i
symbol
-
integerConstant
4
symbol
]
symbol
[
identifier
j
symbol
]
integerConstant
4
symbol
;
identifier
NewLine
keyword
else
identifier
kk
symbol
[
identifier
i
symbol
]
symbol
[
identifier
j
symbol
]
symbol
=
identifier
kk
symbol
[
identifier
i
symbol
-
integerConstant
4
symbol
]
symbol
[
identifier
j
symbol
-
integerConstant
4
symbol
]
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
T
symbol
)
symbol
;
identifier
NewLine
identifier
repn
symbol
(
symbol
,
integerConstant
1
symbol
,
identifier
T
symbol
+
integerConstant
1
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d%lld
symbol
,
symbol
&
identifier
n
symbol
,
symbol
&
identifier
K
identifier
in
symbol
)
symbol
;
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%s
symbol
,
symbol
&
identifier
s
symbol
)
symbol
;
identifier
NewLine
identifier
rep
symbol
(
identifier
i
symbol
,
identifier
n
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
s
symbol
[
identifier
i
symbol
]
symbol
=
symbol
=
integerConstant
1
symbol
)
identifier
id
symbol
[
identifier
i
symbol
]
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
s
symbol
[
identifier
i
symbol
]
symbol
=
symbol
=
identifier
i
symbol
)
identifier
id
symbol
[
identifier
i
symbol
]
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
s
symbol
[
identifier
i
symbol
]
symbol
=
symbol
=
identifier
j
symbol
)
identifier
id
symbol
[
identifier
i
symbol
]
symbol
=
integerConstant
2
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
s
symbol
[
identifier
i
symbol
]
symbol
=
symbol
=
identifier
k
symbol
)
identifier
id
symbol
[
identifier
i
symbol
]
symbol
=
integerConstant
3
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
bool
identifier
ans
symbol
=
keyword
false
symbol
;
identifier
NewLine
identifier
NewLine
keyword
if
symbol
(
identifier
K
identifier
in
symbol
>
symbol
=
integerConstant
32
symbol
)
identifier
K
symbol
=
identifier
K
identifier
in
integerConstant
32
symbol
+
integerConstant
32
symbol
;
identifier
NewLine
keyword
else
identifier
K
symbol
=
identifier
K
identifier
in
symbol
;
identifier
NewLine
identifier
MM
symbol
(
identifier
dp
symbol
,
integerConstant
0
symbol
)
symbol
;
identifier
NewLine
identifier
dp
symbol
[
integerConstant
0
symbol
]
symbol
[
integerConstant
0
symbol
]
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
identifier
rep
symbol
(
identifier
i
symbol
,
identifier
n
symbol
*
identifier
K
symbol
)
identifier
rep
symbol
(
identifier
ver
symbol
,
integerConstant
3
symbol
)
identifier
rep
symbol
(
identifier
b
symbol
,
integerConstant
8
symbol
)
keyword
if
symbol
(
identifier
dp
symbol
[
identifier
i
symbol
]
symbol
[
identifier
ver
symbol
]
symbol
>
symbol
>
identifier
b
symbol
&
integerConstant
1
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
int
identifier
now
symbol
=
identifier
kk
symbol
[
identifier
b
symbol
]
symbol
[
identifier
id
symbol
[
identifier
i
identifier
n
symbol
]
symbol
]
symbol
;
identifier
NewLine
identifier
dp
symbol
[
identifier
i
symbol
+
integerConstant
1
symbol
]
symbol
[
identifier
ver
symbol
]
symbol
|
symbol
=
symbol
(
integerConstant
1
symbol
<
symbol
<
identifier
now
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
ver
symbol
=
symbol
=
integerConstant
0
symbol
&
symbol
&
identifier
now
symbol
=
symbol
=
integerConstant
1
symbol
)
identifier
dp
symbol
[
identifier
i
symbol
+
integerConstant
1
symbol
]
symbol
[
integerConstant
1
symbol
]
symbol
|
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
ver
symbol
=
symbol
=
integerConstant
1
symbol
&
symbol
&
identifier
now
symbol
=
symbol
=
integerConstant
2
symbol
)
identifier
dp
symbol
[
identifier
i
symbol
+
integerConstant
1
symbol
]
symbol
[
integerConstant
2
symbol
]
symbol
|
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
ver
symbol
=
symbol
=
integerConstant
2
symbol
&
symbol
&
identifier
now
symbol
=
symbol
=
integerConstant
3
symbol
&
symbol
&
identifier
i
symbol
+
integerConstant
1
symbol
=
symbol
=
identifier
n
symbol
*
identifier
K
symbol
)
identifier
ans
symbol
=
keyword
true
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: %s\n
symbol
,
symbol
,
identifier
ans
stringConstant
YES
stringConstant
NO
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
symbol
}
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/Nicolas16.0.cpp file...

identifier
include
symbol
<
identifier
cstdio
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstdlib
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cmath
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
iostream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
vector
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
string
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
algorithm
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
map
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
set
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
queue
symbol
>
identifier
NewLine
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
int
identifier
T
symbol
;
identifier
NewLine
keyword
int
identifier
combien
symbol
[
integerConstant
1005
symbol
]
symbol
;
identifier
NewLine
keyword
int
identifier
SMax
symbol
;
identifier
NewLine
keyword
int
identifier
total
symbol
,
identifier
encours
symbol
;
identifier
NewLine
keyword
char
identifier
c
symbol
;
identifier
NewLine
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d\n
symbol
,
symbol
&
identifier
T
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
t
symbol
=
integerConstant
1
symbol
;
identifier
t
symbol
<
symbol
=
identifier
T
symbol
;
identifier
t
symbol
+
symbol
+
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
fprintf
symbol
(
identifier
stderr
symbol
,
stringConstant
Cas %d\n
symbol
,
identifier
t
symbol
)
symbol
;
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: 
symbol
,
identifier
t
symbol
)
symbol
;
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d 
symbol
,
symbol
&
identifier
SMax
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
symbol
=
identifier
SMax
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%c
symbol
,
symbol
&
identifier
c
symbol
)
symbol
;
identifier
NewLine
identifier
combien
symbol
[
identifier
i
symbol
]
symbol
=
identifier
c
symbol
-
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
\n
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
encours
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
keyword
int
identifier
ajoute
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
symbol
=
identifier
SMax
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
encours
symbol
+
symbol
=
identifier
combien
symbol
[
identifier
i
symbol
]
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
encours
symbol
<
identifier
i
symbol
+
integerConstant
1
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
ajoute
symbol
+
symbol
=
identifier
i
symbol
+
integerConstant
1
symbol
-
identifier
encours
symbol
;
identifier
NewLine
identifier
encours
symbol
=
identifier
i
symbol
+
integerConstant
1
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
printf
symbol
(
stringConstant
%d\n
symbol
,
identifier
ajoute
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/Nicolas16.1.cpp file...

identifier
include
symbol
<
identifier
cstdio
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstdlib
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cmath
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
iostream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
vector
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
string
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
algorithm
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
map
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
set
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
queue
symbol
>
identifier
NewLine
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
int
identifier
T
symbol
;
identifier
NewLine
keyword
int
identifier
D
symbol
;
identifier
NewLine
keyword
int
identifier
possible
symbol
,
identifier
best
symbol
;
identifier
NewLine
keyword
int
identifier
P
symbol
[
integerConstant
1005
symbol
]
symbol
;
identifier
NewLine
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d\n
symbol
,
symbol
&
identifier
T
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
t
symbol
=
integerConstant
1
symbol
;
identifier
t
symbol
<
symbol
=
identifier
T
symbol
;
identifier
t
symbol
+
symbol
+
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
fprintf
symbol
(
identifier
stderr
symbol
,
stringConstant
Cas %d\n
symbol
,
identifier
t
symbol
)
symbol
;
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: 
symbol
,
identifier
t
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
D
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
D
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
P
symbol
[
identifier
i
symbol
]
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
best
symbol
=
integerConstant
10000
symbol
;
identifier
NewLine
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
x
symbol
=
integerConstant
1005
symbol
;
identifier
x
symbol
>
symbol
=
integerConstant
1
symbol
;
identifier
x
symbol
-
symbol
-
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
int
identifier
moves
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
D
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
P
symbol
[
identifier
i
symbol
]
identifier
x
symbol
=
symbol
=
integerConstant
0
symbol
)
identifier
moves
symbol
+
symbol
=
identifier
P
symbol
[
identifier
i
symbol
]
symbol
/
identifier
x
symbol
-
integerConstant
1
symbol
;
identifier
NewLine
keyword
else
identifier
NewLine
symbol
{
identifier
NewLine
identifier
moves
symbol
+
symbol
=
identifier
P
symbol
[
identifier
i
symbol
]
symbol
/
identifier
x
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
possible
symbol
=
identifier
moves
symbol
+
identifier
x
symbol
;
identifier
NewLine
identifier
best
symbol
=
identifier
min
symbol
(
identifier
best
symbol
,
identifier
possible
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
printf
symbol
(
stringConstant
%d\n
symbol
,
identifier
best
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/Nicolas16.2.cpp file...

identifier
include
symbol
<
identifier
cstdio
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstdlib
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cmath
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
iostream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
vector
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
string
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
algorithm
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
map
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
set
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
queue
symbol
>
identifier
NewLine
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
identifier
NewLine
keyword
int
identifier
fakeproduit
symbol
(
keyword
int
identifier
a
symbol
,
keyword
int
identifier
b
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
a
symbol
=
symbol
=
integerConstant
1
symbol
)
keyword
return
identifier
b
symbol
;
identifier
NewLine
keyword
else
keyword
if
symbol
(
identifier
b
symbol
=
symbol
=
integerConstant
1
symbol
)
keyword
return
identifier
a
symbol
;
identifier
NewLine
keyword
else
keyword
if
symbol
(
identifier
a
symbol
=
symbol
=
identifier
b
symbol
)
keyword
return
symbol
-
integerConstant
1
symbol
;
identifier
NewLine
keyword
else
keyword
if
symbol
(
identifier
a
symbol
=
symbol
=
integerConstant
2
symbol
&
symbol
&
identifier
b
symbol
=
symbol
=
integerConstant
3
symbol
)
keyword
return
integerConstant
4
symbol
;
identifier
NewLine
keyword
else
keyword
if
symbol
(
identifier
a
symbol
=
symbol
=
integerConstant
2
symbol
&
symbol
&
identifier
b
symbol
=
symbol
=
integerConstant
4
symbol
)
keyword
return
symbol
-
integerConstant
3
symbol
;
identifier
NewLine
keyword
else
keyword
if
symbol
(
identifier
a
symbol
=
symbol
=
integerConstant
3
symbol
&
symbol
&
identifier
b
symbol
=
symbol
=
integerConstant
2
symbol
)
keyword
return
symbol
-
integerConstant
4
symbol
;
identifier
NewLine
keyword
else
keyword
if
symbol
(
identifier
a
symbol
=
symbol
=
integerConstant
3
symbol
&
symbol
&
identifier
b
symbol
=
symbol
=
integerConstant
4
symbol
)
keyword
return
integerConstant
2
symbol
;
identifier
NewLine
keyword
else
keyword
if
symbol
(
identifier
a
symbol
=
symbol
=
integerConstant
4
symbol
&
symbol
&
identifier
b
symbol
=
symbol
=
integerConstant
2
symbol
)
keyword
return
integerConstant
3
symbol
;
identifier
NewLine
keyword
else
keyword
if
symbol
(
identifier
a
symbol
=
symbol
=
integerConstant
4
symbol
&
symbol
&
identifier
b
symbol
=
symbol
=
integerConstant
3
symbol
)
keyword
return
symbol
-
integerConstant
2
symbol
;
identifier
NewLine
keyword
else
identifier
fprintf
symbol
(
identifier
stderr
symbol
,
stringConstant
Erreur\n
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
int
identifier
produit
symbol
(
keyword
int
identifier
a
symbol
,
keyword
int
identifier
b
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
bool
identifier
neg
symbol
=
keyword
false
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
a
symbol
<
integerConstant
0
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
neg
symbol
=
identifier
neg
symbol
;
identifier
NewLine
identifier
a
symbol
=
symbol
-
identifier
a
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
b
symbol
<
integerConstant
0
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
neg
symbol
=
identifier
neg
symbol
;
identifier
NewLine
identifier
b
symbol
=
symbol
-
identifier
b
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
int
identifier
res
symbol
=
identifier
fakeproduit
symbol
(
identifier
a
symbol
,
identifier
b
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
neg
symbol
)
keyword
return
symbol
-
identifier
res
symbol
;
identifier
NewLine
keyword
else
keyword
return
identifier
res
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
int
identifier
T
symbol
;
identifier
NewLine
identifier
long
identifier
long
keyword
int
identifier
L
symbol
,
identifier
X
symbol
;
identifier
NewLine
keyword
int
identifier
s
symbol
[
integerConstant
10005
symbol
]
symbol
;
identifier
NewLine
keyword
char
identifier
c
symbol
;
identifier
NewLine
keyword
int
identifier
valued
symbol
[
integerConstant
10005
symbol
]
symbol
;
identifier
NewLine
keyword
int
identifier
valueg
symbol
[
integerConstant
10005
symbol
]
symbol
;
identifier
NewLine
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d\n
symbol
,
symbol
&
identifier
T
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
t
symbol
=
integerConstant
1
symbol
;
identifier
t
symbol
<
symbol
=
identifier
T
symbol
;
identifier
t
symbol
+
symbol
+
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
fprintf
symbol
(
identifier
stderr
symbol
,
stringConstant
Cas %d\n
symbol
,
identifier
t
symbol
)
symbol
;
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: 
symbol
,
identifier
t
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%lld %lld\n
symbol
,
symbol
&
identifier
L
symbol
,
symbol
&
identifier
X
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
L
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%c
symbol
,
symbol
&
identifier
c
symbol
)
symbol
;
identifier
NewLine
identifier
s
symbol
[
identifier
i
symbol
]
symbol
=
identifier
c
symbol
-
identifier
i
symbol
+
integerConstant
2
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
valueg
symbol
[
integerConstant
0
symbol
]
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
1
symbol
;
identifier
i
symbol
<
symbol
=
identifier
L
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
valueg
symbol
[
identifier
i
symbol
]
symbol
=
identifier
produit
symbol
(
identifier
valueg
symbol
[
identifier
i
symbol
-
integerConstant
1
symbol
]
symbol
,
identifier
s
symbol
[
identifier
i
symbol
-
integerConstant
1
symbol
]
symbol
)
symbol
;
symbol
}
identifier
NewLine
identifier
valued
symbol
[
integerConstant
0
symbol
]
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
1
symbol
;
identifier
i
symbol
<
symbol
=
identifier
L
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
valued
symbol
[
identifier
i
symbol
]
symbol
=
identifier
produit
symbol
(
identifier
s
symbol
[
identifier
L
symbol
-
identifier
i
symbol
]
symbol
,
identifier
valued
symbol
[
identifier
i
symbol
-
integerConstant
1
symbol
]
symbol
)
symbol
;
symbol
}
identifier
NewLine
identifier
NewLine
identifier
NewLine
keyword
int
identifier
blocentier
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
identifier
long
identifier
long
keyword
int
identifier
x
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
bool
identifier
trouve
symbol
=
keyword
false
symbol
;
identifier
NewLine
identifier
long
identifier
long
keyword
int
identifier
trouvex
symbol
,
identifier
trouvei
symbol
;
identifier
NewLine
identifier
NewLine
keyword
while
symbol
(
symbol
(
identifier
x
symbol
=
symbol
=
integerConstant
0
symbol
|
symbol
|
identifier
blocentier
symbol
=
integerConstant
1
symbol
)
symbol
&
symbol
&
identifier
trouve
symbol
&
symbol
&
identifier
x
symbol
<
identifier
X
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
1
symbol
;
identifier
i
symbol
<
symbol
=
identifier
L
symbol
&
symbol
&
identifier
trouve
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
produit
symbol
(
identifier
blocentier
symbol
,
identifier
valueg
symbol
[
identifier
i
symbol
]
symbol
)
symbol
=
symbol
=
integerConstant
2
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
trouve
symbol
=
keyword
true
symbol
;
identifier
NewLine
identifier
trouvex
symbol
=
identifier
x
symbol
;
identifier
NewLine
identifier
trouvei
symbol
=
identifier
i
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
blocentier
symbol
=
identifier
produit
symbol
(
identifier
blocentier
symbol
,
identifier
valueg
symbol
[
identifier
L
symbol
]
symbol
)
symbol
;
identifier
NewLine
identifier
x
symbol
=
identifier
x
symbol
+
integerConstant
1
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
blocentier
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
identifier
x
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
bool
identifier
trouve2
symbol
=
keyword
false
symbol
;
identifier
NewLine
identifier
long
identifier
long
keyword
int
identifier
trouvex2
symbol
,
identifier
trouvei2
symbol
;
identifier
NewLine
identifier
NewLine
keyword
while
symbol
(
symbol
(
identifier
x
symbol
=
symbol
=
integerConstant
0
symbol
|
symbol
|
identifier
blocentier
symbol
=
integerConstant
1
symbol
)
symbol
&
symbol
&
identifier
trouve2
symbol
&
symbol
&
identifier
x
symbol
<
identifier
X
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
1
symbol
;
identifier
i
symbol
<
symbol
=
identifier
L
symbol
&
symbol
&
identifier
trouve2
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
produit
symbol
(
identifier
valued
symbol
[
identifier
i
symbol
]
symbol
,
identifier
blocentier
symbol
)
symbol
=
symbol
=
integerConstant
4
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
trouve2
symbol
=
keyword
true
symbol
;
identifier
NewLine
identifier
trouvex2
symbol
=
identifier
x
symbol
;
identifier
NewLine
identifier
trouvei2
symbol
=
identifier
i
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
blocentier
symbol
=
identifier
produit
symbol
(
identifier
valueg
symbol
[
identifier
L
symbol
]
symbol
,
identifier
blocentier
symbol
)
symbol
;
identifier
NewLine
identifier
x
symbol
=
identifier
x
symbol
+
integerConstant
1
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
if
symbol
(
identifier
trouve
symbol
|
symbol
|
identifier
trouve2
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
printf
symbol
(
stringConstant
NO\n
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
else
identifier
NewLine
symbol
{
identifier
NewLine
identifier
long
identifier
long
keyword
int
identifier
total
symbol
=
identifier
L
symbol
*
identifier
trouvex
symbol
+
identifier
trouvei
symbol
+
identifier
L
symbol
*
identifier
trouvex2
symbol
+
identifier
trouvei2
symbol
;
identifier
NewLine
identifier
fprintf
symbol
(
identifier
stderr
symbol
,
stringConstant
Total : %lld - %lld\n
symbol
,
identifier
total
symbol
,
identifier
X
symbol
*
identifier
L
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
total
symbol
>
symbol
(
identifier
long
identifier
long
keyword
int
symbol
)
identifier
X
symbol
*
identifier
L
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
printf
symbol
(
stringConstant
NO\n
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
else
identifier
NewLine
symbol
{
identifier
NewLine
identifier
blocentier
symbol
=
identifier
valueg
symbol
[
identifier
L
symbol
]
symbol
;
identifier
NewLine
identifier
bool
identifier
ok
symbol
=
keyword
false
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
blocentier
symbol
=
symbol
=
integerConstant
1
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
symbol
}
identifier
NewLine
keyword
else
keyword
if
symbol
(
identifier
blocentier
symbol
=
symbol
=
symbol
-
integerConstant
1
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
X
integerConstant
2
symbol
=
symbol
=
integerConstant
1
symbol
)
identifier
ok
symbol
=
keyword
true
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
else
identifier
NewLine
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
X
integerConstant
4
symbol
=
symbol
=
integerConstant
2
symbol
)
identifier
ok
symbol
=
keyword
true
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
ok
symbol
)
identifier
printf
symbol
(
stringConstant
YES\n
symbol
)
symbol
;
identifier
NewLine
keyword
else
identifier
printf
symbol
(
stringConstant
NO\n
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
\n
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/pandamonium.0.cpp file...

identifier
include
symbol
<
identifier
cstdio
symbol
>
identifier
NewLine
keyword
int
identifier
t
symbol
,
identifier
k
symbol
,
identifier
y
symbol
;
identifier
NewLine
keyword
char
identifier
str
symbol
[
integerConstant
1005
symbol
]
symbol
;
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
symbol
{
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d\n
symbol
,
symbol
&
identifier
t
symbol
)
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
y
symbol
=
integerConstant
1
symbol
;
identifier
y
symbol
<
symbol
=
identifier
t
symbol
;
identifier
y
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d %s\n
symbol
,
symbol
&
identifier
k
symbol
,
identifier
str
symbol
)
symbol
;
identifier
NewLine
keyword
int
identifier
cnt
symbol
=
integerConstant
0
symbol
,
identifier
ans
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
x
symbol
=
integerConstant
0
symbol
;
identifier
x
symbol
<
symbol
=
identifier
k
symbol
;
identifier
x
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
c
symbol
=
identifier
str
symbol
[
identifier
x
symbol
]
symbol
-
integerConstant
0
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
c
symbol
&
symbol
&
identifier
x
symbol
>
identifier
cnt
symbol
)
symbol
{
identifier
NewLine
identifier
ans
symbol
=
symbol
(
identifier
x
symbol
-
identifier
cnt
symbol
)
symbol
>
identifier
ans
identifier
x
symbol
-
identifier
cnt
identifier
ans
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
cnt
symbol
+
symbol
=
identifier
c
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: %d\n
symbol
,
identifier
y
symbol
,
identifier
ans
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/pandamonium.1.cpp file...

identifier
include
symbol
<
identifier
cstdio
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstring
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
algorithm
symbol
>
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
keyword
int
identifier
t
symbol
,
identifier
d
symbol
,
identifier
p
symbol
[
integerConstant
1005
symbol
]
symbol
,
identifier
m
symbol
[
integerConstant
1005
symbol
]
symbol
[
integerConstant
1005
symbol
]
symbol
;
identifier
NewLine
keyword
int
identifier
dp
symbol
(
keyword
int
identifier
a
symbol
,
keyword
int
identifier
b
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
a
symbol
<
symbol
=
identifier
b
symbol
)
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
b
symbol
=
symbol
=
integerConstant
0
symbol
)
keyword
return
integerConstant
1000000
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
m
symbol
[
identifier
a
symbol
]
symbol
[
identifier
b
symbol
]
symbol
>
integerConstant
0
symbol
)
keyword
return
identifier
m
symbol
[
identifier
a
symbol
]
symbol
[
identifier
b
symbol
]
symbol
;
identifier
NewLine
identifier
m
symbol
[
identifier
a
symbol
]
symbol
[
identifier
b
symbol
]
symbol
=
identifier
min
symbol
(
identifier
dp
symbol
(
identifier
a
symbol
-
identifier
b
symbol
,
identifier
b
symbol
)
symbol
+
integerConstant
1
symbol
,
identifier
dp
symbol
(
identifier
a
symbol
-
integerConstant
1
symbol
,
identifier
b
symbol
-
integerConstant
1
symbol
)
symbol
)
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
x
symbol
=
identifier
b
symbol
+
integerConstant
1
symbol
;
identifier
x
symbol
<
symbol
=
identifier
a
symbol
/
integerConstant
2
symbol
;
identifier
x
symbol
+
symbol
+
symbol
)
identifier
m
symbol
[
identifier
a
symbol
]
symbol
[
identifier
b
symbol
]
symbol
=
identifier
min
symbol
(
identifier
m
symbol
[
identifier
a
symbol
]
symbol
[
identifier
b
symbol
]
symbol
,
identifier
dp
symbol
(
identifier
x
symbol
,
identifier
b
symbol
)
symbol
+
identifier
dp
symbol
(
identifier
a
symbol
-
identifier
x
symbol
,
identifier
b
symbol
)
symbol
+
integerConstant
1
symbol
)
symbol
;
identifier
NewLine
keyword
return
identifier
m
symbol
[
identifier
a
symbol
]
symbol
[
identifier
b
symbol
]
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
symbol
{
identifier
NewLine
identifier
memset
symbol
(
identifier
m
symbol
,
integerConstant
0
symbol
,
identifier
sizeof
symbol
(
identifier
m
symbol
)
symbol
)
symbol
;
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
t
symbol
)
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
c
symbol
=
integerConstant
1
symbol
;
identifier
c
symbol
<
symbol
=
identifier
t
symbol
;
identifier
c
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
mp
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
d
symbol
)
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
x
symbol
=
integerConstant
0
symbol
;
identifier
x
symbol
<
identifier
d
symbol
;
identifier
x
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
p
symbol
[
identifier
x
symbol
]
symbol
)
symbol
;
identifier
NewLine
identifier
mp
symbol
=
identifier
max
symbol
(
identifier
mp
symbol
,
identifier
p
symbol
[
identifier
x
symbol
]
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
int
identifier
ans
symbol
=
identifier
mp
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
x
symbol
=
integerConstant
1
symbol
;
identifier
x
symbol
<
identifier
mp
symbol
;
identifier
x
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
cnt
symbol
=
identifier
x
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
z
symbol
=
integerConstant
0
symbol
;
identifier
z
symbol
<
identifier
d
symbol
;
identifier
z
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
cnt
symbol
+
symbol
=
identifier
dp
symbol
(
identifier
p
symbol
[
identifier
z
symbol
]
symbol
,
identifier
x
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
ans
symbol
=
identifier
min
symbol
(
identifier
cnt
symbol
,
identifier
ans
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: %d\n
symbol
,
identifier
c
symbol
,
identifier
ans
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/pandamonium.2.cpp file...

identifier
include
symbol
<
identifier
cstdio
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstring
symbol
>
identifier
NewLine
identifier
typedef
identifier
long
identifier
long
identifier
ll
symbol
;
identifier
NewLine
keyword
int
identifier
t
symbol
,
identifier
l
symbol
;
identifier
NewLine
keyword
int
identifier
m
symbol
[
integerConstant
5
symbol
]
symbol
[
integerConstant
5
symbol
]
symbol
,
identifier
s
symbol
[
integerConstant
5
symbol
]
symbol
[
integerConstant
5
symbol
]
symbol
;
identifier
NewLine
identifier
ll
identifier
x
symbol
;
identifier
NewLine
keyword
char
identifier
str
symbol
[
integerConstant
10005
symbol
]
symbol
;
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
symbol
{
identifier
NewLine
identifier
memset
symbol
(
identifier
s
symbol
,
integerConstant
0
symbol
,
identifier
sizeof
symbol
(
identifier
s
symbol
)
symbol
)
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
y
symbol
=
integerConstant
0
symbol
;
identifier
y
symbol
<
symbol
=
integerConstant
3
symbol
;
identifier
y
symbol
+
symbol
+
symbol
)
identifier
m
symbol
[
integerConstant
0
symbol
]
symbol
[
identifier
y
symbol
]
symbol
=
identifier
m
symbol
[
identifier
y
symbol
]
symbol
[
integerConstant
0
symbol
]
symbol
=
identifier
y
symbol
;
identifier
NewLine
identifier
m
symbol
[
integerConstant
1
symbol
]
symbol
[
integerConstant
1
symbol
]
symbol
=
identifier
m
symbol
[
integerConstant
2
symbol
]
symbol
[
integerConstant
2
symbol
]
symbol
=
identifier
m
symbol
[
integerConstant
3
symbol
]
symbol
[
integerConstant
3
symbol
]
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
s
symbol
[
integerConstant
1
symbol
]
symbol
[
integerConstant
1
symbol
]
symbol
=
identifier
s
symbol
[
integerConstant
2
symbol
]
symbol
[
integerConstant
2
symbol
]
symbol
=
identifier
s
symbol
[
integerConstant
3
symbol
]
symbol
[
integerConstant
3
symbol
]
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
identifier
m
symbol
[
integerConstant
1
symbol
]
symbol
[
integerConstant
2
symbol
]
symbol
=
identifier
m
symbol
[
integerConstant
2
symbol
]
symbol
[
integerConstant
1
symbol
]
symbol
=
integerConstant
3
symbol
;
identifier
s
symbol
[
integerConstant
2
symbol
]
symbol
[
integerConstant
1
symbol
]
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
identifier
m
symbol
[
integerConstant
2
symbol
]
symbol
[
integerConstant
3
symbol
]
symbol
=
identifier
m
symbol
[
integerConstant
3
symbol
]
symbol
[
integerConstant
2
symbol
]
symbol
=
integerConstant
1
symbol
;
identifier
s
symbol
[
integerConstant
3
symbol
]
symbol
[
integerConstant
2
symbol
]
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
identifier
m
symbol
[
integerConstant
1
symbol
]
symbol
[
integerConstant
3
symbol
]
symbol
=
identifier
m
symbol
[
integerConstant
3
symbol
]
symbol
[
integerConstant
1
symbol
]
symbol
=
integerConstant
2
symbol
;
identifier
s
symbol
[
integerConstant
1
symbol
]
symbol
[
integerConstant
3
symbol
]
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d\n
symbol
,
symbol
&
identifier
t
symbol
)
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
c
symbol
=
integerConstant
1
symbol
;
identifier
c
symbol
<
symbol
=
identifier
t
symbol
;
identifier
c
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d %lld\n%s\n
symbol
,
symbol
&
identifier
l
symbol
,
symbol
&
identifier
x
symbol
,
identifier
str
symbol
)
symbol
;
identifier
NewLine
keyword
int
identifier
mult
symbol
=
integerConstant
0
symbol
,
identifier
sign
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
y
symbol
=
integerConstant
0
symbol
;
identifier
y
symbol
<
identifier
l
symbol
;
identifier
y
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
sign
symbol
=
identifier
s
symbol
[
identifier
mult
symbol
]
symbol
[
identifier
str
symbol
[
identifier
y
symbol
]
symbol
-
identifier
h
symbol
]
symbol
;
identifier
NewLine
identifier
mult
symbol
=
identifier
m
symbol
[
identifier
mult
symbol
]
symbol
[
identifier
str
symbol
[
identifier
y
symbol
]
symbol
-
identifier
h
symbol
]
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
mult
symbol
=
symbol
=
integerConstant
0
symbol
&
symbol
&
identifier
sign
symbol
=
symbol
=
integerConstant
0
symbol
|
symbol
|
identifier
mult
symbol
=
symbol
=
integerConstant
0
symbol
&
symbol
&
identifier
sign
symbol
=
symbol
=
integerConstant
1
symbol
&
symbol
&
symbol
(
identifier
x
integerConstant
2
identifier
ll
symbol
=
symbol
=
integerConstant
0
identifier
ll
symbol
)
symbol
|
symbol
|
identifier
mult
symbol
&
symbol
&
symbol
(
identifier
x
integerConstant
4
identifier
ll
symbol
=
integerConstant
2
identifier
ll
symbol
)
symbol
)
symbol
{
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: NO\n
symbol
,
identifier
c
symbol
)
symbol
;
identifier
NewLine
identifier
continue
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
bool
identifier
done
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
mult
symbol
=
integerConstant
0
symbol
,
identifier
sign
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
keyword
int
identifier
start
symbol
=
integerConstant
0
symbol
,
identifier
finish
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
z
symbol
=
integerConstant
0
symbol
;
identifier
z
symbol
<
integerConstant
4
symbol
;
identifier
z
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
y
symbol
=
integerConstant
0
symbol
;
identifier
y
symbol
<
identifier
l
symbol
;
identifier
y
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
sign
symbol
=
identifier
s
symbol
[
identifier
mult
symbol
]
symbol
[
identifier
str
symbol
[
identifier
y
symbol
]
symbol
-
identifier
h
symbol
]
symbol
;
identifier
NewLine
identifier
mult
symbol
=
identifier
m
symbol
[
identifier
mult
symbol
]
symbol
[
identifier
str
symbol
[
identifier
y
symbol
]
symbol
-
identifier
h
symbol
]
symbol
;
identifier
NewLine
identifier
start
symbol
+
symbol
+
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
mult
symbol
=
symbol
=
integerConstant
1
symbol
&
symbol
&
identifier
sign
symbol
=
symbol
=
integerConstant
0
symbol
)
symbol
{
identifier
done
symbol
=
integerConstant
1
symbol
;
identifier
break
symbol
;
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
done
symbol
)
identifier
break
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
done
symbol
)
symbol
{
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: NO\n
symbol
,
identifier
c
symbol
)
symbol
;
identifier
NewLine
identifier
continue
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
done
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
mult
symbol
=
integerConstant
0
symbol
,
identifier
sign
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
z
symbol
=
integerConstant
0
symbol
;
identifier
z
symbol
<
integerConstant
4
symbol
;
identifier
z
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
y
symbol
=
identifier
l
symbol
-
integerConstant
1
symbol
;
identifier
y
symbol
>
symbol
=
integerConstant
0
symbol
;
identifier
y
symbol
-
symbol
-
symbol
)
symbol
{
identifier
NewLine
identifier
sign
symbol
=
identifier
s
symbol
[
identifier
str
symbol
[
identifier
y
symbol
]
symbol
-
identifier
h
symbol
]
symbol
[
identifier
mult
symbol
]
symbol
;
identifier
NewLine
identifier
mult
symbol
=
identifier
m
symbol
[
identifier
str
symbol
[
identifier
y
symbol
]
symbol
-
identifier
h
symbol
]
symbol
[
identifier
mult
symbol
]
symbol
;
identifier
NewLine
identifier
finish
symbol
+
symbol
+
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
mult
symbol
=
symbol
=
integerConstant
3
symbol
&
symbol
&
identifier
sign
symbol
=
symbol
=
integerConstant
0
symbol
)
symbol
{
identifier
done
symbol
=
integerConstant
1
symbol
;
identifier
break
symbol
;
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
done
symbol
)
identifier
break
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
done
symbol
)
symbol
{
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: NO\n
symbol
,
identifier
c
symbol
)
symbol
;
identifier
NewLine
identifier
continue
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
ll
symbol
(
identifier
start
symbol
+
identifier
finish
symbol
)
symbol
<
identifier
ll
symbol
(
identifier
l
symbol
)
symbol
*
identifier
x
symbol
)
identifier
printf
symbol
(
stringConstant
Case #%d: YES\n
symbol
,
identifier
c
symbol
)
symbol
;
identifier
NewLine
keyword
else
identifier
printf
symbol
(
stringConstant
Case #%d: NO\n
symbol
,
identifier
c
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/pflueger.0.cpp file...

identifier
include
symbol
<
identifier
iostream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstdio
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
string
symbol
>
identifier
NewLine
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
T
symbol
;
identifier
cin
symbol
>
symbol
>
identifier
T
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
t
symbol
=
integerConstant
1
symbol
;
identifier
t
symbol
<
symbol
=
identifier
T
symbol
;
identifier
t
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
N
symbol
;
identifier
cin
symbol
>
symbol
>
identifier
N
symbol
;
identifier
NewLine
identifier
string
identifier
s
symbol
;
identifier
cin
symbol
>
symbol
>
identifier
s
symbol
;
identifier
NewLine
keyword
int
identifier
res
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
keyword
int
identifier
sum
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
k
symbol
=
integerConstant
0
symbol
;
identifier
k
symbol
<
symbol
=
identifier
N
symbol
;
identifier
k
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
res
symbol
=
identifier
max
symbol
(
identifier
res
symbol
,
identifier
k
symbol
-
identifier
sum
symbol
)
symbol
;
identifier
NewLine
identifier
sum
symbol
+
symbol
=
symbol
(
identifier
s
symbol
[
identifier
k
symbol
]
symbol
-
integerConstant
0
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: %d\n
symbol
,
identifier
t
symbol
,
identifier
res
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/pflueger.1.cpp file...

identifier
include
symbol
<
identifier
iostream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstdio
symbol
>
identifier
NewLine
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
P
symbol
[
integerConstant
1000
symbol
]
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
ciel
symbol
(
keyword
int
identifier
a
symbol
,
keyword
int
identifier
b
symbol
)
symbol
{
identifier
NewLine
keyword
return
symbol
(
identifier
a
symbol
+
identifier
b
symbol
-
integerConstant
1
symbol
)
symbol
/
identifier
b
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
int
identifier
solve
symbol
(
keyword
int
identifier
D
symbol
)
symbol
{
keyword
int
identifier
best
symbol
=
integerConstant
1000
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
k
symbol
=
integerConstant
1
symbol
;
identifier
k
symbol
<
symbol
=
integerConstant
1000
symbol
;
identifier
k
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
sum
symbol
=
identifier
k
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
D
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
sum
symbol
+
symbol
=
symbol
(
identifier
ciel
symbol
(
identifier
P
symbol
[
identifier
i
symbol
]
symbol
,
identifier
k
symbol
)
symbol
-
integerConstant
1
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
best
symbol
=
identifier
min
symbol
(
identifier
best
symbol
,
identifier
sum
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
identifier
best
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
T
symbol
;
identifier
cin
symbol
>
symbol
>
identifier
T
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
t
symbol
=
integerConstant
1
symbol
;
identifier
t
symbol
<
symbol
=
identifier
T
symbol
;
identifier
t
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
D
symbol
;
identifier
cin
symbol
>
symbol
>
identifier
D
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
d
symbol
=
integerConstant
0
symbol
;
identifier
d
symbol
<
identifier
D
symbol
;
identifier
d
symbol
+
symbol
+
symbol
)
identifier
cin
symbol
>
symbol
>
identifier
P
symbol
[
identifier
d
symbol
]
symbol
;
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: %d\n
symbol
,
identifier
t
symbol
,
identifier
solve
symbol
(
identifier
D
symbol
)
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/pflueger.2.cpp file...

identifier
include
symbol
<
identifier
string
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
iostream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstdio
symbol
>
identifier
NewLine
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
typedef
identifier
long
identifier
long
identifier
ll
symbol
;
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
NewLine
keyword
int
identifier
mult
symbol
(
keyword
int
identifier
a
symbol
,
keyword
int
identifier
b
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
a
symbol
>
symbol
=
integerConstant
4
symbol
)
symbol
{
identifier
NewLine
keyword
return
symbol
(
identifier
mult
symbol
(
identifier
a
symbol
-
integerConstant
4
symbol
,
identifier
b
symbol
)
symbol
+
integerConstant
4
symbol
)
integerConstant
8
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
b
symbol
>
symbol
=
integerConstant
4
symbol
)
symbol
{
identifier
NewLine
keyword
return
symbol
(
identifier
mult
symbol
(
identifier
a
symbol
,
identifier
b
symbol
-
integerConstant
4
symbol
)
symbol
+
integerConstant
4
symbol
)
integerConstant
8
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
a
symbol
=
symbol
=
integerConstant
0
symbol
|
symbol
|
identifier
b
symbol
=
symbol
=
integerConstant
0
symbol
)
keyword
return
symbol
(
identifier
a
symbol
+
identifier
b
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
a
symbol
=
symbol
=
identifier
b
symbol
)
keyword
return
integerConstant
4
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
a
symbol
>
identifier
b
symbol
)
keyword
return
symbol
(
identifier
mult
symbol
(
identifier
b
symbol
,
identifier
a
symbol
)
symbol
+
integerConstant
4
symbol
)
integerConstant
8
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
a
symbol
=
symbol
=
integerConstant
1
symbol
&
symbol
&
identifier
b
symbol
=
symbol
=
integerConstant
2
symbol
)
keyword
return
integerConstant
3
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
a
symbol
=
symbol
=
integerConstant
1
symbol
&
symbol
&
identifier
b
symbol
=
symbol
=
integerConstant
3
symbol
)
keyword
return
integerConstant
6
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
a
symbol
=
symbol
=
integerConstant
2
symbol
&
symbol
&
identifier
b
symbol
=
symbol
=
integerConstant
3
symbol
)
keyword
return
integerConstant
1
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
int
identifier
mc
symbol
[
integerConstant
8
symbol
]
symbol
[
integerConstant
8
symbol
]
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
pow
symbol
(
keyword
int
identifier
a
symbol
,
identifier
ll
identifier
e
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
e
symbol
>
symbol
=
integerConstant
4
symbol
)
keyword
return
identifier
pow
symbol
(
identifier
a
symbol
,
identifier
e
integerConstant
4
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
e
symbol
=
symbol
=
integerConstant
0
symbol
)
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
keyword
else
keyword
return
identifier
mc
symbol
[
identifier
a
symbol
]
symbol
[
identifier
pow
symbol
(
identifier
a
symbol
,
identifier
e
symbol
-
integerConstant
1
symbol
)
symbol
]
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
string
identifier
toString
symbol
(
keyword
int
identifier
i
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
i
symbol
=
symbol
=
integerConstant
0
symbol
)
keyword
return
symbol
+1
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
i
symbol
=
symbol
=
integerConstant
1
symbol
)
keyword
return
symbol
+i
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
i
symbol
=
symbol
=
integerConstant
2
symbol
)
keyword
return
symbol
+j
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
i
symbol
=
symbol
=
integerConstant
3
symbol
)
keyword
return
symbol
+k
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
i
symbol
=
symbol
=
integerConstant
4
symbol
)
keyword
return
symbol
-1
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
i
symbol
=
symbol
=
integerConstant
5
symbol
)
keyword
return
symbol
-i
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
i
symbol
=
symbol
=
integerConstant
6
symbol
)
keyword
return
symbol
-j
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
i
symbol
=
symbol
=
integerConstant
7
symbol
)
keyword
return
symbol
-k
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
int
identifier
toInt
symbol
(
keyword
char
identifier
c
symbol
)
symbol
{
identifier
NewLine
keyword
return
symbol
(
identifier
c
symbol
-
identifier
i
symbol
+
integerConstant
1
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
int
identifier
pref
symbol
[
integerConstant
10000
symbol
]
symbol
;
identifier
NewLine
identifier
NewLine
identifier
string
identifier
doCase
symbol
(
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
prod
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
ll
identifier
L
symbol
,
identifier
X
symbol
;
identifier
cin
symbol
>
symbol
>
identifier
L
symbol
>
symbol
>
identifier
X
symbol
;
identifier
NewLine
identifier
string
identifier
s
symbol
;
identifier
cin
symbol
>
symbol
>
identifier
s
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
l
symbol
=
integerConstant
0
symbol
;
identifier
l
symbol
<
identifier
L
symbol
;
identifier
l
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
pref
symbol
[
identifier
l
symbol
]
symbol
=
identifier
prod
symbol
;
identifier
NewLine
identifier
prod
symbol
=
identifier
mc
symbol
[
identifier
prod
symbol
]
symbol
[
identifier
toInt
symbol
(
identifier
s
symbol
[
identifier
l
symbol
]
symbol
)
symbol
]
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
int
identifier
total
symbol
=
identifier
pow
symbol
(
identifier
prod
symbol
,
identifier
X
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
total
symbol
=
integerConstant
4
symbol
)
keyword
return
stringConstant
NO
symbol
;
identifier
NewLine
identifier
ll
identifier
firstI
symbol
=
symbol
(
identifier
L
symbol
*
identifier
X
symbol
)
symbol
;
identifier
NewLine
identifier
ll
identifier
lastK
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
l
symbol
=
integerConstant
0
symbol
;
identifier
l
symbol
<
identifier
L
symbol
;
identifier
l
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
val
symbol
=
identifier
pref
symbol
[
identifier
l
symbol
]
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
m
symbol
=
integerConstant
0
symbol
;
identifier
m
symbol
<
integerConstant
4
symbol
&
symbol
&
identifier
m
symbol
<
identifier
X
symbol
;
identifier
m
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
val
symbol
=
symbol
=
integerConstant
1
symbol
)
identifier
firstI
symbol
=
identifier
min
symbol
(
identifier
firstI
symbol
,
symbol
(
identifier
ll
symbol
)
identifier
l
symbol
+
identifier
L
symbol
*
identifier
m
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
keyword
if
symbol
(
identifier
val
symbol
=
symbol
=
integerConstant
3
symbol
)
symbol
{
identifier
NewLine
identifier
ll
identifier
m1
symbol
=
symbol
(
identifier
ll
symbol
)
identifier
m
symbol
+
integerConstant
4
symbol
*
symbol
(
symbol
(
identifier
X
symbol
-
identifier
m
symbol
-
integerConstant
1
symbol
)
symbol
/
integerConstant
4
symbol
)
symbol
;
identifier
NewLine
identifier
lastK
symbol
=
identifier
max
symbol
(
identifier
lastK
symbol
,
identifier
l
symbol
+
identifier
L
symbol
*
identifier
m1
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
val
symbol
=
identifier
mc
symbol
[
identifier
prod
symbol
]
symbol
[
identifier
val
symbol
]
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
firstI
symbol
<
identifier
lastK
symbol
)
keyword
return
stringConstant
YES
symbol
;
identifier
NewLine
keyword
else
keyword
return
stringConstant
NO
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
symbol
{
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
a
symbol
=
integerConstant
0
symbol
;
identifier
a
symbol
<
integerConstant
8
symbol
;
identifier
a
symbol
+
symbol
+
symbol
)
identifier
for
symbol
(
keyword
int
identifier
b
symbol
=
integerConstant
0
symbol
;
identifier
b
symbol
<
integerConstant
8
symbol
;
identifier
b
symbol
+
symbol
+
symbol
)
identifier
mc
symbol
[
identifier
a
symbol
]
symbol
[
identifier
b
symbol
]
symbol
=
identifier
mult
symbol
(
identifier
a
symbol
,
identifier
b
symbol
)
symbol
;
identifier
NewLine
keyword
int
identifier
T
symbol
;
identifier
cin
symbol
>
symbol
>
identifier
T
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
t
symbol
=
integerConstant
1
symbol
;
identifier
t
symbol
<
symbol
=
identifier
T
symbol
;
identifier
t
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: %s\n
symbol
,
identifier
t
symbol
,
identifier
doCase
symbol
(
symbol
)
symbol
.
identifier
c
identifier
str
symbol
(
symbol
)
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/ponyopoppo.0.cpp file...

identifier
include
symbol
<
identifier
algorithm
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
bitset
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cmath
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
complex
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstdio
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstring
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
iostream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
map
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
queue
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
set
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
stack
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
string
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
vector
symbol
>
identifier
NewLine
identifier
NewLine
identifier
define
identifier
repi
symbol
(
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
symbol
(
identifier
a
symbol
)
symbol
;
identifier
i
symbol
<
symbol
(
identifier
b
symbol
)
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
define
identifier
rep
symbol
(
identifier
i
symbol
,
identifier
a
symbol
)
identifier
repi
symbol
(
identifier
i
symbol
,
integerConstant
0
symbol
,
identifier
a
symbol
)
identifier
NewLine
identifier
define
identifier
repd
symbol
(
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
symbol
(
identifier
a
symbol
)
symbol
;
identifier
i
symbol
>
symbol
=
symbol
(
identifier
b
symbol
)
symbol
;
identifier
i
symbol
-
symbol
-
symbol
)
identifier
NewLine
identifier
define
identifier
repit
symbol
(
identifier
i
symbol
,
identifier
v
symbol
)
identifier
for
symbol
(
identifier
typeof
symbol
(
symbol
(
identifier
v
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
)
identifier
i
symbol
=
symbol
(
identifier
v
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
;
identifier
i
symbol
=
symbol
(
identifier
v
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
define
identifier
reprit
symbol
(
identifier
i
symbol
,
identifier
v
symbol
)
identifier
for
symbol
(
identifier
typeof
symbol
(
symbol
(
identifier
v
symbol
)
symbol
.
identifier
rbegin
symbol
(
symbol
)
symbol
)
identifier
i
symbol
=
symbol
(
identifier
v
symbol
)
symbol
.
identifier
rbegin
symbol
(
symbol
)
symbol
;
identifier
i
symbol
=
symbol
(
identifier
v
symbol
)
symbol
.
identifier
rend
symbol
(
symbol
)
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
define
identifier
all
symbol
(
identifier
v
symbol
)
symbol
(
identifier
v
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
,
symbol
(
identifier
v
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
identifier
NewLine
identifier
define
identifier
rall
symbol
(
identifier
v
symbol
)
symbol
(
identifier
v
symbol
)
symbol
.
identifier
rbegin
symbol
(
symbol
)
symbol
,
symbol
(
identifier
v
symbol
)
symbol
.
identifier
rend
symbol
(
symbol
)
identifier
NewLine
identifier
define
identifier
UNIQUE
symbol
(
identifier
v
symbol
)
symbol
(
identifier
v
symbol
)
symbol
.
identifier
erase
symbol
(
identifier
unique
symbol
(
identifier
all
symbol
(
identifier
v
symbol
)
symbol
)
symbol
,
symbol
(
identifier
v
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
pb
identifier
push
identifier
back
identifier
NewLine
identifier
define
identifier
mp
identifier
make
identifier
pair
identifier
NewLine
identifier
define
identifier
PI
identifier
acos
symbol
(
symbol
-
integerConstant
1
symbol
.
integerConstant
0
symbol
)
identifier
NewLine
identifier
define
identifier
to
identifier
str
symbol
(
identifier
v
symbol
)
identifier
v
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
typedef
identifier
long
identifier
long
identifier
ll
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
T
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
T
symbol
;
identifier
NewLine
identifier
rep
symbol
(
symbol
,
identifier
T
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
n
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
n
symbol
;
identifier
NewLine
identifier
string
identifier
s
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
s
symbol
;
identifier
NewLine
identifier
vector
symbol
<
identifier
ll
symbol
>
identifier
v
symbol
(
identifier
n
symbol
+
integerConstant
1
symbol
)
symbol
;
identifier
NewLine
identifier
rep
symbol
(
identifier
i
symbol
,
identifier
n
symbol
+
integerConstant
1
symbol
)
identifier
v
symbol
[
identifier
i
symbol
]
symbol
=
identifier
s
symbol
[
identifier
i
symbol
]
symbol
-
integerConstant
0
symbol
;
identifier
NewLine
identifier
NewLine
identifier
ll
identifier
sum
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
ll
identifier
ans
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
rep
symbol
(
identifier
i
symbol
,
identifier
n
symbol
+
integerConstant
1
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
sum
symbol
<
identifier
i
symbol
)
symbol
{
identifier
NewLine
identifier
ans
symbol
+
symbol
=
identifier
i
symbol
-
identifier
sum
symbol
;
identifier
NewLine
identifier
sum
symbol
=
identifier
i
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
sum
symbol
+
symbol
=
identifier
v
symbol
[
identifier
i
symbol
]
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
cout
symbol
<
symbol
<
stringConstant
Case #
symbol
<
symbol
<
symbol
+
integerConstant
1
symbol
<
symbol
<
stringConstant
: 
symbol
;
identifier
NewLine
identifier
cout
symbol
<
symbol
<
identifier
ans
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/ponyopoppo.1.cpp file...

identifier
include
symbol
<
identifier
algorithm
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
bitset
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cmath
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
complex
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstdio
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstring
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
iostream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
map
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
queue
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
set
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
stack
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
string
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
vector
symbol
>
identifier
NewLine
identifier
NewLine
identifier
define
identifier
repi
symbol
(
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
symbol
(
identifier
a
symbol
)
symbol
;
identifier
i
symbol
<
symbol
(
identifier
b
symbol
)
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
define
identifier
rep
symbol
(
identifier
i
symbol
,
identifier
a
symbol
)
identifier
repi
symbol
(
identifier
i
symbol
,
integerConstant
0
symbol
,
identifier
a
symbol
)
identifier
NewLine
identifier
define
identifier
repd
symbol
(
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
symbol
(
identifier
a
symbol
)
symbol
;
identifier
i
symbol
>
symbol
=
symbol
(
identifier
b
symbol
)
symbol
;
identifier
i
symbol
-
symbol
-
symbol
)
identifier
NewLine
identifier
define
identifier
repit
symbol
(
identifier
i
symbol
,
identifier
v
symbol
)
identifier
for
symbol
(
identifier
typeof
symbol
(
symbol
(
identifier
v
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
)
identifier
i
symbol
=
symbol
(
identifier
v
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
;
identifier
i
symbol
=
symbol
(
identifier
v
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
define
identifier
reprit
symbol
(
identifier
i
symbol
,
identifier
v
symbol
)
identifier
for
symbol
(
identifier
typeof
symbol
(
symbol
(
identifier
v
symbol
)
symbol
.
identifier
rbegin
symbol
(
symbol
)
symbol
)
identifier
i
symbol
=
symbol
(
identifier
v
symbol
)
symbol
.
identifier
rbegin
symbol
(
symbol
)
symbol
;
identifier
i
symbol
=
symbol
(
identifier
v
symbol
)
symbol
.
identifier
rend
symbol
(
symbol
)
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
define
identifier
all
symbol
(
identifier
v
symbol
)
symbol
(
identifier
v
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
,
symbol
(
identifier
v
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
identifier
NewLine
identifier
define
identifier
rall
symbol
(
identifier
v
symbol
)
symbol
(
identifier
v
symbol
)
symbol
.
identifier
rbegin
symbol
(
symbol
)
symbol
,
symbol
(
identifier
v
symbol
)
symbol
.
identifier
rend
symbol
(
symbol
)
identifier
NewLine
identifier
define
identifier
UNIQUE
symbol
(
identifier
v
symbol
)
symbol
(
identifier
v
symbol
)
symbol
.
identifier
erase
symbol
(
identifier
unique
symbol
(
identifier
all
symbol
(
identifier
v
symbol
)
symbol
)
symbol
,
symbol
(
identifier
v
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
pb
identifier
push
identifier
back
identifier
NewLine
identifier
define
identifier
mp
identifier
make
identifier
pair
identifier
NewLine
identifier
define
identifier
PI
identifier
acos
symbol
(
symbol
-
integerConstant
1
symbol
.
integerConstant
0
symbol
)
identifier
NewLine
identifier
define
identifier
to
identifier
str
symbol
(
identifier
v
symbol
)
identifier
v
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
typedef
identifier
long
identifier
long
identifier
ll
symbol
;
identifier
NewLine
identifier
NewLine
identifier
template
symbol
<
keyword
class
identifier
X
symbol
>
identifier
NewLine
identifier
ostream
symbol
&
identifier
operator
symbol
<
symbol
<
symbol
(
identifier
ostream
symbol
&
identifier
os
symbol
,
identifier
const
identifier
vector
symbol
<
identifier
X
symbol
>
symbol
&
identifier
v
symbol
)
symbol
{
identifier
NewLine
identifier
repit
symbol
(
identifier
itr
symbol
,
identifier
v
symbol
)
identifier
cout
symbol
<
symbol
<
symbol
*
identifier
itr
symbol
<
symbol
<
symbol
;
identifier
NewLine
identifier
cout
symbol
<
symbol
<
stringConstant
 size : 
symbol
<
symbol
<
identifier
v
symbol
.
identifier
size
symbol
(
symbol
)
symbol
;
symbol
;
identifier
NewLine
keyword
return
identifier
os
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
T
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
T
symbol
;
identifier
NewLine
identifier
rep
symbol
(
symbol
,
identifier
T
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
n
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
n
symbol
;
identifier
NewLine
identifier
vector
symbol
<
identifier
ll
symbol
>
identifier
x
symbol
(
identifier
n
symbol
)
symbol
;
identifier
NewLine
identifier
rep
symbol
(
identifier
i
symbol
,
identifier
n
symbol
)
identifier
cin
symbol
>
symbol
>
identifier
x
symbol
[
identifier
i
symbol
]
symbol
;
identifier
NewLine
identifier
ll
identifier
maxy
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
rep
symbol
(
identifier
i
symbol
,
identifier
n
symbol
)
identifier
maxy
symbol
=
identifier
max
symbol
(
identifier
maxy
symbol
,
identifier
x
symbol
[
identifier
i
symbol
]
symbol
)
symbol
;
identifier
NewLine
identifier
ll
identifier
ans
symbol
=
identifier
maxy
symbol
;
identifier
NewLine
identifier
repi
symbol
(
identifier
y
symbol
,
integerConstant
1
symbol
,
identifier
maxy
symbol
+
integerConstant
1
symbol
)
symbol
{
identifier
NewLine
identifier
ll
identifier
sum
symbol
=
identifier
y
symbol
;
identifier
NewLine
identifier
rep
symbol
(
identifier
i
symbol
,
identifier
n
symbol
)
identifier
sum
symbol
+
symbol
=
symbol
(
identifier
x
symbol
[
identifier
i
symbol
]
symbol
-
integerConstant
1
symbol
)
symbol
/
identifier
y
symbol
;
identifier
NewLine
identifier
ans
symbol
=
identifier
min
symbol
(
identifier
ans
symbol
,
identifier
sum
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
cout
symbol
<
symbol
<
stringConstant
Case #
symbol
<
symbol
<
symbol
+
integerConstant
1
symbol
<
symbol
<
stringConstant
: 
symbol
;
identifier
NewLine
identifier
cout
symbol
<
symbol
<
identifier
ans
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/ponyopoppo.2.cpp file...

identifier
include
symbol
<
identifier
algorithm
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
bitset
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cmath
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
complex
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstdio
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstring
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
iostream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
map
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
queue
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
set
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
stack
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
string
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
vector
symbol
>
identifier
NewLine
identifier
NewLine
identifier
define
identifier
repi
symbol
(
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
symbol
(
identifier
a
symbol
)
symbol
;
identifier
i
symbol
<
symbol
(
identifier
b
symbol
)
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
define
identifier
rep
symbol
(
identifier
i
symbol
,
identifier
a
symbol
)
identifier
repi
symbol
(
identifier
i
symbol
,
integerConstant
0
symbol
,
identifier
a
symbol
)
identifier
NewLine
identifier
define
identifier
repd
symbol
(
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
symbol
(
identifier
a
symbol
)
symbol
;
identifier
i
symbol
>
symbol
=
symbol
(
identifier
b
symbol
)
symbol
;
identifier
i
symbol
-
symbol
-
symbol
)
identifier
NewLine
identifier
define
identifier
repit
symbol
(
identifier
i
symbol
,
identifier
v
symbol
)
identifier
for
symbol
(
identifier
typeof
symbol
(
symbol
(
identifier
v
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
)
identifier
i
symbol
=
symbol
(
identifier
v
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
;
identifier
i
symbol
=
symbol
(
identifier
v
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
define
identifier
reprit
symbol
(
identifier
i
symbol
,
identifier
v
symbol
)
identifier
for
symbol
(
identifier
typeof
symbol
(
symbol
(
identifier
v
symbol
)
symbol
.
identifier
rbegin
symbol
(
symbol
)
symbol
)
identifier
i
symbol
=
symbol
(
identifier
v
symbol
)
symbol
.
identifier
rbegin
symbol
(
symbol
)
symbol
;
identifier
i
symbol
=
symbol
(
identifier
v
symbol
)
symbol
.
identifier
rend
symbol
(
symbol
)
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
define
identifier
all
symbol
(
identifier
v
symbol
)
symbol
(
identifier
v
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
,
symbol
(
identifier
v
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
identifier
NewLine
identifier
define
identifier
rall
symbol
(
identifier
v
symbol
)
symbol
(
identifier
v
symbol
)
symbol
.
identifier
rbegin
symbol
(
symbol
)
symbol
,
symbol
(
identifier
v
symbol
)
symbol
.
identifier
rend
symbol
(
symbol
)
identifier
NewLine
identifier
define
identifier
UNIQUE
symbol
(
identifier
v
symbol
)
symbol
(
identifier
v
symbol
)
symbol
.
identifier
erase
symbol
(
identifier
unique
symbol
(
identifier
all
symbol
(
identifier
v
symbol
)
symbol
)
symbol
,
symbol
(
identifier
v
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
pb
identifier
push
identifier
back
identifier
NewLine
identifier
define
identifier
mp
identifier
make
identifier
pair
identifier
NewLine
identifier
define
identifier
PI
identifier
acos
symbol
(
symbol
-
integerConstant
1
symbol
.
integerConstant
0
symbol
)
identifier
NewLine
identifier
define
identifier
to
identifier
str
symbol
(
identifier
v
symbol
)
identifier
v
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
typedef
identifier
long
identifier
long
identifier
ll
symbol
;
identifier
NewLine
identifier
NewLine
identifier
struct
identifier
quart
symbol
{
identifier
NewLine
keyword
char
identifier
type
symbol
;
identifier
NewLine
keyword
int
identifier
sign
symbol
;
identifier
NewLine
identifier
quart
symbol
(
keyword
char
identifier
type
symbol
)
identifier
type
symbol
(
identifier
type
symbol
)
symbol
{
identifier
NewLine
identifier
sign
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
quart
symbol
(
keyword
char
identifier
type
symbol
,
keyword
int
identifier
sign
symbol
)
identifier
type
symbol
(
identifier
type
symbol
)
symbol
,
identifier
sign
symbol
(
identifier
sign
symbol
)
symbol
{
symbol
}
identifier
NewLine
identifier
quart
identifier
right
symbol
(
identifier
quart
identifier
o
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
type
symbol
=
symbol
=
integerConstant
1
symbol
)
keyword
return
identifier
quart
symbol
(
identifier
o
symbol
.
identifier
type
symbol
,
identifier
sign
symbol
*
identifier
o
symbol
.
identifier
sign
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
o
symbol
.
identifier
type
symbol
=
symbol
=
integerConstant
1
symbol
)
keyword
return
identifier
quart
symbol
(
identifier
type
symbol
,
identifier
sign
symbol
*
identifier
o
symbol
.
identifier
sign
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
type
symbol
=
symbol
=
identifier
i
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
o
symbol
.
identifier
type
symbol
=
symbol
=
identifier
i
symbol
)
keyword
return
identifier
quart
symbol
(
integerConstant
1
symbol
,
symbol
-
identifier
sign
symbol
*
identifier
o
symbol
.
identifier
sign
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
o
symbol
.
identifier
type
symbol
=
symbol
=
identifier
j
symbol
)
keyword
return
identifier
quart
symbol
(
identifier
k
symbol
,
identifier
sign
symbol
*
identifier
o
symbol
.
identifier
sign
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
o
symbol
.
identifier
type
symbol
=
symbol
=
identifier
k
symbol
)
keyword
return
identifier
quart
symbol
(
identifier
j
symbol
,
symbol
-
identifier
sign
symbol
*
identifier
o
symbol
.
identifier
sign
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
type
symbol
=
symbol
=
identifier
j
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
o
symbol
.
identifier
type
symbol
=
symbol
=
identifier
i
symbol
)
keyword
return
identifier
quart
symbol
(
identifier
k
symbol
,
symbol
-
identifier
sign
symbol
*
identifier
o
symbol
.
identifier
sign
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
o
symbol
.
identifier
type
symbol
=
symbol
=
identifier
j
symbol
)
keyword
return
identifier
quart
symbol
(
integerConstant
1
symbol
,
symbol
-
identifier
sign
symbol
*
identifier
o
symbol
.
identifier
sign
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
o
symbol
.
identifier
type
symbol
=
symbol
=
identifier
k
symbol
)
keyword
return
identifier
quart
symbol
(
identifier
i
symbol
,
identifier
sign
symbol
*
identifier
o
symbol
.
identifier
sign
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
type
symbol
=
symbol
=
identifier
k
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
o
symbol
.
identifier
type
symbol
=
symbol
=
identifier
i
symbol
)
keyword
return
identifier
quart
symbol
(
identifier
j
symbol
,
identifier
sign
symbol
*
identifier
o
symbol
.
identifier
sign
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
o
symbol
.
identifier
type
symbol
=
symbol
=
identifier
j
symbol
)
keyword
return
identifier
quart
symbol
(
identifier
i
symbol
,
symbol
-
identifier
sign
symbol
*
identifier
o
symbol
.
identifier
sign
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
o
symbol
.
identifier
type
symbol
=
symbol
=
identifier
k
symbol
)
keyword
return
identifier
quart
symbol
(
integerConstant
1
symbol
,
symbol
-
identifier
sign
symbol
*
identifier
o
symbol
.
identifier
sign
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
cerr
symbol
<
symbol
<
stringConstant
error!
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
keyword
return
identifier
quart
symbol
(
integerConstant
1
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
quart
identifier
left
symbol
(
identifier
quart
identifier
o
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
type
symbol
=
symbol
=
integerConstant
1
symbol
)
keyword
return
identifier
quart
symbol
(
identifier
o
symbol
.
identifier
type
symbol
,
identifier
sign
symbol
*
identifier
o
symbol
.
identifier
sign
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
o
symbol
.
identifier
type
symbol
=
symbol
=
integerConstant
1
symbol
)
keyword
return
identifier
quart
symbol
(
identifier
type
symbol
,
identifier
sign
symbol
*
identifier
o
symbol
.
identifier
sign
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
type
symbol
=
symbol
=
identifier
i
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
o
symbol
.
identifier
type
symbol
=
symbol
=
identifier
i
symbol
)
keyword
return
identifier
quart
symbol
(
integerConstant
1
symbol
,
symbol
-
identifier
sign
symbol
*
identifier
o
symbol
.
identifier
sign
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
o
symbol
.
identifier
type
symbol
=
symbol
=
identifier
j
symbol
)
keyword
return
identifier
quart
symbol
(
identifier
k
symbol
,
symbol
-
identifier
sign
symbol
*
identifier
o
symbol
.
identifier
sign
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
o
symbol
.
identifier
type
symbol
=
symbol
=
identifier
k
symbol
)
keyword
return
identifier
quart
symbol
(
identifier
j
symbol
,
identifier
sign
symbol
*
identifier
o
symbol
.
identifier
sign
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
type
symbol
=
symbol
=
identifier
j
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
o
symbol
.
identifier
type
symbol
=
symbol
=
identifier
i
symbol
)
keyword
return
identifier
quart
symbol
(
identifier
k
symbol
,
identifier
sign
symbol
*
identifier
o
symbol
.
identifier
sign
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
o
symbol
.
identifier
type
symbol
=
symbol
=
identifier
j
symbol
)
keyword
return
identifier
quart
symbol
(
integerConstant
1
symbol
,
symbol
-
identifier
sign
symbol
*
identifier
o
symbol
.
identifier
sign
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
o
symbol
.
identifier
type
symbol
=
symbol
=
identifier
k
symbol
)
keyword
return
identifier
quart
symbol
(
identifier
i
symbol
,
symbol
-
identifier
sign
symbol
*
identifier
o
symbol
.
identifier
sign
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
type
symbol
=
symbol
=
identifier
k
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
o
symbol
.
identifier
type
symbol
=
symbol
=
identifier
i
symbol
)
keyword
return
identifier
quart
symbol
(
identifier
j
symbol
,
symbol
-
identifier
sign
symbol
*
identifier
o
symbol
.
identifier
sign
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
o
symbol
.
identifier
type
symbol
=
symbol
=
identifier
j
symbol
)
keyword
return
identifier
quart
symbol
(
identifier
i
symbol
,
identifier
sign
symbol
*
identifier
o
symbol
.
identifier
sign
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
o
symbol
.
identifier
type
symbol
=
symbol
=
identifier
k
symbol
)
keyword
return
identifier
quart
symbol
(
integerConstant
1
symbol
,
symbol
-
identifier
sign
symbol
*
identifier
o
symbol
.
identifier
sign
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
cerr
symbol
<
symbol
<
stringConstant
error!
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
keyword
return
identifier
quart
symbol
(
integerConstant
1
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
T
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
T
symbol
;
identifier
NewLine
identifier
rep
symbol
(
symbol
,
identifier
T
symbol
)
symbol
{
identifier
NewLine
identifier
bool
identifier
ans
symbol
=
keyword
true
symbol
;
identifier
NewLine
identifier
ll
identifier
x
symbol
,
identifier
l
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
l
symbol
>
symbol
>
identifier
x
symbol
;
identifier
NewLine
identifier
string
identifier
ori
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
ori
symbol
;
identifier
NewLine
identifier
string
identifier
s
symbol
;
identifier
NewLine
identifier
rep
symbol
(
identifier
i
symbol
,
identifier
min
symbol
(
identifier
x
symbol
,
integerConstant
6
identifier
LL
symbol
)
symbol
)
identifier
s
symbol
+
symbol
=
identifier
ori
symbol
;
identifier
NewLine
identifier
NewLine
identifier
quart
identifier
unit
identifier
val
symbol
(
integerConstant
1
symbol
)
symbol
;
identifier
NewLine
identifier
rep
symbol
(
identifier
i
symbol
,
identifier
ori
symbol
.
identifier
size
symbol
(
symbol
)
symbol
)
symbol
{
identifier
NewLine
identifier
unit
identifier
val
symbol
=
identifier
unit
identifier
val
symbol
.
identifier
right
symbol
(
identifier
ori
symbol
[
identifier
i
symbol
]
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
quart
identifier
val
symbol
(
integerConstant
1
symbol
)
symbol
;
identifier
NewLine
identifier
rep
symbol
(
identifier
i
symbol
,
identifier
x
integerConstant
4
symbol
)
symbol
{
identifier
NewLine
identifier
val
symbol
=
identifier
val
symbol
.
identifier
right
symbol
(
identifier
unit
identifier
val
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
val
symbol
.
identifier
type
symbol
=
integerConstant
1
symbol
|
symbol
|
identifier
val
symbol
.
identifier
sign
symbol
=
symbol
-
integerConstant
1
symbol
)
identifier
NewLine
identifier
ans
symbol
=
keyword
false
symbol
;
identifier
NewLine
identifier
NewLine
identifier
ll
identifier
i
identifier
pos
symbol
=
symbol
-
integerConstant
1
symbol
;
identifier
NewLine
identifier
val
symbol
=
identifier
quart
symbol
(
integerConstant
1
symbol
)
symbol
;
identifier
NewLine
identifier
rep
symbol
(
identifier
i
symbol
,
identifier
s
symbol
.
identifier
size
symbol
(
symbol
)
symbol
)
symbol
{
identifier
NewLine
identifier
val
symbol
=
identifier
val
symbol
.
identifier
right
symbol
(
identifier
quart
symbol
(
identifier
s
symbol
[
identifier
i
symbol
]
symbol
)
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
val
symbol
.
identifier
type
symbol
=
symbol
=
identifier
i
symbol
&
symbol
&
identifier
val
symbol
.
identifier
sign
symbol
=
symbol
=
integerConstant
1
symbol
)
symbol
{
identifier
NewLine
identifier
i
identifier
pos
symbol
=
identifier
i
symbol
;
identifier
NewLine
identifier
break
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
i
identifier
pos
symbol
=
symbol
=
symbol
-
integerConstant
1
symbol
)
identifier
ans
symbol
=
keyword
false
symbol
;
identifier
NewLine
identifier
NewLine
identifier
ll
identifier
k
identifier
pos
symbol
=
symbol
-
integerConstant
1
symbol
;
identifier
NewLine
identifier
val
symbol
=
identifier
quart
symbol
(
integerConstant
1
symbol
)
symbol
;
identifier
NewLine
identifier
repd
symbol
(
identifier
i
symbol
,
symbol
(
keyword
int
symbol
)
identifier
s
symbol
.
identifier
size
symbol
(
symbol
)
symbol
-
integerConstant
1
symbol
,
integerConstant
0
symbol
)
symbol
{
identifier
NewLine
identifier
val
symbol
=
identifier
val
symbol
.
identifier
left
symbol
(
identifier
quart
symbol
(
identifier
s
symbol
[
identifier
i
symbol
]
symbol
)
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
val
symbol
.
identifier
type
symbol
=
symbol
=
identifier
k
symbol
&
symbol
&
identifier
val
symbol
.
identifier
sign
symbol
=
symbol
=
integerConstant
1
symbol
)
symbol
{
identifier
NewLine
identifier
k
identifier
pos
symbol
=
identifier
i
symbol
;
identifier
NewLine
identifier
break
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
k
identifier
pos
symbol
=
symbol
=
symbol
-
integerConstant
1
symbol
)
identifier
ans
symbol
=
keyword
false
symbol
;
identifier
NewLine
identifier
NewLine
identifier
ll
identifier
rk
identifier
pos
symbol
=
symbol
(
identifier
ll
symbol
)
identifier
s
symbol
.
identifier
size
symbol
(
symbol
)
symbol
-
identifier
k
identifier
pos
symbol
-
integerConstant
1
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
i
identifier
pos
symbol
>
symbol
=
identifier
x
symbol
*
identifier
l
symbol
-
identifier
rk
identifier
pos
symbol
-
integerConstant
1
symbol
)
identifier
NewLine
identifier
ans
symbol
=
keyword
false
symbol
;
identifier
NewLine
identifier
NewLine
identifier
cout
symbol
<
symbol
<
stringConstant
Case #
symbol
<
symbol
<
symbol
+
integerConstant
1
symbol
<
symbol
<
stringConstant
: 
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
ans
symbol
)
identifier
cout
symbol
<
symbol
<
stringConstant
YES
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
keyword
else
identifier
cout
symbol
<
symbol
<
stringConstant
NO
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/Ragnar.0.cpp file...

identifier
include
symbol
<
identifier
iostream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
numeric
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
iterator
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
vector
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
algorithm
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
set
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
map
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
queue
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
bitset
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
stack
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
string
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
sstream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
math
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
NewLine
identifier
define
identifier
REP
symbol
(
identifier
i
symbol
,
identifier
n
symbol
)
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
symbol
(
identifier
n
symbol
)
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
define
identifier
ITER
symbol
(
identifier
i
symbol
,
identifier
v
symbol
)
identifier
for
symbol
(
identifier
auto
identifier
i
identifier
v
symbol
)
identifier
NewLine
identifier
define
identifier
INF
integerConstant
1000000000
identifier
NewLine
identifier
define
identifier
F
symbol
(
identifier
v
symbol
)
symbol
(
identifier
v
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
,
symbol
(
identifier
v
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
identifier
NewLine
identifier
ifdef
identifier
DEBUG
identifier
NewLine
identifier
const
identifier
bool
identifier
DEBUG
symbol
=
keyword
true
symbol
;
identifier
NewLine
keyword
else
identifier
NewLine
identifier
const
identifier
bool
identifier
DEBUG
symbol
=
keyword
false
symbol
;
identifier
NewLine
identifier
endif
identifier
NewLine
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
identifier
template
symbol
<
keyword
class
identifier
T
symbol
>
identifier
NewLine
identifier
using
identifier
priority
identifier
queue
identifier
asc
symbol
=
identifier
priority
identifier
queue
symbol
<
identifier
T
symbol
,
identifier
vector
symbol
<
identifier
T
symbol
>
symbol
,
identifier
greater
symbol
<
identifier
T
symbol
>
symbol
>
symbol
;
identifier
NewLine
identifier
typedef
identifier
long
identifier
long
identifier
ll
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
keyword
int
symbol
>
identifier
vi
symbol
;
identifier
NewLine
identifier
typedef
identifier
pair
symbol
<
keyword
int
symbol
,
keyword
int
symbol
>
identifier
ii
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
identifier
ii
symbol
>
identifier
vii
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
identifier
vi
symbol
>
identifier
vvi
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
identifier
vii
symbol
>
identifier
vvii
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
identifier
bool
symbol
>
identifier
vb
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
symbol
{
identifier
NewLine
identifier
ios
identifier
base
identifier
sync
identifier
with
identifier
stdio
symbol
(
keyword
false
symbol
)
symbol
;
identifier
cin
symbol
.
identifier
tie
symbol
(
integerConstant
0
symbol
)
symbol
;
identifier
NewLine
keyword
int
identifier
T
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
T
symbol
;
identifier
NewLine
identifier
REP
symbol
(
identifier
i
symbol
,
identifier
T
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
ans
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
keyword
int
identifier
S
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
S
symbol
;
identifier
NewLine
keyword
int
identifier
sum
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
REP
symbol
(
identifier
j
symbol
,
identifier
S
symbol
+
integerConstant
1
symbol
)
symbol
{
identifier
NewLine
keyword
char
identifier
c
symbol
;
identifier
cin
symbol
>
symbol
>
identifier
c
symbol
;
identifier
c
symbol
-
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
c
symbol
>
integerConstant
0
symbol
&
symbol
&
identifier
sum
symbol
<
identifier
j
symbol
)
symbol
{
identifier
NewLine
identifier
ans
symbol
+
symbol
=
identifier
j
symbol
-
identifier
sum
symbol
;
identifier
NewLine
identifier
sum
symbol
=
identifier
j
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
sum
symbol
+
symbol
=
identifier
c
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
cout
symbol
<
symbol
<
stringConstant
Case #
symbol
<
symbol
<
identifier
i
symbol
+
integerConstant
1
symbol
<
symbol
<
stringConstant
: 
symbol
<
symbol
<
identifier
ans
symbol
<
symbol
<
stringConstant
\n
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/Ragnar.1.cpp file...

identifier
include
symbol
<
identifier
iostream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
numeric
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
iterator
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
vector
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
algorithm
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
set
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
map
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
queue
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
bitset
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
stack
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
string
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
sstream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
math
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
NewLine
identifier
define
identifier
REP
symbol
(
identifier
i
symbol
,
identifier
n
symbol
)
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
symbol
(
identifier
n
symbol
)
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
define
identifier
ITER
symbol
(
identifier
i
symbol
,
identifier
v
symbol
)
identifier
for
symbol
(
identifier
auto
identifier
i
identifier
v
symbol
)
identifier
NewLine
identifier
define
identifier
INF
integerConstant
1000000000
identifier
NewLine
identifier
define
identifier
F
symbol
(
identifier
v
symbol
)
symbol
(
identifier
v
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
,
symbol
(
identifier
v
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
identifier
NewLine
identifier
ifdef
identifier
DEBUG
identifier
NewLine
identifier
const
identifier
bool
identifier
DEBUG
symbol
=
keyword
true
symbol
;
identifier
NewLine
keyword
else
identifier
NewLine
identifier
const
identifier
bool
identifier
DEBUG
symbol
=
keyword
false
symbol
;
identifier
NewLine
identifier
endif
identifier
NewLine
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
identifier
template
symbol
<
keyword
class
identifier
T
symbol
>
identifier
NewLine
identifier
using
identifier
priority
identifier
queue
identifier
asc
symbol
=
identifier
priority
identifier
queue
symbol
<
identifier
T
symbol
,
identifier
vector
symbol
<
identifier
T
symbol
>
symbol
,
identifier
greater
symbol
<
identifier
T
symbol
>
symbol
>
symbol
;
identifier
NewLine
identifier
typedef
identifier
long
identifier
long
identifier
ll
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
keyword
int
symbol
>
identifier
vi
symbol
;
identifier
NewLine
identifier
typedef
identifier
pair
symbol
<
keyword
int
symbol
,
keyword
int
symbol
>
identifier
ii
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
identifier
ii
symbol
>
identifier
vii
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
identifier
vi
symbol
>
identifier
vvi
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
identifier
vii
symbol
>
identifier
vvii
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
identifier
bool
symbol
>
identifier
vb
symbol
;
identifier
NewLine
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
symbol
{
identifier
NewLine
identifier
ios
identifier
base
identifier
sync
identifier
with
identifier
stdio
symbol
(
keyword
false
symbol
)
symbol
;
identifier
cin
symbol
.
identifier
tie
symbol
(
integerConstant
0
symbol
)
symbol
;
identifier
NewLine
keyword
int
identifier
TC
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
TC
symbol
;
identifier
NewLine
identifier
REP
symbol
(
identifier
tc
symbol
,
identifier
TC
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
N
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
N
symbol
;
identifier
NewLine
identifier
vi
identifier
p
symbol
(
identifier
N
symbol
)
symbol
;
identifier
NewLine
identifier
REP
symbol
(
identifier
i
symbol
,
identifier
N
symbol
)
identifier
cin
symbol
>
symbol
>
identifier
p
symbol
[
identifier
i
symbol
]
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
mintime
symbol
=
symbol
*
identifier
max
identifier
element
symbol
(
identifier
F
symbol
(
identifier
p
symbol
)
symbol
)
symbol
;
identifier
for
symbol
(
keyword
int
identifier
target
symbol
=
integerConstant
1
symbol
;
identifier
target
symbol
<
identifier
mintime
symbol
;
identifier
target
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
splits
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
REP
symbol
(
identifier
i
symbol
,
identifier
N
symbol
)
identifier
splits
symbol
+
symbol
=
symbol
(
identifier
p
symbol
[
identifier
i
symbol
]
symbol
-
integerConstant
1
symbol
)
symbol
/
identifier
target
symbol
;
identifier
NewLine
identifier
mintime
symbol
=
identifier
min
symbol
(
identifier
mintime
symbol
,
identifier
target
symbol
+
identifier
splits
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
cout
symbol
<
symbol
<
stringConstant
Case #
symbol
<
symbol
<
identifier
tc
symbol
+
integerConstant
1
symbol
<
symbol
<
stringConstant
: 
symbol
<
symbol
<
identifier
mintime
symbol
<
symbol
<
stringConstant
\n
symbol
;
identifier
NewLine
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/Ragnar.2.cpp file...

identifier
include
symbol
<
identifier
iostream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
numeric
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
iterator
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
vector
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
algorithm
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
set
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
map
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
queue
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
bitset
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
stack
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
string
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
sstream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
math
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
NewLine
identifier
define
identifier
REP
symbol
(
identifier
i
symbol
,
identifier
n
symbol
)
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
symbol
(
identifier
n
symbol
)
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
define
identifier
ITER
symbol
(
identifier
i
symbol
,
identifier
v
symbol
)
identifier
for
symbol
(
identifier
auto
identifier
i
identifier
v
symbol
)
identifier
NewLine
identifier
define
identifier
INF
integerConstant
1000000000
identifier
NewLine
identifier
define
identifier
F
symbol
(
identifier
v
symbol
)
symbol
(
identifier
v
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
,
symbol
(
identifier
v
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
identifier
NewLine
identifier
ifdef
identifier
DEBUG
identifier
NewLine
identifier
const
identifier
bool
identifier
DEBUG
symbol
=
keyword
true
symbol
;
identifier
NewLine
keyword
else
identifier
NewLine
identifier
const
identifier
bool
identifier
DEBUG
symbol
=
keyword
false
symbol
;
identifier
NewLine
identifier
endif
identifier
NewLine
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
identifier
template
symbol
<
keyword
class
identifier
T
symbol
>
identifier
NewLine
identifier
using
identifier
priority
identifier
queue
identifier
asc
symbol
=
identifier
priority
identifier
queue
symbol
<
identifier
T
symbol
,
identifier
vector
symbol
<
identifier
T
symbol
>
symbol
,
identifier
greater
symbol
<
identifier
T
symbol
>
symbol
>
symbol
;
identifier
NewLine
identifier
typedef
identifier
long
identifier
long
identifier
ll
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
keyword
int
symbol
>
identifier
vi
symbol
;
identifier
NewLine
identifier
typedef
identifier
pair
symbol
<
keyword
int
symbol
,
keyword
int
symbol
>
identifier
ii
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
identifier
ii
symbol
>
identifier
vii
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
identifier
vi
symbol
>
identifier
vvi
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
identifier
vii
symbol
>
identifier
vvii
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
identifier
bool
symbol
>
identifier
vb
symbol
;
identifier
NewLine
identifier
NewLine
identifier
array
symbol
<
identifier
array
symbol
<
keyword
int
symbol
,
integerConstant
4
symbol
>
symbol
,
integerConstant
4
symbol
>
identifier
mult
symbol
{
symbol
{
identifier
NewLine
symbol
{
symbol
{
integerConstant
0
symbol
,
integerConstant
1
symbol
,
integerConstant
2
symbol
,
integerConstant
3
symbol
}
symbol
}
symbol
,
identifier
NewLine
symbol
{
symbol
{
integerConstant
1
symbol
,
integerConstant
4
symbol
,
integerConstant
3
symbol
,
integerConstant
6
symbol
}
symbol
}
symbol
,
identifier
NewLine
symbol
{
symbol
{
integerConstant
2
symbol
,
integerConstant
7
symbol
,
integerConstant
4
symbol
,
integerConstant
1
symbol
}
symbol
}
symbol
,
identifier
NewLine
symbol
{
symbol
{
integerConstant
3
symbol
,
integerConstant
2
symbol
,
integerConstant
5
symbol
,
integerConstant
4
symbol
}
symbol
}
identifier
NewLine
symbol
}
symbol
}
symbol
;
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
struct
identifier
quad
symbol
{
identifier
NewLine
keyword
int
identifier
v
symbol
;
identifier
quad
identifier
operator
symbol
*
symbol
(
identifier
quad
identifier
r
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
q
symbol
=
identifier
mult
symbol
[
identifier
v
symbol
&
integerConstant
3
symbol
]
symbol
[
identifier
r
symbol
.
identifier
v
symbol
&
integerConstant
3
symbol
]
symbol
;
identifier
NewLine
identifier
q
symbol
=
symbol
(
identifier
v
identifier
r
symbol
.
identifier
v
symbol
)
symbol
&
integerConstant
4
symbol
;
identifier
NewLine
keyword
return
symbol
{
identifier
q
symbol
}
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
quad
symbol
(
keyword
char
identifier
c
symbol
)
symbol
{
identifier
NewLine
identifier
v
symbol
=
identifier
c
symbol
-
identifier
h
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
quad
symbol
(
keyword
int
identifier
i
symbol
)
identifier
v
symbol
(
identifier
i
symbol
)
symbol
{
symbol
}
identifier
NewLine
identifier
quad
symbol
(
symbol
)
identifier
v
symbol
(
integerConstant
0
symbol
)
symbol
{
symbol
}
identifier
NewLine
identifier
NewLine
symbol
}
symbol
;
identifier
NewLine
identifier
NewLine
identifier
const
identifier
quad
identifier
target
symbol
=
identifier
quad
symbol
(
identifier
i
symbol
)
symbol
*
identifier
quad
symbol
(
identifier
j
symbol
)
symbol
*
identifier
quad
symbol
(
identifier
k
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
TC
symbol
;
identifier
cin
symbol
>
symbol
>
identifier
TC
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
tc
symbol
=
integerConstant
1
symbol
;
identifier
tc
symbol
<
symbol
=
identifier
TC
symbol
;
identifier
tc
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
ll
identifier
L
symbol
,
identifier
X
symbol
;
identifier
cin
symbol
>
symbol
>
identifier
L
symbol
>
symbol
>
identifier
X
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
X
symbol
>
symbol
=
integerConstant
12
symbol
)
symbol
{
identifier
NewLine
identifier
X
symbol
=
symbol
(
identifier
X
integerConstant
12
symbol
)
symbol
+
integerConstant
12
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
vector
symbol
<
identifier
quad
symbol
>
identifier
l
symbol
(
identifier
L
symbol
)
symbol
;
identifier
NewLine
identifier
REP
symbol
(
identifier
i
symbol
,
identifier
L
symbol
)
symbol
{
identifier
NewLine
keyword
char
identifier
c
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
c
symbol
;
identifier
NewLine
identifier
l
symbol
[
identifier
i
symbol
]
symbol
=
identifier
quad
symbol
(
identifier
c
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
quad
identifier
curtarget
symbol
(
integerConstant
1
symbol
)
symbol
;
identifier
quad
identifier
cur
symbol
(
integerConstant
0
symbol
)
symbol
;
identifier
NewLine
identifier
REP
symbol
(
identifier
x
symbol
,
identifier
X
symbol
)
symbol
{
identifier
NewLine
identifier
REP
symbol
(
identifier
i
symbol
,
identifier
L
symbol
)
symbol
{
identifier
NewLine
identifier
cur
symbol
=
identifier
cur
symbol
*
identifier
l
symbol
[
identifier
i
symbol
]
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
cur
symbol
.
identifier
v
symbol
=
symbol
=
identifier
curtarget
symbol
.
identifier
v
symbol
&
symbol
&
identifier
curtarget
symbol
.
identifier
v
symbol
=
integerConstant
3
symbol
)
symbol
{
identifier
NewLine
identifier
curtarget
symbol
.
identifier
v
symbol
+
symbol
+
symbol
;
identifier
NewLine
identifier
cur
symbol
.
identifier
v
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
bool
identifier
ans
symbol
=
identifier
curtarget
symbol
.
identifier
v
symbol
=
symbol
=
integerConstant
3
symbol
&
symbol
&
identifier
cur
symbol
.
identifier
v
symbol
=
symbol
=
integerConstant
3
symbol
;
identifier
NewLine
identifier
cout
symbol
<
symbol
<
stringConstant
Case #
symbol
<
symbol
<
identifier
tc
symbol
<
symbol
<
stringConstant
: 
symbol
<
symbol
<
symbol
(
identifier
ans
stringConstant
YES
stringConstant
NO
symbol
)
symbol
<
symbol
<
stringConstant
 \n
symbol
;
identifier
NewLine
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/saffah.0.cpp file...

identifier
include
symbol
<
identifier
cstdio
symbol
>
identifier
NewLine
identifier
define
identifier
f
symbol
(
identifier
x
symbol
,
identifier
y
symbol
,
identifier
z
symbol
)
identifier
for
symbol
(
keyword
int
identifier
x
symbol
=
symbol
(
identifier
y
symbol
)
symbol
;
identifier
x
symbol
<
symbol
=
symbol
(
identifier
z
symbol
)
symbol
;
symbol
+
symbol
+
identifier
x
symbol
)
identifier
NewLine
identifier
NewLine
keyword
char
identifier
a
symbol
[
integerConstant
233333
symbol
]
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
T
symbol
;
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
T
symbol
)
symbol
;
identifier
NewLine
identifier
f
symbol
(
symbol
,
integerConstant
1
symbol
,
identifier
T
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
n
symbol
;
identifier
scanf
symbol
(
stringConstant
%d%s
symbol
,
symbol
&
identifier
n
symbol
,
identifier
a
symbol
+
integerConstant
1
symbol
)
symbol
;
identifier
NewLine
keyword
int
identifier
s
symbol
=
integerConstant
0
symbol
,
identifier
ans
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
f
symbol
(
identifier
i
symbol
,
integerConstant
1
symbol
,
identifier
n
symbol
)
symbol
{
identifier
NewLine
identifier
s
symbol
+
symbol
=
symbol
(
identifier
a
symbol
[
identifier
i
symbol
]
symbol
-
integerConstant
0
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
s
symbol
<
identifier
i
symbol
)
symbol
{
identifier
NewLine
identifier
ans
symbol
+
symbol
=
identifier
i
symbol
-
identifier
s
symbol
;
identifier
s
symbol
=
identifier
i
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: %d\n
symbol
,
symbol
,
identifier
ans
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/saffah.1.cpp file...

identifier
include
symbol
<
identifier
cstdio
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
algorithm
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstring
symbol
>
identifier
NewLine
identifier
define
identifier
f
symbol
(
identifier
x
symbol
,
identifier
y
symbol
,
identifier
z
symbol
)
identifier
for
symbol
(
keyword
int
identifier
x
symbol
=
symbol
(
identifier
y
symbol
)
symbol
;
identifier
x
symbol
<
symbol
=
symbol
(
identifier
z
symbol
)
symbol
;
symbol
+
symbol
+
identifier
x
symbol
)
identifier
NewLine
identifier
NewLine
keyword
int
identifier
n
symbol
,
identifier
a
symbol
[
integerConstant
1007
symbol
]
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
T
symbol
;
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
T
symbol
)
symbol
;
identifier
NewLine
identifier
f
symbol
(
symbol
,
integerConstant
1
symbol
,
identifier
T
symbol
)
symbol
{
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
n
symbol
)
symbol
;
identifier
NewLine
identifier
f
symbol
(
identifier
i
symbol
,
integerConstant
1
symbol
,
identifier
n
symbol
)
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
identifier
a
symbol
+
identifier
i
symbol
)
symbol
;
identifier
NewLine
keyword
int
identifier
ans
symbol
=
integerConstant
2333333
symbol
;
identifier
NewLine
identifier
f
symbol
(
identifier
j
symbol
,
integerConstant
1
symbol
,
integerConstant
1000
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
cans
symbol
=
identifier
j
symbol
;
identifier
NewLine
identifier
f
symbol
(
identifier
i
symbol
,
integerConstant
1
symbol
,
identifier
n
symbol
)
identifier
cans
symbol
+
symbol
=
symbol
(
identifier
a
symbol
[
identifier
i
symbol
]
symbol
-
integerConstant
1
symbol
)
symbol
/
identifier
j
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
cans
symbol
<
identifier
ans
symbol
)
identifier
ans
symbol
=
identifier
cans
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: %d\n
symbol
,
symbol
,
identifier
ans
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/saffah.2.cpp file...

identifier
include
symbol
<
identifier
cstdio
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
algorithm
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstring
symbol
>
identifier
NewLine
identifier
define
identifier
f
symbol
(
identifier
x
symbol
,
identifier
y
symbol
,
identifier
z
symbol
)
identifier
for
symbol
(
keyword
int
identifier
x
symbol
=
symbol
(
identifier
y
symbol
)
symbol
;
identifier
x
symbol
<
symbol
=
symbol
(
identifier
z
symbol
)
symbol
;
symbol
+
symbol
+
identifier
x
symbol
)
identifier
NewLine
identifier
define
identifier
g
symbol
(
identifier
x
symbol
,
identifier
y
symbol
,
identifier
z
symbol
)
identifier
for
symbol
(
keyword
int
identifier
x
symbol
=
symbol
(
identifier
y
symbol
)
symbol
;
identifier
x
symbol
<
symbol
(
identifier
z
symbol
)
symbol
;
symbol
+
symbol
+
identifier
x
symbol
)
identifier
NewLine
identifier
define
identifier
h
symbol
(
identifier
x
symbol
,
identifier
y
symbol
,
identifier
z
symbol
)
identifier
for
symbol
(
keyword
int
identifier
x
symbol
=
symbol
(
identifier
y
symbol
)
symbol
;
identifier
x
symbol
>
symbol
=
symbol
(
identifier
z
symbol
)
symbol
;
symbol
-
symbol
-
identifier
x
symbol
)
identifier
NewLine
identifier
NewLine
identifier
typedef
identifier
long
identifier
long
identifier
LL
symbol
;
identifier
NewLine
identifier
struct
identifier
num
symbol
{
identifier
NewLine
keyword
char
identifier
ch
symbol
,
identifier
neg
symbol
;
identifier
NewLine
symbol
}
symbol
;
identifier
NewLine
identifier
num
identifier
mul
symbol
[
integerConstant
256
symbol
]
symbol
[
integerConstant
256
symbol
]
symbol
,
identifier
ONE
symbol
,
identifier
I
symbol
,
identifier
J
symbol
,
identifier
K
symbol
,
identifier
IJK
symbol
;
identifier
NewLine
identifier
NewLine
identifier
inline
identifier
num
identifier
operator
symbol
*
symbol
(
identifier
num
identifier
x
symbol
,
identifier
num
identifier
y
symbol
)
symbol
{
identifier
NewLine
identifier
num
identifier
tmp
symbol
=
identifier
mul
symbol
[
identifier
x
symbol
.
identifier
ch
symbol
]
symbol
[
identifier
y
symbol
.
identifier
ch
symbol
]
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
x
symbol
.
identifier
neg
symbol
=
identifier
y
symbol
.
identifier
neg
symbol
)
identifier
tmp
symbol
.
identifier
neg
symbol
=
identifier
tmp
symbol
.
identifier
neg
symbol
;
identifier
NewLine
keyword
return
identifier
tmp
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
inline
identifier
bool
identifier
operator
symbol
=
symbol
=
symbol
(
identifier
num
identifier
x
symbol
,
identifier
num
identifier
y
symbol
)
symbol
{
identifier
NewLine
keyword
return
identifier
x
symbol
.
identifier
ch
symbol
=
symbol
=
identifier
y
symbol
.
identifier
ch
symbol
&
symbol
&
identifier
x
symbol
.
identifier
neg
symbol
=
symbol
=
identifier
y
symbol
.
identifier
neg
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
inline
identifier
bool
identifier
operator
symbol
=
symbol
(
identifier
num
identifier
x
symbol
,
identifier
num
identifier
y
symbol
)
symbol
{
identifier
NewLine
keyword
return
identifier
x
symbol
.
identifier
ch
symbol
=
identifier
y
symbol
.
identifier
ch
symbol
|
symbol
|
identifier
x
symbol
.
identifier
neg
symbol
=
identifier
y
symbol
.
identifier
neg
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
inline
keyword
void
identifier
num
identifier
init
symbol
(
symbol
)
symbol
{
identifier
NewLine
identifier
mul
symbol
[
integerConstant
1
symbol
]
symbol
[
integerConstant
1
symbol
]
symbol
=
symbol
(
identifier
num
symbol
)
symbol
{
integerConstant
1
symbol
,
integerConstant
0
symbol
}
symbol
;
identifier
NewLine
identifier
mul
symbol
[
integerConstant
1
symbol
]
symbol
[
identifier
i
symbol
]
symbol
=
symbol
(
identifier
num
symbol
)
symbol
{
identifier
i
symbol
,
integerConstant
0
symbol
}
symbol
;
identifier
NewLine
identifier
mul
symbol
[
integerConstant
1
symbol
]
symbol
[
identifier
j
symbol
]
symbol
=
symbol
(
identifier
num
symbol
)
symbol
{
identifier
j
symbol
,
integerConstant
0
symbol
}
symbol
;
identifier
NewLine
identifier
mul
symbol
[
integerConstant
1
symbol
]
symbol
[
identifier
k
symbol
]
symbol
=
symbol
(
identifier
num
symbol
)
symbol
{
identifier
k
symbol
,
integerConstant
0
symbol
}
symbol
;
identifier
NewLine
identifier
NewLine
identifier
mul
symbol
[
identifier
i
symbol
]
symbol
[
integerConstant
1
symbol
]
symbol
=
symbol
(
identifier
num
symbol
)
symbol
{
identifier
i
symbol
,
integerConstant
0
symbol
}
symbol
;
identifier
NewLine
identifier
mul
symbol
[
identifier
i
symbol
]
symbol
[
identifier
i
symbol
]
symbol
=
symbol
(
identifier
num
symbol
)
symbol
{
integerConstant
1
symbol
,
integerConstant
1
symbol
}
symbol
;
identifier
NewLine
identifier
mul
symbol
[
identifier
i
symbol
]
symbol
[
identifier
j
symbol
]
symbol
=
symbol
(
identifier
num
symbol
)
symbol
{
identifier
k
symbol
,
integerConstant
0
symbol
}
symbol
;
identifier
NewLine
identifier
mul
symbol
[
identifier
i
symbol
]
symbol
[
identifier
k
symbol
]
symbol
=
symbol
(
identifier
num
symbol
)
symbol
{
identifier
j
symbol
,
integerConstant
1
symbol
}
symbol
;
identifier
NewLine
identifier
NewLine
identifier
mul
symbol
[
identifier
j
symbol
]
symbol
[
integerConstant
1
symbol
]
symbol
=
symbol
(
identifier
num
symbol
)
symbol
{
identifier
j
symbol
,
integerConstant
0
symbol
}
symbol
;
identifier
NewLine
identifier
mul
symbol
[
identifier
j
symbol
]
symbol
[
identifier
i
symbol
]
symbol
=
symbol
(
identifier
num
symbol
)
symbol
{
identifier
k
symbol
,
integerConstant
1
symbol
}
symbol
;
identifier
NewLine
identifier
mul
symbol
[
identifier
j
symbol
]
symbol
[
identifier
j
symbol
]
symbol
=
symbol
(
identifier
num
symbol
)
symbol
{
integerConstant
1
symbol
,
integerConstant
1
symbol
}
symbol
;
identifier
NewLine
identifier
mul
symbol
[
identifier
j
symbol
]
symbol
[
identifier
k
symbol
]
symbol
=
symbol
(
identifier
num
symbol
)
symbol
{
identifier
i
symbol
,
integerConstant
0
symbol
}
symbol
;
identifier
NewLine
identifier
NewLine
identifier
mul
symbol
[
identifier
k
symbol
]
symbol
[
integerConstant
1
symbol
]
symbol
=
symbol
(
identifier
num
symbol
)
symbol
{
identifier
k
symbol
,
integerConstant
0
symbol
}
symbol
;
identifier
NewLine
identifier
mul
symbol
[
identifier
k
symbol
]
symbol
[
identifier
i
symbol
]
symbol
=
symbol
(
identifier
num
symbol
)
symbol
{
identifier
j
symbol
,
integerConstant
0
symbol
}
symbol
;
identifier
NewLine
identifier
mul
symbol
[
identifier
k
symbol
]
symbol
[
identifier
j
symbol
]
symbol
=
symbol
(
identifier
num
symbol
)
symbol
{
identifier
i
symbol
,
integerConstant
1
symbol
}
symbol
;
identifier
NewLine
identifier
mul
symbol
[
identifier
k
symbol
]
symbol
[
identifier
k
symbol
]
symbol
=
symbol
(
identifier
num
symbol
)
symbol
{
integerConstant
1
symbol
,
integerConstant
1
symbol
}
symbol
;
identifier
NewLine
identifier
NewLine
identifier
ONE
symbol
=
symbol
(
identifier
num
symbol
)
symbol
{
integerConstant
1
symbol
,
integerConstant
0
symbol
}
symbol
;
identifier
NewLine
identifier
I
symbol
=
symbol
(
identifier
num
symbol
)
symbol
{
identifier
i
symbol
,
integerConstant
0
symbol
}
symbol
;
identifier
NewLine
identifier
J
symbol
=
symbol
(
identifier
num
symbol
)
symbol
{
identifier
j
symbol
,
integerConstant
0
symbol
}
symbol
;
identifier
NewLine
identifier
K
symbol
=
symbol
(
identifier
num
symbol
)
symbol
{
identifier
k
symbol
,
integerConstant
0
symbol
}
symbol
;
identifier
NewLine
identifier
IJK
symbol
=
identifier
I
symbol
*
identifier
J
symbol
*
identifier
K
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
inline
keyword
void
identifier
read
symbol
(
identifier
num
symbol
&
identifier
x
symbol
)
symbol
{
identifier
NewLine
keyword
char
identifier
c
symbol
=
identifier
getchar
symbol
(
symbol
)
symbol
;
identifier
NewLine
keyword
while
symbol
(
identifier
c
symbol
=
identifier
i
symbol
&
symbol
&
identifier
c
symbol
=
identifier
j
symbol
&
symbol
&
identifier
c
symbol
=
identifier
k
symbol
)
identifier
c
symbol
=
identifier
getchar
symbol
(
symbol
)
symbol
;
identifier
NewLine
identifier
x
symbol
=
symbol
(
identifier
num
symbol
)
symbol
{
identifier
c
symbol
,
integerConstant
0
symbol
}
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
inline
identifier
num
identifier
pow
symbol
(
identifier
num
identifier
x
symbol
,
identifier
LL
identifier
y
symbol
)
symbol
{
identifier
NewLine
identifier
num
identifier
ans
symbol
=
identifier
ONE
symbol
;
identifier
NewLine
identifier
h
symbol
(
identifier
i
symbol
,
integerConstant
60
symbol
,
integerConstant
0
symbol
)
symbol
{
identifier
NewLine
identifier
ans
symbol
=
identifier
ans
symbol
*
identifier
ans
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
y
symbol
&
symbol
(
integerConstant
1
identifier
LL
symbol
<
symbol
<
identifier
i
symbol
)
symbol
)
identifier
ans
symbol
=
identifier
ans
symbol
*
identifier
x
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
identifier
ans
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
int
identifier
n
symbol
;
identifier
LL
identifier
m
symbol
;
identifier
NewLine
identifier
num
identifier
a
symbol
[
integerConstant
10007
symbol
]
symbol
,
identifier
prod
symbol
[
integerConstant
10007
symbol
]
symbol
,
identifier
succ
symbol
[
integerConstant
10007
symbol
]
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
symbol
{
identifier
NewLine
identifier
num
identifier
init
symbol
(
symbol
)
symbol
;
identifier
NewLine
keyword
int
identifier
T
symbol
;
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
T
symbol
)
symbol
;
identifier
NewLine
identifier
f
symbol
(
symbol
,
integerConstant
1
symbol
,
identifier
T
symbol
)
symbol
{
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d%I64d
symbol
,
symbol
&
identifier
n
symbol
,
symbol
&
identifier
m
symbol
)
symbol
;
identifier
NewLine
identifier
prod
symbol
[
integerConstant
0
symbol
]
symbol
=
identifier
ONE
symbol
;
identifier
NewLine
identifier
f
symbol
(
identifier
i
symbol
,
integerConstant
1
symbol
,
identifier
n
symbol
)
symbol
{
identifier
NewLine
identifier
read
symbol
(
identifier
a
symbol
[
identifier
i
symbol
]
symbol
)
symbol
;
identifier
prod
symbol
[
identifier
i
symbol
]
symbol
=
identifier
prod
symbol
[
identifier
i
symbol
-
integerConstant
1
symbol
]
symbol
*
identifier
a
symbol
[
identifier
i
symbol
]
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
num
identifier
tmp
symbol
=
identifier
pow
symbol
(
identifier
prod
symbol
[
identifier
n
symbol
]
symbol
,
identifier
m
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
tmp
symbol
=
identifier
IJK
symbol
)
symbol
{
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: NO\n
symbol
,
symbol
)
symbol
;
identifier
NewLine
identifier
continue
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
LL
identifier
ans
symbol
=
integerConstant
0
identifier
x1f1f1f1f1f1f1f1fLL
symbol
;
identifier
NewLine
identifier
LL
identifier
a2
symbol
=
identifier
ans
symbol
;
identifier
NewLine
identifier
f
symbol
(
identifier
i
symbol
,
integerConstant
1
symbol
,
identifier
n
symbol
)
symbol
{
identifier
NewLine
identifier
LL
identifier
up
symbol
=
identifier
m
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
up
symbol
>
integerConstant
4
symbol
)
identifier
up
symbol
=
integerConstant
4
symbol
;
identifier
NewLine
identifier
g
symbol
(
identifier
j
symbol
,
integerConstant
0
symbol
,
identifier
up
symbol
)
symbol
{
identifier
NewLine
identifier
num
identifier
c
symbol
=
identifier
pow
symbol
(
identifier
prod
symbol
[
identifier
n
symbol
]
symbol
,
identifier
j
symbol
)
symbol
*
identifier
prod
symbol
[
identifier
i
symbol
]
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
c
symbol
=
symbol
=
identifier
I
symbol
)
symbol
{
identifier
NewLine
identifier
LL
identifier
ca
symbol
=
identifier
i
symbol
+
identifier
j
symbol
*
identifier
n
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
ca
symbol
<
identifier
ans
symbol
)
identifier
ans
symbol
=
identifier
ca
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
succ
symbol
[
identifier
n
symbol
+
integerConstant
1
symbol
]
symbol
=
identifier
ONE
symbol
;
identifier
NewLine
identifier
h
symbol
(
identifier
i
symbol
,
identifier
n
symbol
,
integerConstant
1
symbol
)
identifier
succ
symbol
[
identifier
i
symbol
]
symbol
=
identifier
a
symbol
[
identifier
i
symbol
]
symbol
*
identifier
succ
symbol
[
identifier
i
symbol
+
integerConstant
1
symbol
]
symbol
;
identifier
NewLine
identifier
h
symbol
(
identifier
i
symbol
,
identifier
n
symbol
,
integerConstant
1
symbol
)
symbol
{
identifier
NewLine
identifier
LL
identifier
up
symbol
=
identifier
m
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
up
symbol
>
integerConstant
4
symbol
)
identifier
up
symbol
=
integerConstant
4
symbol
;
identifier
NewLine
identifier
g
symbol
(
identifier
j
symbol
,
integerConstant
0
symbol
,
identifier
up
symbol
)
symbol
{
identifier
NewLine
identifier
num
identifier
c
symbol
=
identifier
succ
symbol
[
identifier
i
symbol
]
symbol
*
identifier
pow
symbol
(
identifier
succ
symbol
[
integerConstant
1
symbol
]
symbol
,
identifier
j
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
c
symbol
=
symbol
=
identifier
K
symbol
)
symbol
{
identifier
NewLine
identifier
LL
identifier
ca
symbol
=
symbol
(
identifier
n
symbol
+
integerConstant
1
symbol
-
identifier
i
symbol
)
symbol
+
identifier
j
symbol
*
identifier
n
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
ca
symbol
<
identifier
a2
symbol
)
identifier
a2
symbol
=
identifier
ca
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
LL
identifier
tl
symbol
=
symbol
(
identifier
LL
symbol
)
identifier
n
symbol
*
identifier
m
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
ans
symbol
+
identifier
a2
symbol
<
identifier
tl
symbol
)
identifier
printf
symbol
(
stringConstant
Case #%d: YES\n
symbol
,
symbol
)
symbol
;
identifier
NewLine
keyword
else
identifier
printf
symbol
(
stringConstant
Case #%d: NO\n
symbol
,
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/SamanSami.0.cpp file...

identifier
include
symbol
<
identifier
bits
symbol
/
identifier
stdc
symbol
+
symbol
+
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
symbol
{
identifier
NewLine
identifier
ios
identifier
sync
identifier
with
identifier
stdio
symbol
(
keyword
false
symbol
)
symbol
;
identifier
NewLine
keyword
int
identifier
T
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
T
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
t
symbol
=
integerConstant
1
symbol
;
identifier
t
symbol
<
symbol
=
identifier
T
symbol
;
identifier
t
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
n
symbol
;
identifier
NewLine
identifier
string
identifier
s
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
n
symbol
>
symbol
>
identifier
s
symbol
;
identifier
NewLine
keyword
int
identifier
cnt
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
keyword
int
identifier
req
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
n
symbol
+
integerConstant
1
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
cnt
symbol
<
identifier
i
symbol
)
symbol
{
identifier
NewLine
identifier
req
symbol
+
symbol
=
identifier
i
symbol
-
identifier
cnt
symbol
;
identifier
NewLine
identifier
cnt
symbol
=
identifier
i
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
cnt
symbol
+
symbol
=
identifier
s
symbol
[
identifier
i
symbol
]
symbol
-
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
cout
symbol
<
symbol
<
stringConstant
Case #
symbol
<
symbol
<
identifier
t
symbol
<
symbol
<
stringConstant
: 
symbol
<
symbol
<
identifier
req
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/SamanSami.1.cpp file...

identifier
include
symbol
<
identifier
bits
symbol
/
identifier
stdc
symbol
+
symbol
+
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
identifier
const
keyword
int
identifier
MAXn
symbol
=
integerConstant
1005
symbol
;
identifier
NewLine
keyword
int
identifier
a
symbol
[
identifier
MAXn
symbol
]
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
symbol
{
identifier
NewLine
identifier
ios
identifier
sync
identifier
with
identifier
stdio
symbol
(
keyword
false
symbol
)
symbol
;
identifier
NewLine
keyword
int
identifier
T
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
T
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
t
symbol
=
integerConstant
1
symbol
;
identifier
t
symbol
<
symbol
=
identifier
T
symbol
;
identifier
t
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
n
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
n
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
n
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
a
symbol
[
identifier
i
symbol
]
symbol
;
identifier
NewLine
keyword
int
identifier
mn
symbol
=
integerConstant
1
identifier
e9
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
1
symbol
;
identifier
i
symbol
<
symbol
=
integerConstant
1000
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
cnt
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
j
symbol
=
integerConstant
0
symbol
;
identifier
j
symbol
<
identifier
n
symbol
;
identifier
j
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
cnt
symbol
+
symbol
=
symbol
(
symbol
(
identifier
a
symbol
[
identifier
j
symbol
]
symbol
+
identifier
i
symbol
-
integerConstant
1
symbol
)
symbol
/
identifier
i
symbol
-
integerConstant
1
symbol
)
symbol
;
identifier
NewLine
identifier
mn
symbol
=
identifier
min
symbol
(
identifier
mn
symbol
,
identifier
cnt
symbol
+
identifier
i
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
cout
symbol
<
symbol
<
stringConstant
Case #
symbol
<
symbol
<
identifier
t
symbol
<
symbol
<
stringConstant
: 
symbol
<
symbol
<
identifier
mn
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/SamanSami.2.cpp file...

identifier
include
symbol
<
identifier
bits
symbol
/
identifier
stdc
symbol
+
symbol
+
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
identifier
typedef
identifier
long
identifier
long
identifier
ll
symbol
;
identifier
NewLine
identifier
NewLine
keyword
char
identifier
next
symbol
(
keyword
char
identifier
c
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
c
symbol
=
symbol
=
identifier
i
symbol
)
identifier
NewLine
keyword
return
identifier
j
symbol
;
identifier
NewLine
keyword
else
keyword
if
symbol
(
identifier
c
symbol
=
symbol
=
identifier
j
symbol
)
identifier
NewLine
keyword
return
identifier
k
symbol
;
identifier
NewLine
keyword
else
identifier
NewLine
keyword
return
identifier
i
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
char
identifier
update
symbol
(
keyword
char
identifier
c
symbol
,
keyword
char
identifier
nx
symbol
,
keyword
int
symbol
&
identifier
sgn
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
c
symbol
=
symbol
=
integerConstant
1
symbol
)
identifier
NewLine
keyword
return
identifier
nx
symbol
;
identifier
NewLine
keyword
else
keyword
if
symbol
(
identifier
nx
symbol
=
symbol
=
integerConstant
1
symbol
)
identifier
NewLine
keyword
return
identifier
c
symbol
;
identifier
NewLine
keyword
else
keyword
if
symbol
(
identifier
next
symbol
(
identifier
c
symbol
)
symbol
=
symbol
=
identifier
nx
symbol
)
symbol
{
identifier
NewLine
keyword
return
identifier
next
symbol
(
identifier
nx
symbol
)
symbol
;
identifier
NewLine
symbol
}
keyword
else
keyword
if
symbol
(
identifier
c
symbol
=
symbol
=
identifier
next
symbol
(
identifier
nx
symbol
)
symbol
)
symbol
{
identifier
NewLine
identifier
sgn
symbol
=
symbol
-
identifier
sgn
symbol
;
identifier
NewLine
keyword
return
identifier
next
symbol
(
identifier
c
symbol
)
symbol
;
identifier
NewLine
symbol
}
keyword
else
symbol
{
identifier
NewLine
identifier
sgn
symbol
=
symbol
-
identifier
sgn
symbol
;
identifier
NewLine
keyword
return
integerConstant
1
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
symbol
{
identifier
NewLine
identifier
ios
identifier
sync
identifier
with
identifier
stdio
symbol
(
keyword
false
symbol
)
symbol
;
identifier
NewLine
keyword
int
identifier
T
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
T
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
t
symbol
=
integerConstant
1
symbol
;
identifier
t
symbol
<
symbol
=
identifier
T
symbol
;
identifier
t
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
cout
symbol
<
symbol
<
stringConstant
Case #
symbol
<
symbol
<
identifier
t
symbol
<
symbol
<
stringConstant
: 
symbol
;
identifier
NewLine
identifier
ll
identifier
n
symbol
,
identifier
x
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
n
symbol
>
symbol
>
identifier
x
symbol
;
identifier
NewLine
identifier
string
identifier
s
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
s
symbol
;
identifier
NewLine
keyword
int
identifier
sgn
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
keyword
char
identifier
c
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
n
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
c
symbol
=
identifier
update
symbol
(
identifier
c
symbol
,
identifier
s
symbol
[
identifier
i
symbol
]
symbol
,
identifier
sgn
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
symbol
(
identifier
c
symbol
=
symbol
=
integerConstant
1
symbol
&
symbol
&
identifier
sgn
symbol
=
symbol
=
symbol
-
integerConstant
1
symbol
&
symbol
&
identifier
x
integerConstant
2
symbol
=
symbol
=
integerConstant
1
symbol
)
symbol
&
symbol
&
symbol
(
identifier
c
symbol
=
integerConstant
1
symbol
&
symbol
&
identifier
x
integerConstant
4
symbol
=
symbol
=
integerConstant
2
symbol
)
symbol
)
symbol
{
identifier
NewLine
identifier
cout
symbol
<
symbol
<
stringConstant
NO
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
identifier
continue
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
int
identifier
cnt
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
identifier
c
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
identifier
sgn
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
symbol
=
integerConstant
0
symbol
;
symbol
<
integerConstant
10
symbol
;
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
n
symbol
;
identifier
i
symbol
+
symbol
+
symbol
,
identifier
cnt
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
c
symbol
=
identifier
update
symbol
(
identifier
c
symbol
,
identifier
s
symbol
[
identifier
i
symbol
]
symbol
,
identifier
sgn
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
c
symbol
=
symbol
=
identifier
i
symbol
&
symbol
&
identifier
sgn
symbol
=
symbol
=
integerConstant
1
symbol
)
identifier
NewLine
identifier
goto
identifier
ext
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
ext
keyword
if
symbol
(
identifier
c
symbol
=
identifier
i
symbol
|
symbol
|
identifier
sgn
symbol
=
integerConstant
1
symbol
)
symbol
{
identifier
NewLine
identifier
cout
symbol
<
symbol
<
stringConstant
NO
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
identifier
continue
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
int
identifier
cnt2
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
identifier
c
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
identifier
sgn
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
symbol
=
integerConstant
0
symbol
;
symbol
<
integerConstant
10
symbol
;
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
identifier
n
symbol
-
integerConstant
1
symbol
;
identifier
i
symbol
>
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
-
symbol
-
symbol
,
identifier
cnt2
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
c
symbol
=
identifier
update
symbol
(
identifier
s
symbol
[
identifier
i
symbol
]
symbol
,
identifier
c
symbol
,
identifier
sgn
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
c
symbol
=
symbol
=
identifier
k
symbol
&
symbol
&
identifier
sgn
symbol
=
symbol
=
integerConstant
1
symbol
)
identifier
NewLine
identifier
goto
identifier
ext2
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
ext2
keyword
if
symbol
(
identifier
c
symbol
=
identifier
k
symbol
|
symbol
|
identifier
sgn
symbol
=
integerConstant
1
symbol
)
symbol
{
identifier
NewLine
identifier
cout
symbol
<
symbol
<
stringConstant
NO
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
identifier
continue
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
cnt
symbol
+
identifier
cnt2
symbol
<
identifier
x
symbol
*
identifier
n
symbol
)
identifier
NewLine
identifier
cout
symbol
<
symbol
<
stringConstant
YES
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
keyword
else
identifier
NewLine
identifier
cout
symbol
<
symbol
<
stringConstant
NO
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/Savlik.0.cpp file...

identifier
define
identifier
CRT
identifier
SECURE
identifier
NO
identifier
WARNINGS
identifier
NewLine
identifier
NewLine
identifier
include
symbol
<
identifier
vector
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
list
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
map
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
set
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
deque
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
stack
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
bitset
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
algorithm
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
functional
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
numeric
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
utility
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
sstream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
iostream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
iomanip
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstdio
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cmath
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstdlib
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
ctime
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
fstream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
queue
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstring
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
string
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
complex
symbol
>
identifier
NewLine
identifier
NewLine
identifier
define
identifier
vi
identifier
vector
symbol
<
keyword
int
symbol
>
identifier
NewLine
identifier
define
identifier
vpii
identifier
vector
symbol
<
identifier
pair
symbol
<
keyword
int
symbol
,
keyword
int
symbol
>
symbol
>
identifier
NewLine
identifier
define
identifier
pii
identifier
pair
symbol
<
keyword
int
symbol
,
keyword
int
symbol
>
identifier
NewLine
identifier
define
identifier
mp
symbol
(
identifier
x
symbol
,
identifier
y
symbol
)
identifier
make
identifier
pair
symbol
(
identifier
x
symbol
,
identifier
y
symbol
)
identifier
NewLine
identifier
define
identifier
all
symbol
(
identifier
x
symbol
)
symbol
(
identifier
x
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
,
symbol
(
identifier
x
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
identifier
NewLine
identifier
define
identifier
FOREACH
symbol
(
identifier
it
symbol
,
identifier
x
symbol
)
identifier
for
symbol
(
identifier
auto
identifier
it
symbol
=
symbol
(
identifier
x
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
;
identifier
it
symbol
=
symbol
(
identifier
x
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
symbol
;
symbol
+
symbol
+
identifier
it
symbol
)
identifier
NewLine
identifier
define
identifier
sz
symbol
(
identifier
x
symbol
)
symbol
(
keyword
int
symbol
)
symbol
(
identifier
x
symbol
)
symbol
.
identifier
size
symbol
(
symbol
)
identifier
NewLine
identifier
define
identifier
FOR
symbol
(
identifier
i
symbol
,
identifier
n
symbol
)
identifier
for
symbol
(
identifier
ll
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
ll
symbol
(
identifier
n
symbol
)
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
define
identifier
REP
symbol
(
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
for
symbol
(
identifier
ll
identifier
i
symbol
=
identifier
a
symbol
;
identifier
i
symbol
<
identifier
ll
symbol
(
identifier
b
symbol
)
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
define
identifier
READ
symbol
(
identifier
a
symbol
)
keyword
int
identifier
a
symbol
;
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
a
symbol
)
symbol
;
identifier
NewLine
identifier
define
identifier
READV
symbol
(
identifier
v
symbol
,
identifier
n
symbol
)
identifier
vi
identifier
v
symbol
(
identifier
n
symbol
)
symbol
;
identifier
FOR
symbol
(
identifier
i
symbol
,
identifier
n
symbol
)
symbol
{
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
v
symbol
[
identifier
i
symbol
]
symbol
)
symbol
;
symbol
}
identifier
NewLine
identifier
define
identifier
WRITE
symbol
(
identifier
v
symbol
)
symbol
;
identifier
FOR
symbol
(
identifier
i
symbol
,
identifier
sz
symbol
(
identifier
v
symbol
)
symbol
)
identifier
cout
symbol
<
symbol
<
identifier
v
symbol
[
identifier
i
symbol
]
symbol
<
symbol
<
symbol
;
identifier
cout
identifier
NewLine
identifier
define
identifier
gmin
symbol
(
identifier
a
symbol
,
identifier
b
symbol
)
symbol
{
keyword
if
symbol
(
identifier
b
symbol
<
identifier
a
symbol
)
identifier
a
symbol
=
identifier
b
symbol
;
symbol
}
identifier
NewLine
identifier
define
identifier
gmax
symbol
(
identifier
a
symbol
,
identifier
b
symbol
)
symbol
{
keyword
if
symbol
(
identifier
b
symbol
>
identifier
a
symbol
)
identifier
a
symbol
=
identifier
b
symbol
;
symbol
}
identifier
NewLine
identifier
define
identifier
pb
identifier
push
identifier
back
identifier
NewLine
identifier
define
identifier
ff
identifier
first
identifier
NewLine
identifier
define
identifier
ss
identifier
second
identifier
NewLine
identifier
define
identifier
X
identifier
first
identifier
NewLine
identifier
define
identifier
Y
identifier
second
identifier
NewLine
identifier
define
identifier
oo
integerConstant
2140000000
identifier
ll
identifier
NewLine
identifier
NewLine
identifier
typedef
identifier
long
identifier
long
identifier
ll
symbol
;
identifier
NewLine
identifier
typedef
identifier
unsigned
identifier
long
identifier
long
identifier
ull
symbol
;
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
symbol
{
identifier
NewLine
identifier
READ
symbol
(
identifier
T
symbol
)
symbol
;
identifier
NewLine
identifier
FOR
symbol
(
identifier
t
symbol
,
identifier
T
symbol
)
symbol
{
identifier
NewLine
identifier
READ
symbol
(
identifier
n
symbol
)
symbol
;
identifier
NewLine
keyword
int
identifier
stand
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
keyword
int
identifier
added
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
need
symbol
=
integerConstant
0
symbol
;
identifier
need
symbol
<
symbol
=
identifier
n
symbol
;
identifier
need
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
keyword
char
identifier
c
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
c
symbol
;
identifier
NewLine
keyword
int
identifier
p
symbol
=
identifier
c
symbol
-
integerConstant
0
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
stand
symbol
<
identifier
need
symbol
)
symbol
{
identifier
NewLine
identifier
added
symbol
+
symbol
=
identifier
need
symbol
-
identifier
stand
symbol
;
identifier
NewLine
identifier
stand
symbol
=
identifier
need
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
stand
symbol
+
symbol
=
identifier
p
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
cout
symbol
<
symbol
<
stringConstant
Case #
symbol
<
symbol
<
symbol
(
identifier
t
symbol
+
integerConstant
1
symbol
)
symbol
<
symbol
<
stringConstant
: 
symbol
<
symbol
<
identifier
added
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
symbol
}
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/Savlik.1.cpp file...

identifier
define
identifier
CRT
identifier
SECURE
identifier
NO
identifier
WARNINGS
identifier
NewLine
identifier
NewLine
identifier
include
symbol
<
identifier
vector
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
list
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
map
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
set
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
deque
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
stack
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
bitset
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
algorithm
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
functional
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
numeric
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
utility
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
sstream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
iostream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
iomanip
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstdio
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cmath
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstdlib
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
ctime
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
fstream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
queue
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstring
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
string
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
complex
symbol
>
identifier
NewLine
identifier
NewLine
identifier
define
identifier
vi
identifier
vector
symbol
<
keyword
int
symbol
>
identifier
NewLine
identifier
define
identifier
vpii
identifier
vector
symbol
<
identifier
pair
symbol
<
keyword
int
symbol
,
keyword
int
symbol
>
symbol
>
identifier
NewLine
identifier
define
identifier
pii
identifier
pair
symbol
<
keyword
int
symbol
,
keyword
int
symbol
>
identifier
NewLine
identifier
define
identifier
mp
symbol
(
identifier
x
symbol
,
identifier
y
symbol
)
identifier
make
identifier
pair
symbol
(
identifier
x
symbol
,
identifier
y
symbol
)
identifier
NewLine
identifier
define
identifier
all
symbol
(
identifier
x
symbol
)
symbol
(
identifier
x
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
,
symbol
(
identifier
x
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
identifier
NewLine
identifier
define
identifier
FOREACH
symbol
(
identifier
it
symbol
,
identifier
x
symbol
)
identifier
for
symbol
(
identifier
auto
identifier
it
symbol
=
symbol
(
identifier
x
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
;
identifier
it
symbol
=
symbol
(
identifier
x
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
symbol
;
symbol
+
symbol
+
identifier
it
symbol
)
identifier
NewLine
identifier
define
identifier
sz
symbol
(
identifier
x
symbol
)
symbol
(
keyword
int
symbol
)
symbol
(
identifier
x
symbol
)
symbol
.
identifier
size
symbol
(
symbol
)
identifier
NewLine
identifier
define
identifier
FOR
symbol
(
identifier
i
symbol
,
identifier
n
symbol
)
identifier
for
symbol
(
identifier
ll
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
ll
symbol
(
identifier
n
symbol
)
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
define
identifier
REP
symbol
(
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
for
symbol
(
identifier
ll
identifier
i
symbol
=
identifier
a
symbol
;
identifier
i
symbol
<
identifier
ll
symbol
(
identifier
b
symbol
)
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
define
identifier
READ
symbol
(
identifier
a
symbol
)
keyword
int
identifier
a
symbol
;
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
a
symbol
)
symbol
;
identifier
NewLine
identifier
define
identifier
READV
symbol
(
identifier
v
symbol
,
identifier
n
symbol
)
identifier
vi
identifier
v
symbol
(
identifier
n
symbol
)
symbol
;
identifier
FOR
symbol
(
identifier
i
symbol
,
identifier
n
symbol
)
symbol
{
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
v
symbol
[
identifier
i
symbol
]
symbol
)
symbol
;
symbol
}
identifier
NewLine
identifier
define
identifier
WRITE
symbol
(
identifier
v
symbol
)
symbol
;
identifier
FOR
symbol
(
identifier
i
symbol
,
identifier
sz
symbol
(
identifier
v
symbol
)
symbol
)
identifier
cout
symbol
<
symbol
<
identifier
v
symbol
[
identifier
i
symbol
]
symbol
<
symbol
<
symbol
;
identifier
cout
identifier
NewLine
identifier
define
identifier
gmin
symbol
(
identifier
a
symbol
,
identifier
b
symbol
)
symbol
{
keyword
if
symbol
(
identifier
b
symbol
<
identifier
a
symbol
)
identifier
a
symbol
=
identifier
b
symbol
;
symbol
}
identifier
NewLine
identifier
define
identifier
gmax
symbol
(
identifier
a
symbol
,
identifier
b
symbol
)
symbol
{
keyword
if
symbol
(
identifier
b
symbol
>
identifier
a
symbol
)
identifier
a
symbol
=
identifier
b
symbol
;
symbol
}
identifier
NewLine
identifier
define
identifier
pb
identifier
push
identifier
back
identifier
NewLine
identifier
define
identifier
ff
identifier
first
identifier
NewLine
identifier
define
identifier
ss
identifier
second
identifier
NewLine
identifier
define
identifier
X
identifier
first
identifier
NewLine
identifier
define
identifier
Y
identifier
second
identifier
NewLine
identifier
define
identifier
oo
integerConstant
2140000000
identifier
ll
identifier
NewLine
identifier
NewLine
identifier
typedef
identifier
long
identifier
long
identifier
ll
symbol
;
identifier
NewLine
identifier
typedef
identifier
unsigned
identifier
long
identifier
long
identifier
ull
symbol
;
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
symbol
{
identifier
NewLine
identifier
READ
symbol
(
identifier
T
symbol
)
symbol
;
identifier
NewLine
identifier
FOR
symbol
(
identifier
t
symbol
,
identifier
T
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
res
symbol
=
identifier
oo
symbol
;
identifier
NewLine
identifier
READ
symbol
(
identifier
n
symbol
)
symbol
;
identifier
NewLine
identifier
READV
symbol
(
identifier
v
symbol
,
identifier
n
symbol
)
symbol
;
identifier
NewLine
identifier
REP
symbol
(
identifier
eat
symbol
,
integerConstant
1
symbol
,
integerConstant
1010
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
turns
symbol
=
identifier
eat
symbol
;
identifier
NewLine
identifier
FOR
symbol
(
identifier
i
symbol
,
identifier
n
symbol
)
symbol
{
identifier
NewLine
identifier
turns
symbol
+
symbol
=
symbol
(
identifier
v
symbol
[
identifier
i
symbol
]
symbol
+
identifier
eat
symbol
-
integerConstant
1
symbol
)
symbol
/
identifier
eat
symbol
-
integerConstant
1
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
gmin
symbol
(
identifier
res
symbol
,
identifier
turns
symbol
)
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
cout
symbol
<
symbol
<
stringConstant
Case #
symbol
<
symbol
<
symbol
(
identifier
t
symbol
+
integerConstant
1
symbol
)
symbol
<
symbol
<
stringConstant
: 
symbol
<
symbol
<
identifier
res
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
symbol
}
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/Savlik.2.cpp file...

identifier
define
identifier
CRT
identifier
SECURE
identifier
NO
identifier
WARNINGS
identifier
NewLine
identifier
NewLine
identifier
include
symbol
<
identifier
vector
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
list
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
map
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
set
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
deque
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
stack
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
bitset
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
algorithm
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
functional
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
numeric
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
utility
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
sstream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
iostream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
iomanip
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstdio
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cmath
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstdlib
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
ctime
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
fstream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
queue
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstring
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
string
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
complex
symbol
>
identifier
NewLine
identifier
NewLine
identifier
define
identifier
vi
identifier
vector
symbol
<
keyword
int
symbol
>
identifier
NewLine
identifier
define
identifier
vpii
identifier
vector
symbol
<
identifier
pair
symbol
<
keyword
int
symbol
,
keyword
int
symbol
>
symbol
>
identifier
NewLine
identifier
define
identifier
pii
identifier
pair
symbol
<
keyword
int
symbol
,
keyword
int
symbol
>
identifier
NewLine
identifier
define
identifier
mp
symbol
(
identifier
x
symbol
,
identifier
y
symbol
)
identifier
make
identifier
pair
symbol
(
identifier
x
symbol
,
identifier
y
symbol
)
identifier
NewLine
identifier
define
identifier
all
symbol
(
identifier
x
symbol
)
symbol
(
identifier
x
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
,
symbol
(
identifier
x
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
identifier
NewLine
identifier
define
identifier
FOREACH
symbol
(
identifier
it
symbol
,
identifier
x
symbol
)
identifier
for
symbol
(
identifier
auto
identifier
it
symbol
=
symbol
(
identifier
x
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
;
identifier
it
symbol
=
symbol
(
identifier
x
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
symbol
;
symbol
+
symbol
+
identifier
it
symbol
)
identifier
NewLine
identifier
define
identifier
sz
symbol
(
identifier
x
symbol
)
symbol
(
keyword
int
symbol
)
symbol
(
identifier
x
symbol
)
symbol
.
identifier
size
symbol
(
symbol
)
identifier
NewLine
identifier
define
identifier
FOR
symbol
(
identifier
i
symbol
,
identifier
n
symbol
)
identifier
for
symbol
(
identifier
ll
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
ll
symbol
(
identifier
n
symbol
)
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
define
identifier
REP
symbol
(
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
for
symbol
(
identifier
ll
identifier
i
symbol
=
identifier
a
symbol
;
identifier
i
symbol
<
identifier
ll
symbol
(
identifier
b
symbol
)
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
define
identifier
READ
symbol
(
identifier
a
symbol
)
keyword
int
identifier
a
symbol
;
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
a
symbol
)
symbol
;
identifier
NewLine
identifier
define
identifier
READV
symbol
(
identifier
v
symbol
,
identifier
n
symbol
)
identifier
vi
identifier
v
symbol
(
identifier
n
symbol
)
symbol
;
identifier
FOR
symbol
(
identifier
i
symbol
,
identifier
n
symbol
)
symbol
{
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
v
symbol
[
identifier
i
symbol
]
symbol
)
symbol
;
symbol
}
identifier
NewLine
identifier
define
identifier
WRITE
symbol
(
identifier
v
symbol
)
symbol
;
identifier
FOR
symbol
(
identifier
i
symbol
,
identifier
sz
symbol
(
identifier
v
symbol
)
symbol
)
identifier
cout
symbol
<
symbol
<
identifier
v
symbol
[
identifier
i
symbol
]
symbol
<
symbol
<
symbol
;
identifier
cout
identifier
NewLine
identifier
define
identifier
gmin
symbol
(
identifier
a
symbol
,
identifier
b
symbol
)
symbol
{
keyword
if
symbol
(
identifier
b
symbol
<
identifier
a
symbol
)
identifier
a
symbol
=
identifier
b
symbol
;
symbol
}
identifier
NewLine
identifier
define
identifier
gmax
symbol
(
identifier
a
symbol
,
identifier
b
symbol
)
symbol
{
keyword
if
symbol
(
identifier
b
symbol
>
identifier
a
symbol
)
identifier
a
symbol
=
identifier
b
symbol
;
symbol
}
identifier
NewLine
identifier
define
identifier
pb
identifier
push
identifier
back
identifier
NewLine
identifier
define
identifier
ff
identifier
first
identifier
NewLine
identifier
define
identifier
ss
identifier
second
identifier
NewLine
identifier
define
identifier
X
identifier
first
identifier
NewLine
identifier
define
identifier
Y
identifier
second
identifier
NewLine
identifier
define
identifier
oo
integerConstant
2140000000
identifier
ll
identifier
NewLine
identifier
NewLine
identifier
typedef
identifier
long
identifier
long
identifier
ll
symbol
;
identifier
NewLine
identifier
typedef
identifier
unsigned
identifier
long
identifier
long
identifier
ull
symbol
;
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
struct
identifier
Quat
symbol
{
identifier
NewLine
identifier
public
identifier
NewLine
keyword
int
identifier
h
symbol
,
identifier
i
symbol
,
identifier
j
symbol
,
identifier
k
symbol
;
identifier
NewLine
identifier
NewLine
identifier
Quat
symbol
(
keyword
char
identifier
c
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
c
symbol
=
symbol
=
integerConstant
1
symbol
)
symbol
{
identifier
NewLine
identifier
h
symbol
=
integerConstant
1
symbol
;
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
j
symbol
=
integerConstant
0
symbol
;
identifier
k
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
c
symbol
=
symbol
=
identifier
i
symbol
)
symbol
{
identifier
NewLine
identifier
h
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
=
integerConstant
1
symbol
;
identifier
j
symbol
=
integerConstant
0
symbol
;
identifier
k
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
c
symbol
=
symbol
=
identifier
j
symbol
)
symbol
{
identifier
NewLine
identifier
h
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
j
symbol
=
integerConstant
1
symbol
;
identifier
k
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
c
symbol
=
symbol
=
identifier
k
symbol
)
symbol
{
identifier
NewLine
identifier
h
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
j
symbol
=
integerConstant
0
symbol
;
identifier
k
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
Quat
symbol
(
symbol
)
symbol
{
symbol
}
identifier
NewLine
symbol
}
symbol
;
identifier
NewLine
identifier
NewLine
identifier
bool
identifier
eq
symbol
(
identifier
Quat
identifier
q1
symbol
,
identifier
Quat
identifier
q2
symbol
)
symbol
{
identifier
NewLine
keyword
return
identifier
q1
symbol
.
identifier
h
symbol
=
symbol
=
identifier
q2
symbol
.
identifier
h
symbol
&
symbol
&
identifier
q1
symbol
.
identifier
i
symbol
=
symbol
=
identifier
q2
symbol
.
identifier
i
symbol
&
symbol
&
identifier
q1
symbol
.
identifier
j
symbol
=
symbol
=
identifier
q2
symbol
.
identifier
j
symbol
&
symbol
&
identifier
q1
symbol
.
identifier
k
symbol
=
symbol
=
identifier
q2
symbol
.
identifier
k
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
Quat
identifier
mult
symbol
(
identifier
Quat
identifier
q1
symbol
,
identifier
Quat
identifier
q2
symbol
)
symbol
{
identifier
NewLine
identifier
Quat
identifier
q
symbol
;
identifier
NewLine
identifier
q
symbol
.
identifier
h
symbol
=
identifier
q1
symbol
.
identifier
h
symbol
*
identifier
q2
symbol
.
identifier
h
symbol
-
identifier
q1
symbol
.
identifier
i
symbol
*
identifier
q2
symbol
.
identifier
i
symbol
-
identifier
q1
symbol
.
identifier
j
symbol
*
identifier
q2
symbol
.
identifier
j
symbol
-
identifier
q1
symbol
.
identifier
k
symbol
*
identifier
q2
symbol
.
identifier
k
symbol
;
identifier
NewLine
identifier
q
symbol
.
identifier
i
symbol
=
identifier
q1
symbol
.
identifier
h
symbol
*
identifier
q2
symbol
.
identifier
i
symbol
+
identifier
q1
symbol
.
identifier
i
symbol
*
identifier
q2
symbol
.
identifier
h
symbol
+
identifier
q1
symbol
.
identifier
j
symbol
*
identifier
q2
symbol
.
identifier
k
symbol
-
identifier
q1
symbol
.
identifier
k
symbol
*
identifier
q2
symbol
.
identifier
j
symbol
;
identifier
NewLine
identifier
q
symbol
.
identifier
j
symbol
=
identifier
q1
symbol
.
identifier
h
symbol
*
identifier
q2
symbol
.
identifier
j
symbol
-
identifier
q1
symbol
.
identifier
i
symbol
*
identifier
q2
symbol
.
identifier
k
symbol
+
identifier
q1
symbol
.
identifier
j
symbol
*
identifier
q2
symbol
.
identifier
h
symbol
+
identifier
q1
symbol
.
identifier
k
symbol
*
identifier
q2
symbol
.
identifier
i
symbol
;
identifier
NewLine
identifier
q
symbol
.
identifier
k
symbol
=
identifier
q1
symbol
.
identifier
h
symbol
*
identifier
q2
symbol
.
identifier
k
symbol
+
identifier
q1
symbol
.
identifier
i
symbol
*
identifier
q2
symbol
.
identifier
j
symbol
-
identifier
q1
symbol
.
identifier
j
symbol
*
identifier
q2
symbol
.
identifier
i
symbol
+
identifier
q1
symbol
.
identifier
k
symbol
*
identifier
q2
symbol
.
identifier
h
symbol
;
identifier
NewLine
keyword
return
identifier
q
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
symbol
{
identifier
NewLine
identifier
Quat
identifier
qi
symbol
(
identifier
i
symbol
)
symbol
;
identifier
NewLine
identifier
Quat
identifier
qj
symbol
(
identifier
j
symbol
)
symbol
;
identifier
NewLine
identifier
Quat
identifier
qk
symbol
(
identifier
k
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
identifier
Quat
identifier
qs
symbol
;
identifier
NewLine
identifier
READ
symbol
(
identifier
T
symbol
)
symbol
;
identifier
NewLine
identifier
FOR
symbol
(
identifier
t
symbol
,
identifier
T
symbol
)
symbol
{
identifier
NewLine
identifier
READ
symbol
(
identifier
n
symbol
)
symbol
;
identifier
NewLine
identifier
ll
identifier
x
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
x
symbol
;
identifier
NewLine
identifier
x
symbol
=
identifier
min
symbol
(
identifier
x
symbol
,
identifier
x
integerConstant
4
symbol
+
integerConstant
16
symbol
)
symbol
;
identifier
NewLine
identifier
string
identifier
s
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
s
symbol
;
identifier
NewLine
identifier
qs
symbol
=
identifier
Quat
symbol
(
identifier
i
symbol
)
symbol
;
identifier
NewLine
identifier
Quat
identifier
akt
symbol
(
integerConstant
1
symbol
)
symbol
;
identifier
NewLine
identifier
FOR
symbol
(
identifier
i
symbol
,
identifier
x
symbol
*
identifier
n
symbol
)
symbol
{
identifier
NewLine
identifier
Quat
identifier
q
symbol
(
identifier
s
symbol
[
identifier
i
identifier
n
symbol
]
symbol
)
symbol
;
identifier
NewLine
identifier
akt
symbol
=
identifier
mult
symbol
(
identifier
akt
symbol
,
identifier
q
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
eq
symbol
(
identifier
akt
symbol
,
identifier
qs
symbol
)
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
eq
symbol
(
identifier
qs
symbol
,
identifier
qi
symbol
)
symbol
)
symbol
{
identifier
NewLine
identifier
qs
symbol
=
identifier
qj
symbol
;
identifier
NewLine
identifier
akt
symbol
=
identifier
Quat
symbol
(
integerConstant
1
symbol
)
symbol
;
identifier
NewLine
symbol
}
keyword
else
keyword
if
symbol
(
identifier
eq
symbol
(
identifier
qs
symbol
,
identifier
qj
symbol
)
symbol
)
symbol
{
identifier
NewLine
identifier
qs
symbol
=
identifier
qk
symbol
;
identifier
NewLine
identifier
akt
symbol
=
identifier
Quat
symbol
(
integerConstant
1
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
eq
symbol
(
identifier
qs
symbol
,
identifier
qk
symbol
)
symbol
&
symbol
&
identifier
eq
symbol
(
identifier
akt
symbol
,
identifier
qs
symbol
)
symbol
)
symbol
{
identifier
NewLine
identifier
cout
symbol
<
symbol
<
stringConstant
Case #
symbol
<
symbol
<
symbol
(
identifier
t
symbol
+
integerConstant
1
symbol
)
symbol
<
symbol
<
stringConstant
: YES
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
symbol
}
keyword
else
symbol
{
identifier
NewLine
identifier
cout
symbol
<
symbol
<
stringConstant
Case #
symbol
<
symbol
<
symbol
(
identifier
t
symbol
+
integerConstant
1
symbol
)
symbol
<
symbol
<
stringConstant
: NO
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
symbol
}
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/shik.0.cpp file...

identifier
include
symbol
<
identifier
bits
symbol
/
identifier
stdc
symbol
+
symbol
+
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
unistd
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
define
identifier
SZ
symbol
(
identifier
x
symbol
)
symbol
(
symbol
(
keyword
int
symbol
)
symbol
(
identifier
x
symbol
)
symbol
.
identifier
size
symbol
(
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
ALL
symbol
(
identifier
c
symbol
)
identifier
begin
symbol
(
identifier
c
symbol
)
symbol
,
identifier
end
symbol
(
identifier
c
symbol
)
identifier
NewLine
identifier
define
identifier
REP
symbol
(
identifier
i
symbol
,
identifier
n
symbol
)
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
symbol
(
keyword
int
symbol
)
symbol
(
identifier
n
symbol
)
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
define
identifier
REP1
symbol
(
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
symbol
(
keyword
int
symbol
)
symbol
(
identifier
a
symbol
)
symbol
;
identifier
i
symbol
<
symbol
=
symbol
(
keyword
int
symbol
)
symbol
(
identifier
b
symbol
)
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
define
identifier
FOR
symbol
(
identifier
it
symbol
,
identifier
c
symbol
)
identifier
for
symbol
(
identifier
auto
identifier
it
symbol
=
symbol
(
identifier
c
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
;
identifier
it
symbol
=
symbol
(
identifier
c
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
symbol
;
identifier
it
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
define
identifier
MP
identifier
make
identifier
pair
identifier
NewLine
identifier
define
identifier
PB
identifier
push
identifier
back
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
typedef
identifier
pair
symbol
<
keyword
int
symbol
,
keyword
int
symbol
>
identifier
PII
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
keyword
int
symbol
>
identifier
VI
symbol
;
identifier
NewLine
identifier
typedef
identifier
long
identifier
long
identifier
LL
symbol
;
identifier
NewLine
identifier
NewLine
keyword
void
identifier
RI
symbol
(
symbol
)
symbol
{
symbol
}
identifier
NewLine
identifier
NewLine
identifier
template
symbol
<
identifier
typename
symbol
.
symbol
.
symbol
.
identifier
T
symbol
>
identifier
NewLine
keyword
void
identifier
RI
symbol
(
keyword
int
symbol
&
identifier
head
symbol
,
identifier
T
symbol
&
symbol
.
symbol
.
symbol
.
identifier
tail
symbol
)
symbol
{
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
head
symbol
)
symbol
;
identifier
NewLine
identifier
RI
symbol
(
identifier
tail
symbol
.
symbol
.
symbol
.
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
template
symbol
<
identifier
typename
identifier
T
symbol
>
identifier
NewLine
keyword
void
identifier
dump
symbol
(
identifier
const
keyword
char
symbol
*
identifier
s
symbol
,
identifier
T
symbol
&
symbol
&
identifier
head
symbol
)
symbol
{
identifier
cerr
symbol
<
symbol
<
identifier
s
symbol
<
symbol
<
symbol
=
symbol
<
symbol
<
identifier
head
symbol
<
symbol
<
identifier
endl
symbol
;
symbol
}
identifier
NewLine
identifier
NewLine
identifier
template
symbol
<
identifier
typename
identifier
T
symbol
,
identifier
typename
symbol
.
symbol
.
symbol
.
identifier
Args
symbol
>
identifier
NewLine
keyword
void
identifier
dump
symbol
(
identifier
const
keyword
char
symbol
*
identifier
s
symbol
,
identifier
T
symbol
&
symbol
&
identifier
head
symbol
,
identifier
Args
symbol
&
symbol
&
symbol
.
symbol
.
symbol
.
identifier
tail
symbol
)
symbol
{
identifier
NewLine
identifier
cout
symbol
<
symbol
<
identifier
PRETTY
identifier
FUNCTION
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
keyword
int
identifier
c
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
keyword
while
symbol
(
symbol
*
identifier
s
symbol
=
symbol
,
symbol
|
symbol
|
identifier
c
symbol
=
integerConstant
0
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
symbol
*
identifier
s
symbol
=
symbol
=
symbol
(
symbol
|
symbol
|
symbol
*
identifier
s
symbol
=
symbol
=
symbol
[
symbol
|
symbol
|
symbol
*
identifier
s
symbol
=
symbol
=
symbol
{
symbol
)
identifier
c
symbol
+
symbol
+
symbol
;
identifier
NewLine
keyword
if
symbol
(
symbol
*
identifier
s
symbol
=
symbol
=
symbol
)
symbol
|
symbol
|
symbol
*
identifier
s
symbol
=
symbol
=
symbol
]
symbol
|
symbol
|
symbol
*
identifier
s
symbol
=
symbol
=
symbol
}
symbol
)
identifier
c
symbol
-
symbol
-
symbol
;
identifier
NewLine
identifier
cerr
symbol
<
symbol
<
symbol
*
identifier
s
symbol
+
symbol
+
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
cerr
symbol
<
symbol
<
symbol
=
symbol
<
symbol
<
identifier
head
symbol
<
symbol
<
symbol
, 
symbol
;
identifier
NewLine
identifier
dump
symbol
(
identifier
s
symbol
+
integerConstant
1
symbol
,
identifier
tail
symbol
.
symbol
.
symbol
.
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
define
identifier
dump
symbol
(
symbol
.
symbol
.
symbol
.
symbol
)
identifier
dump
symbol
(
identifier
VA
identifier
ARGS
symbol
,
identifier
VA
identifier
ARGS
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
identifier
template
symbol
<
identifier
typename
identifier
Iter
symbol
>
identifier
NewLine
identifier
ostream
symbol
&
identifier
out
symbol
(
identifier
ostream
symbol
&
identifier
s
symbol
,
identifier
Iter
identifier
b
symbol
,
identifier
Iter
identifier
e
symbol
)
symbol
{
identifier
NewLine
identifier
s
symbol
<
symbol
<
symbol
[
symbol
;
identifier
NewLine
identifier
for
symbol
(
identifier
auto
identifier
it
symbol
=
identifier
b
symbol
;
identifier
it
symbol
=
identifier
e
symbol
;
identifier
it
symbol
+
symbol
+
symbol
)
identifier
s
symbol
<
symbol
<
symbol
(
identifier
it
symbol
=
symbol
=
identifier
b
symbol
)
symbol
<
symbol
<
symbol
*
identifier
it
symbol
;
identifier
NewLine
identifier
s
symbol
<
symbol
<
symbol
]
symbol
;
identifier
NewLine
keyword
return
identifier
s
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
template
symbol
<
identifier
typename
identifier
A
symbol
,
identifier
typename
identifier
B
symbol
>
identifier
NewLine
identifier
ostream
symbol
&
identifier
operator
symbol
<
symbol
<
symbol
(
identifier
ostream
symbol
&
identifier
s
symbol
,
identifier
const
identifier
pair
symbol
<
identifier
A
symbol
,
identifier
B
symbol
>
symbol
&
identifier
p
symbol
)
symbol
{
keyword
return
identifier
s
symbol
<
symbol
<
symbol
(
symbol
<
symbol
<
identifier
p
symbol
.
identifier
first
symbol
<
symbol
<
symbol
,
symbol
<
symbol
<
identifier
p
symbol
.
identifier
second
symbol
<
symbol
<
symbol
)
symbol
;
symbol
}
identifier
NewLine
identifier
template
symbol
<
identifier
typename
identifier
T
symbol
>
identifier
NewLine
identifier
ostream
symbol
&
identifier
operator
symbol
<
symbol
<
symbol
(
identifier
ostream
symbol
&
identifier
s
symbol
,
identifier
const
identifier
vector
symbol
<
identifier
T
symbol
>
symbol
&
identifier
c
symbol
)
symbol
{
keyword
return
identifier
out
symbol
(
identifier
s
symbol
,
identifier
ALL
symbol
(
identifier
c
symbol
)
symbol
)
symbol
;
symbol
}
identifier
NewLine
identifier
template
symbol
<
identifier
typename
identifier
T
symbol
>
identifier
NewLine
identifier
ostream
symbol
&
identifier
operator
symbol
<
symbol
<
symbol
(
identifier
ostream
symbol
&
identifier
s
symbol
,
identifier
const
identifier
set
symbol
<
identifier
T
symbol
>
symbol
&
identifier
c
symbol
)
symbol
{
keyword
return
identifier
out
symbol
(
identifier
s
symbol
,
identifier
ALL
symbol
(
identifier
c
symbol
)
symbol
)
symbol
;
symbol
}
identifier
NewLine
identifier
template
symbol
<
identifier
typename
identifier
A
symbol
,
identifier
typename
identifier
B
symbol
>
identifier
NewLine
identifier
ostream
symbol
&
identifier
operator
symbol
<
symbol
<
symbol
(
identifier
ostream
symbol
&
identifier
s
symbol
,
identifier
const
identifier
map
symbol
<
identifier
A
symbol
,
identifier
B
symbol
>
symbol
&
identifier
c
symbol
)
symbol
{
keyword
return
identifier
out
symbol
(
identifier
s
symbol
,
identifier
ALL
symbol
(
identifier
c
symbol
)
symbol
)
symbol
;
symbol
}
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
define
identifier
S
integerConstant
1010
identifier
NewLine
keyword
int
identifier
smx
symbol
,
identifier
cnt
symbol
[
identifier
S
symbol
]
symbol
;
identifier
NewLine
keyword
void
identifier
input
symbol
(
symbol
)
symbol
{
identifier
NewLine
identifier
RI
symbol
(
identifier
smx
symbol
)
symbol
;
identifier
NewLine
identifier
REP1
symbol
(
identifier
i
symbol
,
integerConstant
0
symbol
,
identifier
smx
symbol
)
identifier
scanf
symbol
(
stringConstant
%1d
symbol
,
identifier
cnt
symbol
+
identifier
i
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
void
identifier
solve
symbol
(
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
ans
symbol
=
integerConstant
0
symbol
,
identifier
now
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
REP1
symbol
(
identifier
i
symbol
,
integerConstant
0
symbol
,
identifier
smx
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
now
symbol
<
identifier
i
symbol
)
symbol
{
identifier
NewLine
identifier
ans
symbol
+
symbol
=
identifier
i
symbol
-
identifier
now
symbol
;
identifier
NewLine
identifier
now
symbol
=
identifier
i
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
now
symbol
+
symbol
=
identifier
cnt
symbol
[
identifier
i
symbol
]
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
printf
symbol
(
stringConstant
%d\n
symbol
,
identifier
ans
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
keyword
int
identifier
argc
symbol
,
keyword
char
symbol
*
identifier
argv
symbol
[
symbol
]
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
n
identifier
case
symbol
;
identifier
NewLine
identifier
RI
symbol
(
identifier
n
identifier
case
symbol
)
symbol
;
identifier
NewLine
identifier
REP1
symbol
(
identifier
i
symbol
,
integerConstant
1
symbol
,
identifier
n
identifier
case
symbol
)
symbol
{
identifier
NewLine
identifier
input
symbol
(
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
argc
symbol
=
symbol
=
integerConstant
2
symbol
&
symbol
&
identifier
atoi
symbol
(
identifier
argv
symbol
[
integerConstant
1
symbol
]
symbol
)
symbol
=
identifier
i
symbol
)
identifier
continue
symbol
;
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: 
symbol
,
identifier
i
symbol
)
symbol
;
identifier
NewLine
identifier
solve
symbol
(
symbol
)
symbol
;
identifier
NewLine
identifier
fflush
symbol
(
identifier
stdout
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/shik.1.cpp file...

identifier
include
symbol
<
identifier
bits
symbol
/
identifier
stdc
symbol
+
symbol
+
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
unistd
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
define
identifier
SZ
symbol
(
identifier
x
symbol
)
symbol
(
symbol
(
keyword
int
symbol
)
symbol
(
identifier
x
symbol
)
symbol
.
identifier
size
symbol
(
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
ALL
symbol
(
identifier
c
symbol
)
identifier
begin
symbol
(
identifier
c
symbol
)
symbol
,
identifier
end
symbol
(
identifier
c
symbol
)
identifier
NewLine
identifier
define
identifier
REP
symbol
(
identifier
i
symbol
,
identifier
n
symbol
)
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
symbol
(
keyword
int
symbol
)
symbol
(
identifier
n
symbol
)
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
define
identifier
REP1
symbol
(
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
symbol
(
keyword
int
symbol
)
symbol
(
identifier
a
symbol
)
symbol
;
identifier
i
symbol
<
symbol
=
symbol
(
keyword
int
symbol
)
symbol
(
identifier
b
symbol
)
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
define
identifier
FOR
symbol
(
identifier
it
symbol
,
identifier
c
symbol
)
identifier
for
symbol
(
identifier
auto
identifier
it
symbol
=
symbol
(
identifier
c
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
;
identifier
it
symbol
=
symbol
(
identifier
c
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
symbol
;
identifier
it
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
define
identifier
MP
identifier
make
identifier
pair
identifier
NewLine
identifier
define
identifier
PB
identifier
push
identifier
back
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
typedef
identifier
pair
symbol
<
keyword
int
symbol
,
keyword
int
symbol
>
identifier
PII
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
keyword
int
symbol
>
identifier
VI
symbol
;
identifier
NewLine
identifier
typedef
identifier
long
identifier
long
identifier
LL
symbol
;
identifier
NewLine
identifier
NewLine
keyword
void
identifier
RI
symbol
(
symbol
)
symbol
{
symbol
}
identifier
NewLine
identifier
NewLine
identifier
template
symbol
<
identifier
typename
symbol
.
symbol
.
symbol
.
identifier
T
symbol
>
identifier
NewLine
keyword
void
identifier
RI
symbol
(
keyword
int
symbol
&
identifier
head
symbol
,
identifier
T
symbol
&
symbol
.
symbol
.
symbol
.
identifier
tail
symbol
)
symbol
{
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
head
symbol
)
symbol
;
identifier
NewLine
identifier
RI
symbol
(
identifier
tail
symbol
.
symbol
.
symbol
.
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
template
symbol
<
identifier
typename
identifier
T
symbol
>
identifier
NewLine
keyword
void
identifier
dump
symbol
(
identifier
const
keyword
char
symbol
*
identifier
s
symbol
,
identifier
T
symbol
&
symbol
&
identifier
head
symbol
)
symbol
{
identifier
cerr
symbol
<
symbol
<
identifier
s
symbol
<
symbol
<
symbol
=
symbol
<
symbol
<
identifier
head
symbol
<
symbol
<
identifier
endl
symbol
;
symbol
}
identifier
NewLine
identifier
NewLine
identifier
template
symbol
<
identifier
typename
identifier
T
symbol
,
identifier
typename
symbol
.
symbol
.
symbol
.
identifier
Args
symbol
>
identifier
NewLine
keyword
void
identifier
dump
symbol
(
identifier
const
keyword
char
symbol
*
identifier
s
symbol
,
identifier
T
symbol
&
symbol
&
identifier
head
symbol
,
identifier
Args
symbol
&
symbol
&
symbol
.
symbol
.
symbol
.
identifier
tail
symbol
)
symbol
{
identifier
NewLine
identifier
cout
symbol
<
symbol
<
identifier
PRETTY
identifier
FUNCTION
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
keyword
int
identifier
c
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
keyword
while
symbol
(
symbol
*
identifier
s
symbol
=
symbol
,
symbol
|
symbol
|
identifier
c
symbol
=
integerConstant
0
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
symbol
*
identifier
s
symbol
=
symbol
=
symbol
(
symbol
|
symbol
|
symbol
*
identifier
s
symbol
=
symbol
=
symbol
[
symbol
|
symbol
|
symbol
*
identifier
s
symbol
=
symbol
=
symbol
{
symbol
)
identifier
c
symbol
+
symbol
+
symbol
;
identifier
NewLine
keyword
if
symbol
(
symbol
*
identifier
s
symbol
=
symbol
=
symbol
)
symbol
|
symbol
|
symbol
*
identifier
s
symbol
=
symbol
=
symbol
]
symbol
|
symbol
|
symbol
*
identifier
s
symbol
=
symbol
=
symbol
}
symbol
)
identifier
c
symbol
-
symbol
-
symbol
;
identifier
NewLine
identifier
cerr
symbol
<
symbol
<
symbol
*
identifier
s
symbol
+
symbol
+
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
cerr
symbol
<
symbol
<
symbol
=
symbol
<
symbol
<
identifier
head
symbol
<
symbol
<
symbol
, 
symbol
;
identifier
NewLine
identifier
dump
symbol
(
identifier
s
symbol
+
integerConstant
1
symbol
,
identifier
tail
symbol
.
symbol
.
symbol
.
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
define
identifier
dump
symbol
(
symbol
.
symbol
.
symbol
.
symbol
)
identifier
dump
symbol
(
identifier
VA
identifier
ARGS
symbol
,
identifier
VA
identifier
ARGS
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
identifier
template
symbol
<
identifier
typename
identifier
Iter
symbol
>
identifier
NewLine
identifier
ostream
symbol
&
identifier
out
symbol
(
identifier
ostream
symbol
&
identifier
s
symbol
,
identifier
Iter
identifier
b
symbol
,
identifier
Iter
identifier
e
symbol
)
symbol
{
identifier
NewLine
identifier
s
symbol
<
symbol
<
symbol
[
symbol
;
identifier
NewLine
identifier
for
symbol
(
identifier
auto
identifier
it
symbol
=
identifier
b
symbol
;
identifier
it
symbol
=
identifier
e
symbol
;
identifier
it
symbol
+
symbol
+
symbol
)
identifier
s
symbol
<
symbol
<
symbol
(
identifier
it
symbol
=
symbol
=
identifier
b
symbol
)
symbol
<
symbol
<
symbol
*
identifier
it
symbol
;
identifier
NewLine
identifier
s
symbol
<
symbol
<
symbol
]
symbol
;
identifier
NewLine
keyword
return
identifier
s
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
template
symbol
<
identifier
typename
identifier
A
symbol
,
identifier
typename
identifier
B
symbol
>
identifier
NewLine
identifier
ostream
symbol
&
identifier
operator
symbol
<
symbol
<
symbol
(
identifier
ostream
symbol
&
identifier
s
symbol
,
identifier
const
identifier
pair
symbol
<
identifier
A
symbol
,
identifier
B
symbol
>
symbol
&
identifier
p
symbol
)
symbol
{
keyword
return
identifier
s
symbol
<
symbol
<
symbol
(
symbol
<
symbol
<
identifier
p
symbol
.
identifier
first
symbol
<
symbol
<
symbol
,
symbol
<
symbol
<
identifier
p
symbol
.
identifier
second
symbol
<
symbol
<
symbol
)
symbol
;
symbol
}
identifier
NewLine
identifier
template
symbol
<
identifier
typename
identifier
T
symbol
>
identifier
NewLine
identifier
ostream
symbol
&
identifier
operator
symbol
<
symbol
<
symbol
(
identifier
ostream
symbol
&
identifier
s
symbol
,
identifier
const
identifier
vector
symbol
<
identifier
T
symbol
>
symbol
&
identifier
c
symbol
)
symbol
{
keyword
return
identifier
out
symbol
(
identifier
s
symbol
,
identifier
ALL
symbol
(
identifier
c
symbol
)
symbol
)
symbol
;
symbol
}
identifier
NewLine
identifier
template
symbol
<
identifier
typename
identifier
T
symbol
>
identifier
NewLine
identifier
ostream
symbol
&
identifier
operator
symbol
<
symbol
<
symbol
(
identifier
ostream
symbol
&
identifier
s
symbol
,
identifier
const
identifier
set
symbol
<
identifier
T
symbol
>
symbol
&
identifier
c
symbol
)
symbol
{
keyword
return
identifier
out
symbol
(
identifier
s
symbol
,
identifier
ALL
symbol
(
identifier
c
symbol
)
symbol
)
symbol
;
symbol
}
identifier
NewLine
identifier
template
symbol
<
identifier
typename
identifier
A
symbol
,
identifier
typename
identifier
B
symbol
>
identifier
NewLine
identifier
ostream
symbol
&
identifier
operator
symbol
<
symbol
<
symbol
(
identifier
ostream
symbol
&
identifier
s
symbol
,
identifier
const
identifier
map
symbol
<
identifier
A
symbol
,
identifier
B
symbol
>
symbol
&
identifier
c
symbol
)
symbol
{
keyword
return
identifier
out
symbol
(
identifier
s
symbol
,
identifier
ALL
symbol
(
identifier
c
symbol
)
symbol
)
symbol
;
symbol
}
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
define
identifier
N
integerConstant
1010
identifier
NewLine
keyword
int
identifier
n
symbol
,
identifier
a
symbol
[
identifier
N
symbol
]
symbol
;
identifier
NewLine
keyword
void
identifier
input
symbol
(
symbol
)
symbol
{
identifier
NewLine
identifier
RI
symbol
(
identifier
n
symbol
)
symbol
;
identifier
NewLine
identifier
REP
symbol
(
identifier
i
symbol
,
identifier
n
symbol
)
identifier
RI
symbol
(
identifier
a
symbol
[
identifier
i
symbol
]
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
int
identifier
solve
symbol
(
keyword
int
identifier
g
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
cnt
symbol
=
identifier
g
symbol
;
identifier
NewLine
identifier
REP
symbol
(
identifier
i
symbol
,
identifier
n
symbol
)
identifier
cnt
symbol
+
symbol
=
symbol
(
identifier
a
symbol
[
identifier
i
symbol
]
symbol
+
identifier
g
symbol
-
integerConstant
1
symbol
)
symbol
/
identifier
g
symbol
-
integerConstant
1
symbol
;
identifier
NewLine
keyword
return
identifier
cnt
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
void
identifier
solve
symbol
(
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
ans
symbol
=
identifier
N
symbol
;
identifier
NewLine
identifier
REP1
symbol
(
identifier
i
symbol
,
integerConstant
1
symbol
,
identifier
N
symbol
)
identifier
ans
symbol
=
identifier
min
symbol
(
identifier
ans
symbol
,
identifier
solve
symbol
(
identifier
i
symbol
)
symbol
)
symbol
;
identifier
NewLine
identifier
printf
symbol
(
stringConstant
%d\n
symbol
,
identifier
ans
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
keyword
int
identifier
argc
symbol
,
keyword
char
symbol
*
identifier
argv
symbol
[
symbol
]
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
n
identifier
case
symbol
;
identifier
NewLine
identifier
RI
symbol
(
identifier
n
identifier
case
symbol
)
symbol
;
identifier
NewLine
identifier
REP1
symbol
(
identifier
i
symbol
,
integerConstant
1
symbol
,
identifier
n
identifier
case
symbol
)
symbol
{
identifier
NewLine
identifier
input
symbol
(
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
argc
symbol
=
symbol
=
integerConstant
2
symbol
&
symbol
&
identifier
atoi
symbol
(
identifier
argv
symbol
[
integerConstant
1
symbol
]
symbol
)
symbol
=
identifier
i
symbol
)
identifier
continue
symbol
;
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: 
symbol
,
identifier
i
symbol
)
symbol
;
identifier
NewLine
identifier
solve
symbol
(
symbol
)
symbol
;
identifier
NewLine
identifier
fflush
symbol
(
identifier
stdout
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/shik.2.cpp file...

identifier
include
symbol
<
identifier
bits
symbol
/
identifier
stdc
symbol
+
symbol
+
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
unistd
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
define
identifier
SZ
symbol
(
identifier
x
symbol
)
symbol
(
symbol
(
keyword
int
symbol
)
symbol
(
identifier
x
symbol
)
symbol
.
identifier
size
symbol
(
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
ALL
symbol
(
identifier
c
symbol
)
identifier
begin
symbol
(
identifier
c
symbol
)
symbol
,
identifier
end
symbol
(
identifier
c
symbol
)
identifier
NewLine
identifier
define
identifier
REP
symbol
(
identifier
i
symbol
,
identifier
n
symbol
)
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
symbol
(
keyword
int
symbol
)
symbol
(
identifier
n
symbol
)
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
define
identifier
REP1
symbol
(
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
symbol
(
keyword
int
symbol
)
symbol
(
identifier
a
symbol
)
symbol
;
identifier
i
symbol
<
symbol
=
symbol
(
keyword
int
symbol
)
symbol
(
identifier
b
symbol
)
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
define
identifier
FOR
symbol
(
identifier
it
symbol
,
identifier
c
symbol
)
identifier
for
symbol
(
identifier
auto
identifier
it
symbol
=
symbol
(
identifier
c
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
;
identifier
it
symbol
=
symbol
(
identifier
c
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
symbol
;
identifier
it
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
define
identifier
MP
identifier
make
identifier
pair
identifier
NewLine
identifier
define
identifier
PB
identifier
push
identifier
back
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
typedef
identifier
pair
symbol
<
keyword
int
symbol
,
keyword
int
symbol
>
identifier
PII
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
keyword
int
symbol
>
identifier
VI
symbol
;
identifier
NewLine
identifier
typedef
identifier
long
identifier
long
identifier
LL
symbol
;
identifier
NewLine
identifier
NewLine
keyword
void
identifier
RI
symbol
(
symbol
)
symbol
{
symbol
}
identifier
NewLine
identifier
NewLine
identifier
template
symbol
<
identifier
typename
symbol
.
symbol
.
symbol
.
identifier
T
symbol
>
identifier
NewLine
keyword
void
identifier
RI
symbol
(
keyword
int
symbol
&
identifier
head
symbol
,
identifier
T
symbol
&
symbol
.
symbol
.
symbol
.
identifier
tail
symbol
)
symbol
{
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
head
symbol
)
symbol
;
identifier
NewLine
identifier
RI
symbol
(
identifier
tail
symbol
.
symbol
.
symbol
.
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
template
symbol
<
identifier
typename
identifier
T
symbol
>
identifier
NewLine
keyword
void
identifier
dump
symbol
(
identifier
const
keyword
char
symbol
*
identifier
s
symbol
,
identifier
T
symbol
&
symbol
&
identifier
head
symbol
)
symbol
{
identifier
cerr
symbol
<
symbol
<
identifier
s
symbol
<
symbol
<
symbol
=
symbol
<
symbol
<
identifier
head
symbol
<
symbol
<
identifier
endl
symbol
;
symbol
}
identifier
NewLine
identifier
NewLine
identifier
template
symbol
<
identifier
typename
identifier
T
symbol
,
identifier
typename
symbol
.
symbol
.
symbol
.
identifier
Args
symbol
>
identifier
NewLine
keyword
void
identifier
dump
symbol
(
identifier
const
keyword
char
symbol
*
identifier
s
symbol
,
identifier
T
symbol
&
symbol
&
identifier
head
symbol
,
identifier
Args
symbol
&
symbol
&
symbol
.
symbol
.
symbol
.
identifier
tail
symbol
)
symbol
{
identifier
NewLine
identifier
cout
symbol
<
symbol
<
identifier
PRETTY
identifier
FUNCTION
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
keyword
int
identifier
c
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
keyword
while
symbol
(
symbol
*
identifier
s
symbol
=
symbol
,
symbol
|
symbol
|
identifier
c
symbol
=
integerConstant
0
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
symbol
*
identifier
s
symbol
=
symbol
=
symbol
(
symbol
|
symbol
|
symbol
*
identifier
s
symbol
=
symbol
=
symbol
[
symbol
|
symbol
|
symbol
*
identifier
s
symbol
=
symbol
=
symbol
{
symbol
)
identifier
c
symbol
+
symbol
+
symbol
;
identifier
NewLine
keyword
if
symbol
(
symbol
*
identifier
s
symbol
=
symbol
=
symbol
)
symbol
|
symbol
|
symbol
*
identifier
s
symbol
=
symbol
=
symbol
]
symbol
|
symbol
|
symbol
*
identifier
s
symbol
=
symbol
=
symbol
}
symbol
)
identifier
c
symbol
-
symbol
-
symbol
;
identifier
NewLine
identifier
cerr
symbol
<
symbol
<
symbol
*
identifier
s
symbol
+
symbol
+
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
cerr
symbol
<
symbol
<
symbol
=
symbol
<
symbol
<
identifier
head
symbol
<
symbol
<
symbol
, 
symbol
;
identifier
NewLine
identifier
dump
symbol
(
identifier
s
symbol
+
integerConstant
1
symbol
,
identifier
tail
symbol
.
symbol
.
symbol
.
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
define
identifier
dump
symbol
(
symbol
.
symbol
.
symbol
.
symbol
)
identifier
dump
symbol
(
identifier
VA
identifier
ARGS
symbol
,
identifier
VA
identifier
ARGS
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
identifier
template
symbol
<
identifier
typename
identifier
Iter
symbol
>
identifier
NewLine
identifier
ostream
symbol
&
identifier
out
symbol
(
identifier
ostream
symbol
&
identifier
s
symbol
,
identifier
Iter
identifier
b
symbol
,
identifier
Iter
identifier
e
symbol
)
symbol
{
identifier
NewLine
identifier
s
symbol
<
symbol
<
symbol
[
symbol
;
identifier
NewLine
identifier
for
symbol
(
identifier
auto
identifier
it
symbol
=
identifier
b
symbol
;
identifier
it
symbol
=
identifier
e
symbol
;
identifier
it
symbol
+
symbol
+
symbol
)
identifier
s
symbol
<
symbol
<
symbol
(
identifier
it
symbol
=
symbol
=
identifier
b
symbol
)
symbol
<
symbol
<
symbol
*
identifier
it
symbol
;
identifier
NewLine
identifier
s
symbol
<
symbol
<
symbol
]
symbol
;
identifier
NewLine
keyword
return
identifier
s
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
template
symbol
<
identifier
typename
identifier
A
symbol
,
identifier
typename
identifier
B
symbol
>
identifier
NewLine
identifier
ostream
symbol
&
identifier
operator
symbol
<
symbol
<
symbol
(
identifier
ostream
symbol
&
identifier
s
symbol
,
identifier
const
identifier
pair
symbol
<
identifier
A
symbol
,
identifier
B
symbol
>
symbol
&
identifier
p
symbol
)
symbol
{
keyword
return
identifier
s
symbol
<
symbol
<
symbol
(
symbol
<
symbol
<
identifier
p
symbol
.
identifier
first
symbol
<
symbol
<
symbol
,
symbol
<
symbol
<
identifier
p
symbol
.
identifier
second
symbol
<
symbol
<
symbol
)
symbol
;
symbol
}
identifier
NewLine
identifier
template
symbol
<
identifier
typename
identifier
T
symbol
>
identifier
NewLine
identifier
ostream
symbol
&
identifier
operator
symbol
<
symbol
<
symbol
(
identifier
ostream
symbol
&
identifier
s
symbol
,
identifier
const
identifier
vector
symbol
<
identifier
T
symbol
>
symbol
&
identifier
c
symbol
)
symbol
{
keyword
return
identifier
out
symbol
(
identifier
s
symbol
,
identifier
ALL
symbol
(
identifier
c
symbol
)
symbol
)
symbol
;
symbol
}
identifier
NewLine
identifier
template
symbol
<
identifier
typename
identifier
T
symbol
>
identifier
NewLine
identifier
ostream
symbol
&
identifier
operator
symbol
<
symbol
<
symbol
(
identifier
ostream
symbol
&
identifier
s
symbol
,
identifier
const
identifier
set
symbol
<
identifier
T
symbol
>
symbol
&
identifier
c
symbol
)
symbol
{
keyword
return
identifier
out
symbol
(
identifier
s
symbol
,
identifier
ALL
symbol
(
identifier
c
symbol
)
symbol
)
symbol
;
symbol
}
identifier
NewLine
identifier
template
symbol
<
identifier
typename
identifier
A
symbol
,
identifier
typename
identifier
B
symbol
>
identifier
NewLine
identifier
ostream
symbol
&
identifier
operator
symbol
<
symbol
<
symbol
(
identifier
ostream
symbol
&
identifier
s
symbol
,
identifier
const
identifier
map
symbol
<
identifier
A
symbol
,
identifier
B
symbol
>
symbol
&
identifier
c
symbol
)
symbol
{
keyword
return
identifier
out
symbol
(
identifier
s
symbol
,
identifier
ALL
symbol
(
identifier
c
symbol
)
symbol
)
symbol
;
symbol
}
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
define
identifier
N
integerConstant
300010
identifier
NewLine
keyword
int
identifier
n
symbol
,
identifier
a
symbol
[
identifier
N
symbol
]
symbol
;
identifier
NewLine
identifier
const
keyword
char
symbol
*
identifier
oijk
symbol
=
stringConstant
1ijk
symbol
;
identifier
NewLine
keyword
void
identifier
input
symbol
(
symbol
)
symbol
{
identifier
NewLine
identifier
long
identifier
l
symbol
,
identifier
x
symbol
;
identifier
NewLine
keyword
static
keyword
char
identifier
s
symbol
[
identifier
N
symbol
]
symbol
;
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%ld%ld%s
symbol
,
symbol
&
identifier
l
symbol
,
symbol
&
identifier
x
symbol
,
identifier
s
symbol
)
symbol
;
identifier
NewLine
keyword
while
symbol
(
identifier
x
symbol
>
integerConstant
30
symbol
)
identifier
x
symbol
-
symbol
=
integerConstant
4
symbol
;
identifier
NewLine
identifier
n
symbol
=
identifier
l
symbol
*
identifier
x
symbol
;
identifier
NewLine
identifier
REP1
symbol
(
identifier
i
symbol
,
integerConstant
1
symbol
,
identifier
n
symbol
)
identifier
a
symbol
[
identifier
i
symbol
]
symbol
=
identifier
strchr
symbol
(
identifier
oijk
symbol
,
identifier
s
symbol
[
symbol
(
identifier
i
symbol
-
integerConstant
1
symbol
)
identifier
l
symbol
]
symbol
)
symbol
-
identifier
oijk
symbol
+
integerConstant
1
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
const
keyword
int
identifier
m
symbol
[
integerConstant
5
symbol
]
symbol
[
integerConstant
5
symbol
]
symbol
=
symbol
{
identifier
NewLine
symbol
{
integerConstant
0
symbol
,
integerConstant
0
symbol
,
integerConstant
0
symbol
,
integerConstant
0
symbol
,
integerConstant
0
symbol
}
symbol
,
identifier
NewLine
symbol
{
integerConstant
0
symbol
,
integerConstant
1
symbol
,
integerConstant
2
symbol
,
integerConstant
3
symbol
,
integerConstant
4
symbol
}
symbol
,
identifier
NewLine
symbol
{
integerConstant
0
symbol
,
integerConstant
2
symbol
,
symbol
-
integerConstant
1
symbol
,
integerConstant
4
symbol
,
symbol
-
integerConstant
3
symbol
}
symbol
,
identifier
NewLine
symbol
{
integerConstant
0
symbol
,
integerConstant
3
symbol
,
symbol
-
integerConstant
4
symbol
,
symbol
-
integerConstant
1
symbol
,
integerConstant
2
symbol
}
symbol
,
identifier
NewLine
symbol
{
integerConstant
0
symbol
,
integerConstant
4
symbol
,
integerConstant
3
symbol
,
symbol
-
integerConstant
2
symbol
,
symbol
-
integerConstant
1
symbol
}
identifier
NewLine
symbol
}
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
mul
symbol
(
keyword
int
identifier
x
symbol
,
keyword
int
identifier
y
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
sx
symbol
=
identifier
x
symbol
/
identifier
abs
symbol
(
identifier
x
symbol
)
symbol
;
identifier
NewLine
keyword
int
identifier
sy
symbol
=
identifier
y
symbol
/
identifier
abs
symbol
(
identifier
y
symbol
)
symbol
;
identifier
NewLine
keyword
return
identifier
sx
symbol
*
identifier
sy
symbol
*
identifier
m
symbol
[
identifier
abs
symbol
(
identifier
x
symbol
)
symbol
]
symbol
[
identifier
abs
symbol
(
identifier
y
symbol
)
symbol
]
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
int
identifier
sl
symbol
[
identifier
N
symbol
]
symbol
,
identifier
sr
symbol
[
identifier
N
symbol
]
symbol
;
identifier
NewLine
identifier
bool
identifier
solve
symbol
(
symbol
)
symbol
{
identifier
NewLine
identifier
sl
symbol
[
integerConstant
0
symbol
]
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
identifier
REP1
symbol
(
identifier
i
symbol
,
integerConstant
1
symbol
,
identifier
n
symbol
)
identifier
sl
symbol
[
identifier
i
symbol
]
symbol
=
identifier
mul
symbol
(
identifier
sl
symbol
[
identifier
i
symbol
-
integerConstant
1
symbol
]
symbol
,
identifier
a
symbol
[
identifier
i
symbol
]
symbol
)
symbol
;
identifier
NewLine
identifier
sr
symbol
[
identifier
n
symbol
+
integerConstant
1
symbol
]
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
identifier
n
symbol
;
identifier
i
symbol
>
symbol
=
integerConstant
1
symbol
;
identifier
i
symbol
-
symbol
-
symbol
)
identifier
sr
symbol
[
identifier
i
symbol
]
symbol
=
identifier
mul
symbol
(
identifier
a
symbol
[
identifier
i
symbol
]
symbol
,
identifier
sr
symbol
[
identifier
i
symbol
+
integerConstant
1
symbol
]
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
sl
symbol
[
identifier
n
symbol
]
symbol
=
identifier
mul
symbol
(
integerConstant
2
symbol
,
identifier
mul
symbol
(
integerConstant
3
symbol
,
integerConstant
4
symbol
)
symbol
)
symbol
)
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
keyword
int
identifier
pi
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
keyword
while
symbol
(
identifier
pi
symbol
<
symbol
=
identifier
n
symbol
&
symbol
&
identifier
sl
symbol
[
identifier
pi
symbol
]
symbol
=
integerConstant
2
symbol
)
identifier
pi
symbol
+
symbol
+
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
pi
symbol
>
identifier
n
symbol
)
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
keyword
int
identifier
pk
symbol
=
identifier
n
symbol
;
identifier
NewLine
keyword
while
symbol
(
identifier
pk
symbol
>
symbol
=
integerConstant
1
symbol
&
symbol
&
identifier
sr
symbol
[
identifier
pk
symbol
]
symbol
=
integerConstant
4
symbol
)
identifier
pk
symbol
-
symbol
-
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
pk
symbol
<
symbol
=
identifier
pi
symbol
)
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
keyword
int
identifier
si
symbol
=
integerConstant
1
symbol
,
identifier
sj
symbol
=
integerConstant
1
symbol
,
identifier
sk
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
identifier
REP1
symbol
(
identifier
i
symbol
,
integerConstant
1
symbol
,
identifier
n
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
i
symbol
<
symbol
=
identifier
pi
symbol
)
identifier
si
symbol
=
identifier
mul
symbol
(
identifier
si
symbol
,
identifier
a
symbol
[
identifier
i
symbol
]
symbol
)
symbol
;
identifier
NewLine
keyword
else
keyword
if
symbol
(
identifier
i
symbol
<
identifier
pk
symbol
)
identifier
sj
symbol
=
identifier
mul
symbol
(
identifier
sj
symbol
,
identifier
a
symbol
[
identifier
i
symbol
]
symbol
)
symbol
;
identifier
NewLine
keyword
else
identifier
sk
symbol
=
identifier
mul
symbol
(
identifier
sk
symbol
,
identifier
a
symbol
[
identifier
i
symbol
]
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
assert
symbol
(
identifier
si
symbol
=
symbol
=
integerConstant
2
symbol
)
symbol
;
identifier
NewLine
identifier
assert
symbol
(
identifier
sj
symbol
=
symbol
=
integerConstant
3
symbol
)
symbol
;
identifier
NewLine
identifier
assert
symbol
(
identifier
sk
symbol
=
symbol
=
integerConstant
4
symbol
)
symbol
;
identifier
NewLine
keyword
return
integerConstant
1
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
void
identifier
solve
symbol
(
symbol
)
symbol
{
identifier
NewLine
identifier
puts
symbol
(
identifier
solve
symbol
(
symbol
)
stringConstant
YES
stringConstant
NO
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
keyword
int
identifier
argc
symbol
,
keyword
char
symbol
*
identifier
argv
symbol
[
symbol
]
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
n
identifier
case
symbol
;
identifier
NewLine
identifier
RI
symbol
(
identifier
n
identifier
case
symbol
)
symbol
;
identifier
NewLine
identifier
REP1
symbol
(
identifier
i
symbol
,
integerConstant
1
symbol
,
identifier
n
identifier
case
symbol
)
symbol
{
identifier
NewLine
identifier
input
symbol
(
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
argc
symbol
=
symbol
=
integerConstant
2
symbol
&
symbol
&
identifier
atoi
symbol
(
identifier
argv
symbol
[
integerConstant
1
symbol
]
symbol
)
symbol
=
identifier
i
symbol
)
identifier
continue
symbol
;
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: 
symbol
,
identifier
i
symbol
)
symbol
;
identifier
NewLine
identifier
solve
symbol
(
symbol
)
symbol
;
identifier
NewLine
identifier
fflush
symbol
(
identifier
stdout
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/simsa.st.0.cpp file...

identifier
include
symbol
<
identifier
cstdio
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstring
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cmath
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
ctime
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
algorithm
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
map
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
set
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
vector
symbol
>
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
identifier
define
identifier
ll
identifier
long
identifier
long
identifier
NewLine
identifier
define
identifier
ull
identifier
unsigned
identifier
long
identifier
long
identifier
NewLine
identifier
define
identifier
ld
identifier
long
identifier
double
identifier
NewLine
identifier
define
identifier
pb
identifier
push
identifier
back
identifier
NewLine
identifier
define
identifier
popb
identifier
pop
identifier
back
identifier
NewLine
identifier
NewLine
identifier
define
identifier
pii
identifier
pair
symbol
<
keyword
int
symbol
,
keyword
int
symbol
>
identifier
NewLine
identifier
define
identifier
mp
identifier
make
identifier
pair
identifier
NewLine
identifier
define
identifier
X
identifier
first
identifier
NewLine
identifier
define
identifier
Y
identifier
second
identifier
NewLine
identifier
NewLine
identifier
define
identifier
REP
symbol
(
identifier
i
symbol
,
identifier
n
symbol
)
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
symbol
(
identifier
n
symbol
)
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
define
identifier
FOR
symbol
(
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
symbol
(
identifier
a
symbol
)
symbol
;
identifier
i
symbol
<
symbol
=
symbol
(
identifier
b
symbol
)
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
define
identifier
FORD
symbol
(
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
symbol
(
identifier
a
symbol
)
symbol
;
identifier
i
symbol
>
symbol
=
symbol
(
identifier
b
symbol
)
symbol
;
identifier
i
symbol
-
symbol
-
symbol
)
identifier
NewLine
identifier
NewLine
identifier
define
identifier
maxN
integerConstant
1005
identifier
NewLine
identifier
NewLine
keyword
int
identifier
T
symbol
;
identifier
NewLine
keyword
char
identifier
str
symbol
[
identifier
maxN
symbol
]
symbol
;
identifier
NewLine
keyword
int
identifier
num
symbol
;
identifier
NewLine
keyword
int
identifier
max
identifier
diff
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
symbol
{
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
T
symbol
)
symbol
;
identifier
NewLine
identifier
FOR
symbol
(
identifier
t
symbol
,
integerConstant
1
symbol
,
identifier
T
symbol
)
symbol
{
identifier
NewLine
identifier
max
identifier
diff
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
keyword
int
identifier
Smax
symbol
;
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d%s
symbol
,
symbol
&
identifier
Smax
symbol
,
identifier
str
symbol
)
symbol
;
identifier
NewLine
identifier
num
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
REP
symbol
(
identifier
i
symbol
,
identifier
Smax
symbol
+
integerConstant
1
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
str
symbol
[
identifier
i
symbol
]
symbol
-
integerConstant
0
symbol
>
integerConstant
0
symbol
)
symbol
{
identifier
NewLine
identifier
max
identifier
diff
symbol
=
identifier
max
symbol
(
identifier
max
identifier
diff
symbol
,
identifier
i
symbol
-
identifier
num
symbol
)
symbol
;
identifier
NewLine
identifier
num
symbol
+
symbol
=
identifier
str
symbol
[
identifier
i
symbol
]
symbol
-
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: %d\n
symbol
,
identifier
t
symbol
,
identifier
max
identifier
diff
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/simsa.st.1.cpp file...

identifier
include
symbol
<
identifier
cstdio
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstring
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cmath
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
ctime
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
algorithm
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
map
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
set
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
vector
symbol
>
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
identifier
define
identifier
ll
identifier
long
identifier
long
identifier
NewLine
identifier
define
identifier
ull
identifier
unsigned
identifier
long
identifier
long
identifier
NewLine
identifier
define
identifier
ld
identifier
long
identifier
double
identifier
NewLine
identifier
define
identifier
pb
identifier
push
identifier
back
identifier
NewLine
identifier
define
identifier
popb
identifier
pop
identifier
back
identifier
NewLine
identifier
NewLine
identifier
define
identifier
pii
identifier
pair
symbol
<
keyword
int
symbol
,
keyword
int
symbol
>
identifier
NewLine
identifier
define
identifier
mp
identifier
make
identifier
pair
identifier
NewLine
identifier
define
identifier
X
identifier
first
identifier
NewLine
identifier
define
identifier
Y
identifier
second
identifier
NewLine
identifier
NewLine
identifier
define
identifier
REP
symbol
(
identifier
i
symbol
,
identifier
n
symbol
)
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
symbol
(
identifier
n
symbol
)
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
define
identifier
FOR
symbol
(
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
symbol
(
identifier
a
symbol
)
symbol
;
identifier
i
symbol
<
symbol
=
symbol
(
identifier
b
symbol
)
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
define
identifier
FORD
symbol
(
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
symbol
(
identifier
a
symbol
)
symbol
;
identifier
i
symbol
>
symbol
=
symbol
(
identifier
b
symbol
)
symbol
;
identifier
i
symbol
-
symbol
-
symbol
)
identifier
NewLine
identifier
NewLine
identifier
define
identifier
maxN
integerConstant
1005
identifier
NewLine
identifier
NewLine
keyword
int
identifier
D
symbol
;
identifier
NewLine
keyword
int
identifier
P
symbol
[
identifier
maxN
symbol
]
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
T
symbol
;
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
T
symbol
)
symbol
;
identifier
NewLine
identifier
FOR
symbol
(
identifier
t
symbol
,
integerConstant
1
symbol
,
identifier
T
symbol
)
symbol
{
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
D
symbol
)
symbol
;
identifier
NewLine
identifier
REP
symbol
(
identifier
i
symbol
,
identifier
D
symbol
)
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
identifier
P
symbol
+
identifier
i
symbol
)
symbol
;
identifier
NewLine
keyword
int
identifier
best
symbol
=
identifier
maxN
symbol
;
identifier
NewLine
identifier
FOR
symbol
(
identifier
i
symbol
,
integerConstant
1
symbol
,
identifier
maxN
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
now
symbol
=
identifier
i
symbol
;
identifier
NewLine
identifier
REP
symbol
(
identifier
j
symbol
,
identifier
D
symbol
)
symbol
{
identifier
NewLine
identifier
now
symbol
+
symbol
=
symbol
(
identifier
P
symbol
[
identifier
j
symbol
]
symbol
-
integerConstant
1
symbol
)
symbol
/
identifier
i
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
best
symbol
=
identifier
min
symbol
(
identifier
best
symbol
,
identifier
now
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: %d\n
symbol
,
identifier
t
symbol
,
identifier
best
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/simsa.st.2.cpp file...

identifier
include
symbol
<
identifier
cstdio
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstring
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cmath
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
ctime
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
algorithm
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
map
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
set
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
vector
symbol
>
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
identifier
define
identifier
ll
identifier
long
identifier
long
identifier
NewLine
identifier
define
identifier
ull
identifier
unsigned
identifier
long
identifier
long
identifier
NewLine
identifier
define
identifier
ld
identifier
long
identifier
double
identifier
NewLine
identifier
define
identifier
pb
identifier
push
identifier
back
identifier
NewLine
identifier
define
identifier
popb
identifier
pop
identifier
back
identifier
NewLine
identifier
NewLine
identifier
define
identifier
pii
identifier
pair
symbol
<
keyword
int
symbol
,
keyword
int
symbol
>
identifier
NewLine
identifier
define
identifier
mp
identifier
make
identifier
pair
identifier
NewLine
identifier
define
identifier
X
identifier
first
identifier
NewLine
identifier
define
identifier
Y
identifier
second
identifier
NewLine
identifier
NewLine
identifier
define
identifier
REP
symbol
(
identifier
i
symbol
,
identifier
n
symbol
)
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
symbol
(
identifier
n
symbol
)
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
define
identifier
FOR
symbol
(
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
symbol
(
identifier
a
symbol
)
symbol
;
identifier
i
symbol
<
symbol
=
symbol
(
identifier
b
symbol
)
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
define
identifier
FORD
symbol
(
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
symbol
(
identifier
a
symbol
)
symbol
;
identifier
i
symbol
>
symbol
=
symbol
(
identifier
b
symbol
)
symbol
;
identifier
i
symbol
-
symbol
-
symbol
)
identifier
NewLine
identifier
NewLine
identifier
define
identifier
maxN
integerConstant
10005
identifier
NewLine
identifier
NewLine
identifier
struct
identifier
q
symbol
{
identifier
NewLine
identifier
q
symbol
(
symbol
)
symbol
{
symbol
}
identifier
NewLine
identifier
q
symbol
(
keyword
char
identifier
c
symbol
)
identifier
sym
symbol
(
identifier
c
symbol
)
symbol
,
identifier
pos
symbol
(
keyword
true
symbol
)
symbol
{
symbol
}
identifier
NewLine
keyword
char
identifier
sym
symbol
;
identifier
NewLine
identifier
bool
identifier
pos
symbol
;
identifier
NewLine
identifier
q
identifier
mul
identifier
by
symbol
(
identifier
q
identifier
b
symbol
)
symbol
;
identifier
NewLine
identifier
bool
identifier
operator
symbol
=
symbol
=
symbol
(
identifier
const
identifier
q
symbol
&
identifier
other
symbol
)
symbol
{
keyword
return
identifier
sym
symbol
=
symbol
=
identifier
other
symbol
.
identifier
sym
symbol
&
symbol
&
identifier
pos
symbol
=
symbol
=
identifier
other
symbol
.
identifier
pos
symbol
;
symbol
}
identifier
NewLine
identifier
bool
identifier
operator
symbol
=
symbol
(
identifier
const
identifier
q
symbol
&
identifier
other
symbol
)
symbol
{
keyword
return
symbol
(
symbol
*
keyword
this
symbol
=
symbol
=
identifier
other
symbol
)
symbol
;
symbol
}
identifier
NewLine
symbol
}
symbol
;
identifier
NewLine
identifier
q
identifier
mul
symbol
(
identifier
q
identifier
a
symbol
,
identifier
q
identifier
b
symbol
)
symbol
{
identifier
NewLine
identifier
q
identifier
res
symbol
;
identifier
NewLine
identifier
res
symbol
.
identifier
pos
symbol
=
symbol
(
identifier
a
symbol
.
identifier
pos
identifier
b
symbol
.
identifier
pos
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
a
symbol
.
identifier
sym
symbol
=
symbol
=
integerConstant
1
symbol
)
symbol
{
identifier
res
symbol
.
identifier
sym
symbol
=
identifier
b
symbol
.
identifier
sym
symbol
;
keyword
return
identifier
res
symbol
;
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
b
symbol
.
identifier
sym
symbol
=
symbol
=
integerConstant
1
symbol
)
symbol
{
identifier
res
symbol
.
identifier
sym
symbol
=
identifier
a
symbol
.
identifier
sym
symbol
;
keyword
return
identifier
res
symbol
;
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
a
symbol
.
identifier
sym
symbol
=
symbol
=
identifier
b
symbol
.
identifier
sym
symbol
)
symbol
{
identifier
res
symbol
.
identifier
sym
symbol
=
integerConstant
1
symbol
;
identifier
res
symbol
.
identifier
pos
symbol
=
identifier
res
symbol
.
identifier
pos
symbol
;
keyword
return
identifier
res
symbol
;
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
a
symbol
.
identifier
sym
symbol
=
symbol
=
identifier
i
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
b
symbol
.
identifier
sym
symbol
=
symbol
=
identifier
j
symbol
)
symbol
{
identifier
res
symbol
.
identifier
sym
symbol
=
identifier
k
symbol
;
keyword
return
identifier
res
symbol
;
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
b
symbol
.
identifier
sym
symbol
=
symbol
=
identifier
k
symbol
)
symbol
{
identifier
res
symbol
.
identifier
sym
symbol
=
identifier
j
symbol
;
identifier
res
symbol
.
identifier
pos
symbol
=
identifier
res
symbol
.
identifier
pos
symbol
;
keyword
return
identifier
res
symbol
;
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
a
symbol
.
identifier
sym
symbol
=
symbol
=
identifier
j
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
b
symbol
.
identifier
sym
symbol
=
symbol
=
identifier
i
symbol
)
symbol
{
identifier
res
symbol
.
identifier
sym
symbol
=
identifier
k
symbol
;
identifier
res
symbol
.
identifier
pos
symbol
=
identifier
res
symbol
.
identifier
pos
symbol
;
keyword
return
identifier
res
symbol
;
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
b
symbol
.
identifier
sym
symbol
=
symbol
=
identifier
k
symbol
)
symbol
{
identifier
res
symbol
.
identifier
sym
symbol
=
identifier
i
symbol
;
keyword
return
identifier
res
symbol
;
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
a
symbol
.
identifier
sym
symbol
=
symbol
=
identifier
k
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
b
symbol
.
identifier
sym
symbol
=
symbol
=
identifier
i
symbol
)
symbol
{
identifier
res
symbol
.
identifier
sym
symbol
=
identifier
j
symbol
;
keyword
return
identifier
res
symbol
;
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
b
symbol
.
identifier
sym
symbol
=
symbol
=
identifier
j
symbol
)
symbol
{
identifier
res
symbol
.
identifier
sym
symbol
=
identifier
i
symbol
;
identifier
res
symbol
.
identifier
pos
symbol
=
identifier
res
symbol
.
identifier
pos
symbol
;
keyword
return
identifier
res
symbol
;
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
q
identifier
q
identifier
mul
identifier
by
symbol
(
identifier
q
identifier
b
symbol
)
symbol
{
symbol
*
keyword
this
symbol
=
identifier
mul
symbol
(
symbol
*
keyword
this
symbol
,
identifier
b
symbol
)
symbol
;
keyword
return
symbol
*
keyword
this
symbol
;
symbol
}
identifier
NewLine
identifier
NewLine
keyword
int
identifier
L
symbol
;
identifier
NewLine
identifier
long
identifier
long
identifier
X
symbol
;
identifier
NewLine
keyword
char
identifier
str
symbol
[
identifier
maxN
symbol
]
symbol
;
identifier
NewLine
identifier
q
identifier
x
symbol
[
identifier
maxN
symbol
]
symbol
;
identifier
NewLine
identifier
NewLine
keyword
char
identifier
mul
symbol
(
keyword
char
identifier
a
symbol
,
keyword
char
identifier
b
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
a
symbol
=
symbol
=
integerConstant
1
symbol
)
symbol
{
identifier
NewLine
keyword
return
identifier
b
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
b
symbol
=
symbol
=
integerConstant
1
symbol
)
symbol
{
identifier
NewLine
keyword
return
identifier
a
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
a
symbol
=
symbol
=
identifier
b
symbol
)
keyword
return
symbol
-
integerConstant
1
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
T
symbol
;
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
T
symbol
)
symbol
;
identifier
NewLine
identifier
FOR
symbol
(
identifier
t
symbol
,
integerConstant
1
symbol
,
identifier
T
symbol
)
symbol
{
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d%lld
symbol
,
symbol
&
identifier
L
symbol
,
symbol
&
identifier
X
symbol
)
symbol
;
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%s
symbol
,
identifier
str
symbol
)
symbol
;
identifier
NewLine
identifier
REP
symbol
(
identifier
i
symbol
,
identifier
L
symbol
)
symbol
{
identifier
NewLine
identifier
x
symbol
[
identifier
i
symbol
]
symbol
=
identifier
q
symbol
(
identifier
str
symbol
[
identifier
i
symbol
]
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
q
identifier
all
symbol
(
integerConstant
1
symbol
)
symbol
;
identifier
NewLine
keyword
int
identifier
X4
symbol
=
identifier
X
integerConstant
4
symbol
;
identifier
NewLine
identifier
REP
symbol
(
identifier
j
symbol
,
identifier
X4
symbol
)
symbol
{
identifier
NewLine
identifier
REP
symbol
(
identifier
i
symbol
,
identifier
L
symbol
)
symbol
{
identifier
NewLine
identifier
all
symbol
.
identifier
mul
identifier
by
symbol
(
identifier
x
symbol
[
identifier
i
symbol
]
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
all
symbol
=
identifier
mul
symbol
(
identifier
q
symbol
(
identifier
i
symbol
)
symbol
,
identifier
mul
symbol
(
identifier
q
symbol
(
identifier
j
symbol
)
symbol
,
identifier
q
symbol
(
identifier
k
symbol
)
symbol
)
symbol
)
symbol
)
symbol
{
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: NO\n
symbol
,
identifier
t
symbol
)
symbol
;
identifier
continue
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
int
identifier
firstI
symbol
=
symbol
-
integerConstant
1
symbol
;
identifier
NewLine
identifier
q
identifier
start
symbol
(
integerConstant
1
symbol
)
symbol
;
identifier
NewLine
identifier
REP
symbol
(
identifier
i
symbol
,
identifier
L
symbol
*
integerConstant
5
symbol
+
integerConstant
2
symbol
)
symbol
{
identifier
NewLine
identifier
start
symbol
.
identifier
mul
identifier
by
symbol
(
identifier
x
symbol
[
identifier
i
identifier
L
symbol
]
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
start
symbol
=
symbol
=
identifier
q
symbol
(
identifier
i
symbol
)
symbol
)
symbol
{
identifier
NewLine
identifier
firstI
symbol
=
identifier
i
symbol
+
integerConstant
1
symbol
;
identifier
NewLine
identifier
break
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
keyword
int
identifier
lastK
symbol
=
symbol
-
integerConstant
1
symbol
;
identifier
NewLine
identifier
q
identifier
end
symbol
(
integerConstant
1
symbol
)
symbol
;
identifier
NewLine
identifier
REP
symbol
(
identifier
i
symbol
,
identifier
L
symbol
*
integerConstant
5
symbol
+
integerConstant
2
symbol
)
symbol
{
identifier
NewLine
identifier
end
symbol
=
identifier
mul
symbol
(
identifier
x
symbol
[
symbol
(
identifier
L
symbol
*
integerConstant
9
symbol
-
identifier
i
symbol
-
integerConstant
1
symbol
)
identifier
L
symbol
]
symbol
,
identifier
end
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
end
symbol
=
symbol
=
identifier
q
symbol
(
identifier
k
symbol
)
symbol
)
symbol
{
identifier
NewLine
identifier
lastK
symbol
=
identifier
i
symbol
+
integerConstant
1
symbol
;
identifier
NewLine
identifier
break
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
firstI
symbol
=
symbol
=
symbol
-
integerConstant
1
symbol
|
symbol
|
identifier
lastK
symbol
=
symbol
=
symbol
-
integerConstant
1
symbol
|
symbol
|
symbol
(
identifier
firstI
symbol
+
identifier
lastK
symbol
>
symbol
=
identifier
L
symbol
*
identifier
X
symbol
)
symbol
)
symbol
{
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: NO\n
symbol
,
identifier
t
symbol
)
symbol
;
identifier
NewLine
symbol
}
keyword
else
symbol
{
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: YES\n
symbol
,
identifier
t
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/SovietUnion.0.cpp file...

identifier
include
symbol
<
identifier
cstdio
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstring
symbol
>
identifier
NewLine
identifier
const
keyword
int
identifier
N
symbol
=
integerConstant
2000
symbol
;
identifier
NewLine
keyword
int
identifier
T
symbol
,
identifier
n
symbol
;
identifier
NewLine
keyword
char
identifier
s
symbol
[
identifier
N
symbol
]
symbol
;
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
symbol
{
identifier
NewLine
identifier
freopen
symbol
(
stringConstant
A.in
symbol
,
stringConstant
r
symbol
,
identifier
stdin
symbol
)
symbol
;
identifier
NewLine
identifier
freopen
symbol
(
stringConstant
A.out
symbol
,
stringConstant
w
symbol
,
identifier
stdout
symbol
)
symbol
;
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
T
symbol
)
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
Ti
symbol
=
integerConstant
1
symbol
;
identifier
Ti
symbol
<
symbol
=
identifier
T
symbol
;
symbol
+
symbol
+
identifier
Ti
symbol
)
symbol
{
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d%s
symbol
,
symbol
&
identifier
n
symbol
,
identifier
s
symbol
)
symbol
;
identifier
NewLine
keyword
int
identifier
tot
symbol
=
integerConstant
0
symbol
,
identifier
ans
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
symbol
=
identifier
n
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
identifier
s
symbol
[
identifier
i
symbol
]
symbol
-
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
symbol
=
identifier
n
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
keyword
if
symbol
(
identifier
s
symbol
[
identifier
i
symbol
]
symbol
=
integerConstant
0
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
tot
symbol
<
identifier
i
symbol
)
identifier
ans
symbol
+
symbol
=
identifier
i
symbol
-
identifier
tot
symbol
,
identifier
tot
symbol
=
identifier
i
symbol
;
identifier
NewLine
identifier
tot
symbol
+
symbol
=
identifier
s
symbol
[
identifier
i
symbol
]
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: %d\n
symbol
,
identifier
Ti
symbol
,
identifier
ans
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/SovietUnion.1.cpp file...

identifier
include
symbol
<
identifier
cstdio
symbol
>
identifier
NewLine
identifier
const
keyword
int
identifier
N
symbol
=
integerConstant
1010
symbol
;
identifier
NewLine
keyword
int
identifier
T
symbol
,
identifier
n
symbol
,
identifier
a
symbol
[
identifier
N
symbol
]
symbol
;
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
symbol
{
identifier
NewLine
identifier
freopen
symbol
(
stringConstant
B.in
symbol
,
stringConstant
r
symbol
,
identifier
stdin
symbol
)
symbol
;
identifier
NewLine
identifier
freopen
symbol
(
stringConstant
B.out
symbol
,
stringConstant
w
symbol
,
identifier
stdout
symbol
)
symbol
;
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
T
symbol
)
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
Ti
symbol
=
integerConstant
1
symbol
;
identifier
Ti
symbol
<
symbol
=
identifier
T
symbol
;
symbol
+
symbol
+
identifier
Ti
symbol
)
symbol
{
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
n
symbol
)
symbol
;
identifier
NewLine
keyword
int
identifier
lim
symbol
=
integerConstant
0
symbol
,
identifier
ans
symbol
=
integerConstant
1000000000
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
1
symbol
;
identifier
i
symbol
<
symbol
=
identifier
n
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
symbol
{
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
a
symbol
[
identifier
i
symbol
]
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
a
symbol
[
identifier
i
symbol
]
symbol
>
identifier
lim
symbol
)
identifier
lim
symbol
=
identifier
a
symbol
[
identifier
i
symbol
]
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
1
symbol
;
identifier
i
symbol
<
symbol
=
identifier
lim
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
now
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
j
symbol
=
integerConstant
1
symbol
;
identifier
j
symbol
<
symbol
=
identifier
n
symbol
;
symbol
+
symbol
+
identifier
j
symbol
)
keyword
if
symbol
(
identifier
a
symbol
[
identifier
j
symbol
]
symbol
>
identifier
i
symbol
)
identifier
now
symbol
+
symbol
=
symbol
(
identifier
a
symbol
[
identifier
j
symbol
]
symbol
-
integerConstant
1
symbol
)
symbol
/
identifier
i
symbol
;
identifier
NewLine
identifier
now
symbol
+
symbol
=
identifier
i
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
now
symbol
<
identifier
ans
symbol
)
identifier
ans
symbol
=
identifier
now
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: %d\n
symbol
,
identifier
Ti
symbol
,
identifier
ans
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/SovietUnion.2.cpp file...

identifier
include
symbol
<
identifier
cstdio
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
iostream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
string
symbol
>
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
keyword
class
identifier
Q
symbol
{
identifier
NewLine
identifier
public
identifier
NewLine
keyword
char
identifier
c
symbol
;
identifier
NewLine
identifier
bool
identifier
flag
symbol
;
identifier
NewLine
identifier
Q
symbol
(
symbol
)
symbol
{
identifier
NewLine
identifier
c
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
identifier
flag
symbol
=
keyword
false
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
void
identifier
clear
symbol
(
symbol
)
symbol
{
identifier
NewLine
identifier
c
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
identifier
flag
symbol
=
keyword
false
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
inline
identifier
Q
identifier
operator
symbol
*
symbol
(
identifier
const
identifier
Q
symbol
&
identifier
rhs
symbol
)
symbol
{
identifier
NewLine
identifier
Q
identifier
ans
symbol
;
identifier
NewLine
identifier
ans
symbol
.
identifier
flag
symbol
=
symbol
(
identifier
flag
identifier
rhs
symbol
.
identifier
flag
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
c
symbol
=
symbol
=
integerConstant
1
symbol
)
identifier
ans
symbol
.
identifier
c
symbol
=
identifier
rhs
symbol
.
identifier
c
symbol
;
identifier
NewLine
keyword
else
keyword
if
symbol
(
identifier
c
symbol
=
symbol
=
identifier
i
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
rhs
symbol
.
identifier
c
symbol
=
symbol
=
integerConstant
1
symbol
)
identifier
ans
symbol
.
identifier
c
symbol
=
identifier
i
symbol
;
identifier
NewLine
keyword
else
keyword
if
symbol
(
identifier
rhs
symbol
.
identifier
c
symbol
=
symbol
=
identifier
i
symbol
)
identifier
ans
symbol
.
identifier
c
symbol
=
integerConstant
1
symbol
,
identifier
ans
symbol
.
identifier
flag
symbol
=
identifier
ans
symbol
.
identifier
flag
symbol
;
identifier
NewLine
keyword
else
keyword
if
symbol
(
identifier
rhs
symbol
.
identifier
c
symbol
=
symbol
=
identifier
j
symbol
)
identifier
ans
symbol
.
identifier
c
symbol
=
identifier
k
symbol
;
identifier
NewLine
keyword
else
identifier
ans
symbol
.
identifier
c
symbol
=
identifier
j
symbol
,
identifier
ans
symbol
.
identifier
flag
symbol
=
identifier
ans
symbol
.
identifier
flag
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
else
keyword
if
symbol
(
identifier
c
symbol
=
symbol
=
identifier
j
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
rhs
symbol
.
identifier
c
symbol
=
symbol
=
integerConstant
1
symbol
)
identifier
ans
symbol
.
identifier
c
symbol
=
identifier
j
symbol
;
identifier
NewLine
keyword
else
keyword
if
symbol
(
identifier
rhs
symbol
.
identifier
c
symbol
=
symbol
=
identifier
i
symbol
)
identifier
ans
symbol
.
identifier
c
symbol
=
identifier
k
symbol
,
identifier
ans
symbol
.
identifier
flag
symbol
=
identifier
ans
symbol
.
identifier
flag
symbol
;
identifier
NewLine
keyword
else
keyword
if
symbol
(
identifier
rhs
symbol
.
identifier
c
symbol
=
symbol
=
identifier
j
symbol
)
identifier
ans
symbol
.
identifier
c
symbol
=
integerConstant
1
symbol
,
identifier
ans
symbol
.
identifier
flag
symbol
=
identifier
ans
symbol
.
identifier
flag
symbol
;
identifier
NewLine
keyword
else
identifier
ans
symbol
.
identifier
c
symbol
=
identifier
i
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
else
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
rhs
symbol
.
identifier
c
symbol
=
symbol
=
integerConstant
1
symbol
)
identifier
ans
symbol
.
identifier
c
symbol
=
identifier
k
symbol
;
identifier
NewLine
keyword
else
keyword
if
symbol
(
identifier
rhs
symbol
.
identifier
c
symbol
=
symbol
=
identifier
i
symbol
)
identifier
ans
symbol
.
identifier
c
symbol
=
identifier
j
symbol
;
identifier
NewLine
keyword
else
keyword
if
symbol
(
identifier
rhs
symbol
.
identifier
c
symbol
=
symbol
=
identifier
j
symbol
)
identifier
ans
symbol
.
identifier
c
symbol
=
identifier
i
symbol
,
identifier
ans
symbol
.
identifier
flag
symbol
=
identifier
ans
symbol
.
identifier
flag
symbol
;
identifier
NewLine
keyword
else
identifier
ans
symbol
.
identifier
c
symbol
=
integerConstant
1
symbol
,
identifier
ans
symbol
.
identifier
flag
symbol
=
identifier
ans
symbol
.
identifier
flag
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
identifier
ans
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
symbol
;
identifier
NewLine
identifier
const
identifier
long
identifier
long
identifier
N
symbol
=
integerConstant
11000
symbol
;
identifier
NewLine
identifier
long
identifier
long
identifier
T
symbol
,
identifier
n
symbol
,
identifier
x
symbol
;
identifier
NewLine
identifier
Q
identifier
a
symbol
[
identifier
N
symbol
]
symbol
,
identifier
mul
symbol
;
identifier
NewLine
identifier
string
identifier
s
symbol
;
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
symbol
{
identifier
NewLine
identifier
freopen
symbol
(
stringConstant
C.in
symbol
,
stringConstant
r
symbol
,
identifier
stdin
symbol
)
symbol
;
identifier
NewLine
identifier
freopen
symbol
(
stringConstant
C.out
symbol
,
stringConstant
w
symbol
,
identifier
stdout
symbol
)
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
T
symbol
;
identifier
NewLine
identifier
for
symbol
(
identifier
long
identifier
long
identifier
Ti
symbol
=
integerConstant
1
symbol
;
identifier
Ti
symbol
<
symbol
=
identifier
T
symbol
;
symbol
+
symbol
+
identifier
Ti
symbol
)
symbol
{
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
n
symbol
>
symbol
>
identifier
x
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
s
symbol
;
identifier
NewLine
identifier
for
symbol
(
identifier
long
identifier
long
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
s
symbol
.
identifier
size
symbol
(
symbol
)
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
symbol
{
identifier
NewLine
identifier
a
symbol
[
identifier
i
symbol
+
integerConstant
1
symbol
]
symbol
.
identifier
c
symbol
=
identifier
s
symbol
[
identifier
i
symbol
]
symbol
;
identifier
NewLine
identifier
a
symbol
[
identifier
i
symbol
+
integerConstant
1
symbol
]
symbol
.
identifier
flag
symbol
=
keyword
false
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
mul
symbol
.
identifier
clear
symbol
(
symbol
)
symbol
;
identifier
NewLine
identifier
for
symbol
(
identifier
long
identifier
long
identifier
i
symbol
=
integerConstant
1
symbol
;
identifier
i
symbol
<
symbol
=
identifier
n
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
identifier
mul
symbol
=
identifier
mul
symbol
*
identifier
a
symbol
[
identifier
i
symbol
]
symbol
;
identifier
NewLine
identifier
Q
identifier
tmp
symbol
;
identifier
NewLine
identifier
long
identifier
long
identifier
nx
symbol
=
identifier
x
integerConstant
4
symbol
+
integerConstant
4
symbol
;
identifier
NewLine
identifier
for
symbol
(
identifier
long
identifier
long
identifier
i
symbol
=
integerConstant
1
symbol
;
identifier
i
symbol
<
symbol
=
identifier
nx
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
identifier
tmp
symbol
=
identifier
tmp
symbol
*
identifier
mul
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
tmp
symbol
.
identifier
c
symbol
=
integerConstant
1
symbol
|
symbol
|
identifier
tmp
symbol
.
identifier
flag
symbol
=
keyword
true
symbol
)
symbol
{
identifier
NewLine
identifier
cout
symbol
<
symbol
<
stringConstant
Case #
symbol
<
symbol
<
identifier
Ti
symbol
<
symbol
<
stringConstant
: NO\n
symbol
;
identifier
NewLine
identifier
continue
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
x
symbol
>
integerConstant
100
symbol
)
identifier
x
symbol
=
integerConstant
100
symbol
;
identifier
NewLine
identifier
tmp
symbol
.
identifier
clear
symbol
(
symbol
)
symbol
;
identifier
NewLine
identifier
long
identifier
long
identifier
min
symbol
=
integerConstant
1000000000000000
identifier
ll
symbol
,
identifier
max
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
for
symbol
(
identifier
long
identifier
long
identifier
i
symbol
=
integerConstant
1
symbol
;
identifier
i
symbol
<
symbol
=
identifier
x
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
identifier
NewLine
identifier
for
symbol
(
identifier
long
identifier
long
identifier
j
symbol
=
integerConstant
1
symbol
;
identifier
j
symbol
<
symbol
=
identifier
n
symbol
;
symbol
+
symbol
+
identifier
j
symbol
)
symbol
{
identifier
NewLine
identifier
tmp
symbol
=
identifier
tmp
symbol
*
identifier
a
symbol
[
identifier
j
symbol
]
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
tmp
symbol
.
identifier
c
symbol
=
symbol
=
identifier
i
symbol
&
symbol
&
identifier
tmp
symbol
.
identifier
flag
symbol
=
symbol
=
keyword
false
symbol
)
identifier
NewLine
keyword
if
symbol
(
symbol
(
identifier
i
symbol
-
integerConstant
1
symbol
)
symbol
*
identifier
n
symbol
+
identifier
j
symbol
<
identifier
min
symbol
)
identifier
min
symbol
=
symbol
(
identifier
i
symbol
-
integerConstant
1
symbol
)
symbol
*
identifier
n
symbol
+
identifier
j
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
tmp
symbol
.
identifier
c
symbol
=
symbol
=
identifier
k
symbol
&
symbol
&
identifier
tmp
symbol
.
identifier
flag
symbol
=
symbol
=
keyword
false
symbol
)
identifier
NewLine
keyword
if
symbol
(
symbol
(
identifier
i
symbol
-
integerConstant
1
symbol
)
symbol
*
identifier
n
symbol
+
identifier
j
symbol
>
identifier
max
symbol
)
identifier
max
symbol
=
symbol
(
identifier
i
symbol
-
integerConstant
1
symbol
)
symbol
*
identifier
n
symbol
+
identifier
j
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
min
symbol
<
integerConstant
1000000000000000
identifier
ll
symbol
&
symbol
&
identifier
max
symbol
>
integerConstant
0
symbol
&
symbol
&
identifier
min
symbol
<
identifier
max
symbol
)
identifier
NewLine
identifier
cout
symbol
<
symbol
<
stringConstant
Case #
symbol
<
symbol
<
identifier
Ti
symbol
<
symbol
<
stringConstant
: YES\n
symbol
;
identifier
NewLine
keyword
else
identifier
NewLine
identifier
cout
symbol
<
symbol
<
stringConstant
Case #
symbol
<
symbol
<
identifier
Ti
symbol
<
symbol
<
stringConstant
: NO\n
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/tailed.0.cpp file...

identifier
include
symbol
<
identifier
bits
symbol
/
identifier
stdc
symbol
+
symbol
+
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
identifier
define
identifier
rep
symbol
(
identifier
i
symbol
,
identifier
n
symbol
)
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
keyword
int
symbol
(
identifier
n
symbol
)
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
identifier
NewLine
identifier
define
identifier
sz
symbol
(
identifier
v
symbol
)
symbol
(
symbol
(
keyword
int
symbol
)
symbol
(
identifier
v
symbol
)
symbol
.
identifier
size
symbol
(
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
all
symbol
(
identifier
v
symbol
)
symbol
(
identifier
v
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
,
symbol
(
identifier
v
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
identifier
NewLine
identifier
typedef
identifier
long
identifier
long
identifier
ll
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
TC
symbol
;
identifier
NewLine
keyword
void
identifier
solve
symbol
(
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
n
symbol
;
identifier
NewLine
identifier
string
identifier
a
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
n
symbol
>
symbol
>
identifier
a
symbol
;
identifier
NewLine
keyword
int
identifier
s
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
keyword
int
identifier
ans
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
rep
symbol
(
identifier
i
symbol
,
identifier
n
symbol
+
integerConstant
1
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
k
symbol
=
identifier
a
symbol
[
identifier
i
symbol
]
symbol
-
integerConstant
0
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
s
symbol
<
identifier
i
symbol
)
symbol
{
identifier
NewLine
identifier
ans
symbol
+
symbol
=
identifier
i
symbol
-
identifier
s
symbol
;
identifier
NewLine
identifier
s
symbol
=
identifier
i
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
s
symbol
+
symbol
=
identifier
k
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
cout
symbol
<
symbol
<
identifier
ans
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
identifier
NewLine
symbol
}
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
T
symbol
;
identifier
cin
symbol
>
symbol
>
identifier
T
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
TC
symbol
=
integerConstant
1
symbol
;
identifier
TC
symbol
<
symbol
=
identifier
T
symbol
;
identifier
TC
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
cout
symbol
<
symbol
<
stringConstant
Case #
symbol
<
symbol
<
identifier
TC
symbol
<
symbol
<
stringConstant
: 
symbol
;
identifier
NewLine
identifier
solve
symbol
(
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/tailed.1.cpp file...

identifier
include
symbol
<
identifier
bits
symbol
/
identifier
stdc
symbol
+
symbol
+
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
identifier
define
identifier
rep
symbol
(
identifier
i
symbol
,
identifier
n
symbol
)
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
keyword
int
symbol
(
identifier
n
symbol
)
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
identifier
NewLine
identifier
define
identifier
sz
symbol
(
identifier
v
symbol
)
symbol
(
symbol
(
keyword
int
symbol
)
symbol
(
identifier
v
symbol
)
symbol
.
identifier
size
symbol
(
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
all
symbol
(
identifier
v
symbol
)
symbol
(
identifier
v
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
,
symbol
(
identifier
v
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
identifier
NewLine
identifier
typedef
identifier
long
identifier
long
identifier
ll
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
TC
symbol
;
identifier
NewLine
keyword
void
identifier
solve
symbol
(
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
D
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
D
symbol
;
identifier
NewLine
keyword
int
identifier
P
symbol
[
identifier
D
symbol
]
symbol
;
identifier
NewLine
identifier
rep
symbol
(
identifier
i
symbol
,
identifier
D
symbol
)
identifier
cin
symbol
>
symbol
>
identifier
P
symbol
[
identifier
i
symbol
]
symbol
;
identifier
NewLine
keyword
int
identifier
ans
symbol
=
integerConstant
1000
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
m
symbol
=
integerConstant
1
symbol
;
identifier
m
symbol
<
symbol
=
integerConstant
1000
symbol
;
identifier
m
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
sp
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
rep
symbol
(
identifier
i
symbol
,
identifier
D
symbol
)
identifier
sp
symbol
+
symbol
=
symbol
(
identifier
P
symbol
[
identifier
i
symbol
]
symbol
-
integerConstant
1
symbol
)
symbol
/
identifier
m
symbol
;
identifier
NewLine
identifier
ans
symbol
=
identifier
min
symbol
(
identifier
ans
symbol
,
identifier
sp
symbol
+
identifier
m
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
cout
symbol
<
symbol
<
identifier
ans
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
T
symbol
;
identifier
cin
symbol
>
symbol
>
identifier
T
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
TC
symbol
=
integerConstant
1
symbol
;
identifier
TC
symbol
<
symbol
=
identifier
T
symbol
;
identifier
TC
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
cout
symbol
<
symbol
<
stringConstant
Case #
symbol
<
symbol
<
identifier
TC
symbol
<
symbol
<
stringConstant
: 
symbol
;
identifier
NewLine
identifier
solve
symbol
(
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/tailed.2.cpp file...

identifier
include
symbol
<
identifier
bits
symbol
/
identifier
stdc
symbol
+
symbol
+
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
identifier
define
identifier
rep
symbol
(
identifier
i
symbol
,
identifier
n
symbol
)
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
keyword
int
symbol
(
identifier
n
symbol
)
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
identifier
NewLine
identifier
define
identifier
sz
symbol
(
identifier
v
symbol
)
symbol
(
symbol
(
keyword
int
symbol
)
symbol
(
identifier
v
symbol
)
symbol
.
identifier
size
symbol
(
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
all
symbol
(
identifier
v
symbol
)
symbol
(
identifier
v
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
,
symbol
(
identifier
v
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
identifier
NewLine
identifier
typedef
identifier
long
identifier
long
identifier
ll
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
TC
symbol
;
identifier
NewLine
identifier
NewLine
identifier
NewLine
keyword
int
identifier
M
symbol
[
integerConstant
4
symbol
]
symbol
[
integerConstant
4
symbol
]
symbol
=
symbol
{
identifier
NewLine
symbol
{
integerConstant
1
symbol
,
integerConstant
2
symbol
,
integerConstant
3
symbol
,
integerConstant
4
symbol
}
symbol
,
identifier
NewLine
symbol
{
integerConstant
2
symbol
,
symbol
-
integerConstant
1
symbol
,
integerConstant
4
symbol
,
symbol
-
integerConstant
3
symbol
}
symbol
,
identifier
NewLine
symbol
{
integerConstant
3
symbol
,
symbol
-
integerConstant
4
symbol
,
symbol
-
integerConstant
1
symbol
,
integerConstant
2
symbol
}
symbol
,
identifier
NewLine
symbol
{
integerConstant
4
symbol
,
integerConstant
3
symbol
,
symbol
-
integerConstant
2
symbol
,
symbol
-
integerConstant
1
symbol
}
symbol
,
identifier
NewLine
symbol
}
symbol
;
identifier
NewLine
keyword
int
identifier
mult
symbol
(
keyword
int
identifier
a
symbol
,
keyword
int
identifier
b
symbol
)
symbol
{
identifier
NewLine
keyword
return
identifier
M
symbol
[
identifier
abs
symbol
(
identifier
a
symbol
)
symbol
-
integerConstant
1
symbol
]
symbol
[
identifier
abs
symbol
(
identifier
b
symbol
)
symbol
-
integerConstant
1
symbol
]
symbol
*
symbol
(
identifier
a
symbol
*
identifier
b
symbol
>
integerConstant
0
integerConstant
1
symbol
-
integerConstant
1
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
void
identifier
solve
symbol
(
symbol
)
symbol
{
identifier
NewLine
identifier
ll
identifier
L
symbol
,
identifier
X
symbol
;
identifier
NewLine
identifier
string
identifier
s
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
L
symbol
>
symbol
>
identifier
X
symbol
>
symbol
>
identifier
s
symbol
;
identifier
NewLine
identifier
ll
identifier
ipos
symbol
=
symbol
-
integerConstant
1
symbol
,
identifier
kpos
symbol
=
symbol
-
integerConstant
1
symbol
;
identifier
NewLine
identifier
ll
identifier
cur
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
identifier
string
identifier
t
symbol
;
identifier
NewLine
identifier
rep
symbol
(
identifier
i
symbol
,
integerConstant
4
symbol
)
identifier
t
symbol
+
symbol
=
identifier
s
symbol
;
identifier
NewLine
identifier
NewLine
identifier
cur
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
identifier
rep
symbol
(
identifier
i
symbol
,
identifier
L
symbol
)
identifier
cur
symbol
=
identifier
mult
symbol
(
identifier
cur
symbol
,
identifier
t
symbol
[
identifier
i
symbol
]
symbol
-
identifier
i
symbol
+
integerConstant
2
symbol
)
symbol
;
identifier
NewLine
identifier
bool
identifier
ok
symbol
=
keyword
false
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
abs
symbol
(
identifier
cur
symbol
)
symbol
=
symbol
=
integerConstant
1
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
cur
symbol
=
symbol
=
symbol
-
integerConstant
1
symbol
&
symbol
&
identifier
X
integerConstant
2
symbol
=
symbol
=
integerConstant
1
symbol
)
identifier
ok
symbol
=
keyword
true
symbol
;
identifier
NewLine
symbol
}
keyword
else
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
X
integerConstant
4
symbol
=
symbol
=
integerConstant
2
symbol
)
identifier
ok
symbol
=
keyword
true
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
ok
symbol
)
symbol
{
identifier
NewLine
identifier
cout
symbol
<
symbol
<
stringConstant
NO
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
keyword
return
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
cur
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
identifier
rep
symbol
(
identifier
i
symbol
,
integerConstant
4
symbol
*
identifier
L
symbol
)
symbol
{
identifier
NewLine
identifier
cur
symbol
=
identifier
mult
symbol
(
identifier
cur
symbol
,
identifier
t
symbol
[
identifier
i
symbol
]
symbol
-
identifier
i
symbol
+
integerConstant
2
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
cur
symbol
=
symbol
=
integerConstant
2
symbol
&
symbol
&
identifier
ipos
symbol
=
symbol
=
symbol
-
integerConstant
1
symbol
)
identifier
ipos
symbol
=
identifier
i
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
cur
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
identifier
rep
symbol
(
identifier
i
symbol
,
integerConstant
4
symbol
*
identifier
L
symbol
)
symbol
{
identifier
NewLine
identifier
cur
symbol
=
identifier
mult
symbol
(
identifier
t
symbol
[
integerConstant
4
symbol
*
identifier
L
symbol
-
integerConstant
1
symbol
-
identifier
i
symbol
]
symbol
-
identifier
i
symbol
+
integerConstant
2
symbol
,
identifier
cur
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
cur
symbol
=
symbol
=
integerConstant
4
symbol
&
symbol
&
identifier
kpos
symbol
=
symbol
=
symbol
-
integerConstant
1
symbol
)
identifier
kpos
symbol
=
identifier
i
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
ipos
symbol
=
symbol
-
integerConstant
1
symbol
&
symbol
&
identifier
kpos
symbol
=
symbol
-
integerConstant
1
symbol
&
symbol
&
identifier
ipos
symbol
<
identifier
L
symbol
*
identifier
X
symbol
-
integerConstant
1
symbol
-
identifier
kpos
symbol
)
symbol
{
identifier
NewLine
identifier
cout
symbol
<
symbol
<
stringConstant
YES
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
symbol
}
keyword
else
symbol
{
identifier
NewLine
identifier
cout
symbol
<
symbol
<
stringConstant
NO
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
T
symbol
;
identifier
cin
symbol
>
symbol
>
identifier
T
symbol
;
identifier
NewLine
identifier
for
symbol
(
identifier
TC
symbol
=
integerConstant
1
symbol
;
identifier
TC
symbol
<
symbol
=
identifier
T
symbol
;
identifier
TC
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
cout
symbol
<
symbol
<
stringConstant
Case #
symbol
<
symbol
<
identifier
TC
symbol
<
symbol
<
stringConstant
: 
symbol
;
identifier
NewLine
identifier
solve
symbol
(
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/TheNatural.0.cpp file...

identifier
NewLine
identifier
include
symbol
<
identifier
iostream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
fstream
symbol
>
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
n
symbol
;
identifier
NewLine
keyword
int
identifier
aud
symbol
[
integerConstant
1005
symbol
]
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
ifstream
identifier
fin
symbol
(
stringConstant
A-large.in
symbol
)
symbol
;
identifier
NewLine
identifier
ofstream
identifier
fout
symbol
(
stringConstant
A-large.txt
symbol
)
symbol
;
identifier
NewLine
keyword
int
identifier
t
symbol
;
identifier
NewLine
identifier
fin
symbol
>
symbol
>
identifier
t
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
h
symbol
=
integerConstant
1
symbol
;
identifier
h
symbol
<
symbol
=
identifier
t
symbol
;
identifier
h
symbol
+
symbol
+
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
fin
symbol
>
symbol
>
identifier
n
symbol
;
identifier
NewLine
keyword
char
identifier
c
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
symbol
=
identifier
n
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
fin
symbol
>
symbol
>
identifier
c
symbol
;
identifier
NewLine
identifier
aud
symbol
[
identifier
i
symbol
]
symbol
=
symbol
(
keyword
int
symbol
)
symbol
(
identifier
c
symbol
-
integerConstant
0
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
int
identifier
running
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
keyword
int
identifier
cnt
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
symbol
=
identifier
n
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
running
symbol
<
identifier
i
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
cnt
symbol
+
symbol
=
identifier
i
symbol
-
identifier
running
symbol
;
identifier
NewLine
identifier
running
symbol
=
identifier
i
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
running
symbol
+
symbol
=
identifier
aud
symbol
[
identifier
i
symbol
]
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
fout
symbol
<
symbol
<
stringConstant
Case #
symbol
<
symbol
<
identifier
h
symbol
<
symbol
<
stringConstant
: 
symbol
<
symbol
<
identifier
cnt
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/TheNatural.1.cpp file...

identifier
NewLine
identifier
include
symbol
<
identifier
iostream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
fstream
symbol
>
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
n
symbol
;
identifier
NewLine
keyword
int
identifier
diner
symbol
[
integerConstant
1005
symbol
]
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
ifstream
identifier
fin
symbol
(
stringConstant
B-large.in
symbol
)
symbol
;
identifier
NewLine
identifier
ofstream
identifier
fout
symbol
(
stringConstant
B-large.txt
symbol
)
symbol
;
identifier
NewLine
keyword
int
identifier
t
symbol
;
identifier
NewLine
identifier
fin
symbol
>
symbol
>
identifier
t
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
h
symbol
=
integerConstant
1
symbol
;
identifier
h
symbol
<
symbol
=
identifier
t
symbol
;
identifier
h
symbol
+
symbol
+
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
fin
symbol
>
symbol
>
identifier
n
symbol
;
identifier
NewLine
keyword
int
identifier
mx
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
n
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
fin
symbol
>
symbol
>
identifier
diner
symbol
[
identifier
i
symbol
]
symbol
;
identifier
NewLine
identifier
mx
symbol
=
symbol
(
identifier
mx
symbol
>
identifier
diner
symbol
[
identifier
i
symbol
]
symbol
)
identifier
mx
identifier
diner
symbol
[
identifier
i
symbol
]
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
int
identifier
mn
symbol
=
integerConstant
999999999
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
1
symbol
;
identifier
i
symbol
<
symbol
=
identifier
mx
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
int
identifier
cnt
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
j
symbol
=
integerConstant
0
symbol
;
identifier
j
symbol
<
identifier
n
symbol
;
identifier
j
symbol
+
symbol
+
symbol
)
identifier
cnt
symbol
+
symbol
=
symbol
(
identifier
diner
symbol
[
identifier
j
symbol
]
symbol
-
integerConstant
1
symbol
)
symbol
/
identifier
i
symbol
;
identifier
NewLine
identifier
cnt
symbol
+
symbol
=
identifier
i
symbol
;
identifier
NewLine
identifier
mn
symbol
=
symbol
(
identifier
mn
symbol
<
identifier
cnt
symbol
)
identifier
mn
identifier
cnt
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
fout
symbol
<
symbol
<
stringConstant
Case #
symbol
<
symbol
<
identifier
h
symbol
<
symbol
<
stringConstant
: 
symbol
<
symbol
<
identifier
mn
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/TheNatural.2.cpp file...

identifier
NewLine
identifier
include
symbol
<
identifier
iostream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
fstream
symbol
>
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
identifier
long
identifier
long
identifier
l
symbol
;
identifier
NewLine
identifier
long
identifier
long
identifier
x
symbol
;
identifier
NewLine
identifier
long
identifier
long
identifier
abb
symbol
;
identifier
NewLine
keyword
int
identifier
s
symbol
[
integerConstant
10005
symbol
]
symbol
;
identifier
NewLine
keyword
int
identifier
mult
symbol
[
integerConstant
4
symbol
]
symbol
[
integerConstant
4
symbol
]
symbol
=
identifier
NewLine
symbol
{
identifier
NewLine
symbol
{
integerConstant
0
symbol
,
integerConstant
1
symbol
,
integerConstant
2
symbol
,
integerConstant
3
symbol
}
symbol
,
identifier
NewLine
symbol
{
integerConstant
1
symbol
,
integerConstant
4
symbol
,
integerConstant
3
symbol
,
integerConstant
6
symbol
}
symbol
,
identifier
NewLine
symbol
{
integerConstant
2
symbol
,
integerConstant
7
symbol
,
integerConstant
4
symbol
,
integerConstant
1
symbol
}
symbol
,
identifier
NewLine
symbol
{
integerConstant
3
symbol
,
integerConstant
2
symbol
,
integerConstant
5
symbol
,
integerConstant
4
symbol
}
identifier
NewLine
symbol
}
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
prod
symbol
(
keyword
int
identifier
a
symbol
,
keyword
int
identifier
b
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
int
identifier
m
symbol
=
identifier
mult
symbol
[
identifier
a
integerConstant
4
symbol
]
symbol
[
identifier
b
integerConstant
4
symbol
]
symbol
;
identifier
NewLine
keyword
if
symbol
(
symbol
(
identifier
a
symbol
>
integerConstant
3
symbol
)
symbol
(
identifier
b
symbol
>
integerConstant
3
symbol
)
symbol
)
identifier
m
symbol
=
symbol
(
identifier
m
symbol
+
integerConstant
4
symbol
)
integerConstant
8
symbol
;
identifier
NewLine
keyword
return
identifier
m
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
ifstream
identifier
fin
symbol
(
stringConstant
C-large.in
symbol
)
symbol
;
identifier
NewLine
identifier
ofstream
identifier
fout
symbol
(
stringConstant
C-large.txt
symbol
)
symbol
;
identifier
NewLine
keyword
int
identifier
t
symbol
;
identifier
NewLine
identifier
fin
symbol
>
symbol
>
identifier
t
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
h
symbol
=
integerConstant
1
symbol
;
identifier
h
symbol
<
symbol
=
identifier
t
symbol
;
identifier
h
symbol
+
symbol
+
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
fin
symbol
>
symbol
>
identifier
l
symbol
>
symbol
>
identifier
x
symbol
;
identifier
NewLine
keyword
char
identifier
c
symbol
;
identifier
NewLine
identifier
for
symbol
(
identifier
long
identifier
long
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
l
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
fin
symbol
>
symbol
>
identifier
c
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
c
symbol
=
symbol
=
identifier
i
symbol
)
identifier
s
symbol
[
identifier
i
symbol
]
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
keyword
else
keyword
if
symbol
(
identifier
c
symbol
=
symbol
=
identifier
j
symbol
)
identifier
s
symbol
[
identifier
i
symbol
]
symbol
=
integerConstant
2
symbol
;
identifier
NewLine
keyword
else
identifier
s
symbol
[
identifier
i
symbol
]
symbol
=
integerConstant
3
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
abb
symbol
=
symbol
(
identifier
x
symbol
<
symbol
(
identifier
x
integerConstant
4
symbol
+
integerConstant
12
symbol
)
symbol
)
identifier
x
symbol
(
identifier
x
integerConstant
4
symbol
+
integerConstant
12
symbol
)
symbol
;
identifier
NewLine
keyword
int
identifier
p
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
keyword
int
identifier
pos
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
keyword
while
symbol
(
identifier
pos
symbol
<
identifier
abb
symbol
*
identifier
l
symbol
&
symbol
&
identifier
p
symbol
=
integerConstant
1
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
p
symbol
=
identifier
prod
symbol
(
identifier
p
symbol
,
identifier
s
symbol
[
identifier
pos
identifier
l
symbol
]
symbol
)
symbol
;
identifier
NewLine
identifier
pos
symbol
+
symbol
+
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
p
symbol
=
integerConstant
1
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
fout
symbol
<
symbol
<
stringConstant
Case #
symbol
<
symbol
<
identifier
h
symbol
<
symbol
<
stringConstant
: NO
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
identifier
continue
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
p
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
keyword
while
symbol
(
identifier
pos
symbol
<
identifier
abb
symbol
*
identifier
l
symbol
&
symbol
&
identifier
p
symbol
=
integerConstant
2
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
p
symbol
=
identifier
prod
symbol
(
identifier
p
symbol
,
identifier
s
symbol
[
identifier
pos
identifier
l
symbol
]
symbol
)
symbol
;
identifier
NewLine
identifier
pos
symbol
+
symbol
+
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
p
symbol
=
integerConstant
2
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
fout
symbol
<
symbol
<
stringConstant
Case #
symbol
<
symbol
<
identifier
h
symbol
<
symbol
<
stringConstant
: NO
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
identifier
continue
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
p
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
keyword
while
symbol
(
identifier
pos
symbol
<
identifier
abb
symbol
*
identifier
l
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
p
symbol
=
identifier
prod
symbol
(
identifier
p
symbol
,
identifier
s
symbol
[
identifier
pos
identifier
l
symbol
]
symbol
)
symbol
;
identifier
NewLine
identifier
pos
symbol
+
symbol
+
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
p
symbol
=
integerConstant
3
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
fout
symbol
<
symbol
<
stringConstant
Case #
symbol
<
symbol
<
identifier
h
symbol
<
symbol
<
stringConstant
: NO
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
identifier
continue
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
fout
symbol
<
symbol
<
stringConstant
Case #
symbol
<
symbol
<
identifier
h
symbol
<
symbol
<
stringConstant
: YES
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/TrueBamboo.0.cpp file...

identifier
include
symbol
<
identifier
cmath
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstdio
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
vector
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
iostream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
algorithm
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
fstream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstring
symbol
>
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
identifier
FILE
symbol
*
identifier
fin
symbol
=
identifier
freopen
symbol
(
stringConstant
in.txt
symbol
,
stringConstant
r
symbol
,
identifier
stdin
symbol
)
symbol
;
identifier
NewLine
identifier
FILE
symbol
*
identifier
fout
symbol
=
identifier
freopen
symbol
(
stringConstant
out.txt
symbol
,
stringConstant
w
symbol
,
identifier
stdout
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
T
symbol
,
identifier
t
symbol
,
identifier
n
symbol
,
identifier
i
symbol
,
identifier
s
symbol
,
identifier
m
symbol
,
identifier
p
symbol
;
identifier
NewLine
keyword
char
identifier
a
symbol
[
integerConstant
1100
symbol
]
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
T
symbol
;
identifier
NewLine
identifier
for
symbol
(
identifier
t
symbol
=
integerConstant
1
symbol
;
identifier
t
symbol
<
symbol
=
identifier
T
symbol
;
identifier
t
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d%s
symbol
,
symbol
&
identifier
n
symbol
,
identifier
a
symbol
)
symbol
;
identifier
NewLine
identifier
s
symbol
=
identifier
a
symbol
[
integerConstant
0
symbol
]
symbol
-
integerConstant
0
symbol
;
identifier
NewLine
identifier
m
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
for
symbol
(
identifier
i
symbol
=
integerConstant
1
symbol
;
identifier
i
symbol
<
symbol
=
identifier
n
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
p
symbol
=
identifier
max
symbol
(
integerConstant
0
symbol
,
identifier
i
symbol
-
identifier
s
symbol
)
symbol
;
identifier
NewLine
identifier
m
symbol
+
symbol
=
identifier
p
symbol
;
identifier
NewLine
identifier
s
symbol
+
symbol
=
identifier
a
symbol
[
identifier
i
symbol
]
symbol
-
integerConstant
0
symbol
+
identifier
p
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: %d\n
symbol
,
identifier
t
symbol
,
identifier
m
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/TrueBamboo.1.cpp file...

identifier
include
symbol
<
identifier
cmath
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstdio
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
vector
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
iostream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
algorithm
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
fstream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstring
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
queue
symbol
>
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
identifier
FILE
symbol
*
identifier
fin
symbol
=
identifier
freopen
symbol
(
stringConstant
in.txt
symbol
,
stringConstant
r
symbol
,
identifier
stdin
symbol
)
symbol
;
identifier
NewLine
identifier
FILE
symbol
*
identifier
fout
symbol
=
identifier
freopen
symbol
(
stringConstant
out.txt
symbol
,
stringConstant
w
symbol
,
identifier
stdout
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
T
symbol
,
identifier
t
symbol
,
identifier
n
symbol
,
identifier
i
symbol
,
identifier
j
symbol
,
identifier
m
symbol
,
identifier
ans
symbol
,
identifier
a
symbol
[
integerConstant
1100
symbol
]
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
T
symbol
;
identifier
NewLine
identifier
for
symbol
(
identifier
t
symbol
=
integerConstant
1
symbol
;
identifier
t
symbol
<
symbol
=
identifier
T
symbol
;
identifier
t
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
n
symbol
;
identifier
NewLine
identifier
for
symbol
(
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
n
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
identifier
a
symbol
+
identifier
i
symbol
)
symbol
;
identifier
NewLine
identifier
sort
symbol
(
identifier
a
symbol
,
identifier
a
symbol
+
identifier
n
symbol
)
symbol
;
identifier
NewLine
identifier
ans
symbol
=
integerConstant
9999
symbol
;
identifier
NewLine
identifier
for
symbol
(
identifier
m
symbol
=
integerConstant
1
symbol
;
identifier
m
symbol
<
symbol
=
identifier
a
symbol
[
identifier
n
symbol
-
integerConstant
1
symbol
]
symbol
;
identifier
m
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
j
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
for
symbol
(
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
n
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
j
symbol
+
symbol
=
symbol
(
identifier
a
symbol
[
identifier
i
symbol
]
symbol
-
integerConstant
1
symbol
)
symbol
/
identifier
m
symbol
;
identifier
NewLine
identifier
ans
symbol
=
identifier
min
symbol
(
identifier
ans
symbol
,
identifier
j
symbol
+
identifier
m
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: %d\n
symbol
,
identifier
t
symbol
,
identifier
ans
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/TrueBamboo.2.cpp file...

identifier
include
symbol
<
identifier
cmath
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstdio
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
vector
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
iostream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
algorithm
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
fstream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstring
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
queue
symbol
>
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
identifier
FILE
symbol
*
identifier
fin
symbol
=
identifier
freopen
symbol
(
stringConstant
in.txt
symbol
,
stringConstant
r
symbol
,
identifier
stdin
symbol
)
symbol
;
identifier
NewLine
identifier
FILE
symbol
*
identifier
fout
symbol
=
identifier
freopen
symbol
(
stringConstant
out.txt
symbol
,
stringConstant
w
symbol
,
identifier
stdout
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
identifier
struct
identifier
ee
symbol
{
identifier
NewLine
keyword
char
identifier
c
symbol
;
identifier
NewLine
keyword
int
identifier
p
symbol
;
identifier
NewLine
symbol
}
symbol
;
identifier
NewLine
keyword
char
identifier
s
symbol
[
integerConstant
11000
symbol
]
symbol
;
identifier
NewLine
identifier
NewLine
identifier
inline
identifier
ee
identifier
mul
symbol
(
identifier
ee
identifier
a
symbol
,
keyword
char
identifier
ch
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
a
symbol
.
identifier
c
symbol
=
symbol
=
integerConstant
1
symbol
)
identifier
NewLine
identifier
a
symbol
.
identifier
c
symbol
=
identifier
ch
symbol
;
identifier
NewLine
keyword
else
keyword
if
symbol
(
identifier
a
symbol
.
identifier
c
symbol
=
symbol
=
identifier
ch
symbol
)
symbol
{
identifier
NewLine
identifier
a
symbol
.
identifier
c
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
identifier
a
symbol
.
identifier
p
symbol
*
symbol
=
symbol
-
integerConstant
1
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
else
symbol
{
identifier
NewLine
keyword
int
identifier
k
symbol
=
identifier
a
symbol
.
identifier
c
symbol
-
identifier
i
symbol
+
identifier
ch
symbol
-
identifier
i
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
k
symbol
=
symbol
=
integerConstant
1
symbol
)
symbol
{
identifier
NewLine
identifier
a
symbol
.
identifier
c
symbol
=
identifier
k
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
ch
symbol
=
symbol
=
identifier
i
symbol
)
identifier
NewLine
identifier
a
symbol
.
identifier
p
symbol
*
symbol
=
symbol
-
integerConstant
1
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
k
symbol
=
symbol
=
integerConstant
2
symbol
)
symbol
{
identifier
NewLine
identifier
a
symbol
.
identifier
c
symbol
=
identifier
j
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
ch
symbol
=
symbol
=
identifier
k
symbol
)
identifier
NewLine
identifier
a
symbol
.
identifier
p
symbol
*
symbol
=
symbol
-
integerConstant
1
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
k
symbol
=
symbol
=
integerConstant
3
symbol
)
symbol
{
identifier
NewLine
identifier
a
symbol
.
identifier
c
symbol
=
identifier
i
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
ch
symbol
=
symbol
=
identifier
j
symbol
)
identifier
NewLine
identifier
a
symbol
.
identifier
p
symbol
*
symbol
=
symbol
-
integerConstant
1
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
identifier
a
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
T
symbol
,
identifier
t
symbol
,
identifier
n
symbol
,
identifier
i
symbol
,
identifier
j
symbol
,
identifier
k
symbol
,
identifier
l
symbol
,
identifier
x
symbol
;
identifier
NewLine
identifier
long
identifier
long
identifier
xx
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
T
symbol
;
identifier
NewLine
identifier
for
symbol
(
identifier
t
symbol
=
integerConstant
1
symbol
;
identifier
t
symbol
<
symbol
=
identifier
T
symbol
;
identifier
t
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
l
symbol
>
symbol
>
identifier
xx
symbol
;
identifier
NewLine
identifier
x
symbol
=
symbol
(
keyword
int
symbol
)
symbol
(
identifier
min
symbol
(
identifier
xx
integerConstant
4
symbol
+
integerConstant
12
symbol
,
identifier
xx
symbol
)
symbol
)
symbol
;
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%s
symbol
,
identifier
s
symbol
)
symbol
;
identifier
NewLine
identifier
ee
identifier
ans
symbol
;
identifier
NewLine
identifier
ans
symbol
.
identifier
c
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
identifier
ans
symbol
.
identifier
p
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
identifier
i
symbol
=
identifier
j
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
for
symbol
(
symbol
;
identifier
x
symbol
;
identifier
x
symbol
-
symbol
-
symbol
)
identifier
NewLine
identifier
for
symbol
(
identifier
k
symbol
=
integerConstant
0
symbol
;
identifier
k
symbol
<
identifier
l
symbol
;
identifier
k
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
ans
symbol
=
identifier
mul
symbol
(
identifier
ans
symbol
,
identifier
s
symbol
[
identifier
k
symbol
]
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
ans
symbol
.
identifier
p
symbol
=
symbol
=
integerConstant
1
symbol
&
symbol
&
identifier
ans
symbol
.
identifier
c
symbol
=
symbol
=
identifier
i
symbol
)
identifier
NewLine
identifier
i
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
keyword
else
keyword
if
symbol
(
identifier
ans
symbol
.
identifier
p
symbol
=
symbol
=
integerConstant
1
symbol
&
symbol
&
identifier
ans
symbol
.
identifier
c
symbol
=
symbol
=
identifier
k
symbol
&
symbol
&
identifier
i
symbol
)
identifier
NewLine
identifier
j
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
i
symbol
&
symbol
&
identifier
j
symbol
&
symbol
&
identifier
ans
symbol
.
identifier
p
symbol
=
symbol
=
symbol
-
integerConstant
1
symbol
&
symbol
&
identifier
ans
symbol
.
identifier
c
symbol
=
symbol
=
integerConstant
1
symbol
)
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: YES\n
symbol
,
identifier
t
symbol
)
symbol
;
identifier
NewLine
keyword
else
identifier
printf
symbol
(
stringConstant
Case #%d: NO\n
symbol
,
identifier
t
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/tur.turczyn.0.cpp file...

identifier
NewLine
identifier
ifdef
identifier
MSC
identifier
VER
identifier
NewLine
identifier
define
identifier
CRT
identifier
SECURE
identifier
NO
identifier
WARNINGS
identifier
NewLine
identifier
endif
identifier
NewLine
identifier
NewLine
identifier
include
symbol
<
identifier
cstdio
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstdlib
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cmath
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
string
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
iostream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
set
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
map
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
list
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
queue
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
deque
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
vector
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
algorithm
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
iterator
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cassert
symbol
>
identifier
NewLine
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
identifier
typedef
identifier
unsigned
identifier
long
identifier
long
identifier
llong
symbol
;
identifier
NewLine
identifier
typedef
identifier
long
identifier
double
identifier
ldouble
symbol
;
identifier
NewLine
identifier
typedef
identifier
pair
symbol
<
keyword
int
symbol
,
keyword
int
symbol
>
identifier
pint
symbol
;
identifier
NewLine
identifier
typedef
identifier
pair
symbol
<
identifier
double
symbol
,
identifier
double
symbol
>
identifier
pdouble
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
keyword
int
symbol
>
identifier
vint
symbol
;
identifier
NewLine
identifier
typedef
identifier
vint
identifier
iterator
identifier
vit
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
identifier
double
symbol
>
identifier
vdouble
symbol
;
identifier
NewLine
identifier
typedef
identifier
vdouble
identifier
iterator
identifier
vdit
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
identifier
ldouble
symbol
>
identifier
vldouble
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
identifier
string
symbol
>
identifier
vstring
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
identifier
llong
symbol
>
identifier
vllong
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
identifier
vint
symbol
>
identifier
graph
symbol
;
identifier
NewLine
identifier
NewLine
identifier
define
identifier
FOR
symbol
(
identifier
v
symbol
,
identifier
p
symbol
,
identifier
k
symbol
)
identifier
for
symbol
(
keyword
int
identifier
v
symbol
=
identifier
p
symbol
;
identifier
v
symbol
<
symbol
=
identifier
k
symbol
;
symbol
+
symbol
+
identifier
v
symbol
)
identifier
NewLine
identifier
define
identifier
FORD
symbol
(
identifier
v
symbol
,
identifier
p
symbol
,
identifier
k
symbol
)
identifier
for
symbol
(
keyword
int
identifier
v
symbol
=
identifier
p
symbol
;
identifier
v
symbol
>
symbol
=
identifier
k
symbol
;
symbol
-
symbol
-
identifier
v
symbol
)
identifier
NewLine
identifier
define
identifier
REP
symbol
(
identifier
i
symbol
,
identifier
n
symbol
)
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
symbol
(
identifier
n
symbol
)
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
identifier
NewLine
identifier
ifdef
identifier
MSC
identifier
VER
identifier
NewLine
identifier
define
identifier
VAR
symbol
(
identifier
v
symbol
,
identifier
i
symbol
)
identifier
auto
identifier
v
symbol
=
symbol
(
identifier
i
symbol
)
identifier
NewLine
keyword
else
identifier
NewLine
identifier
define
identifier
VAR
symbol
(
identifier
v
symbol
,
identifier
i
symbol
)
identifier
typeof
symbol
(
identifier
i
symbol
)
identifier
v
symbol
=
symbol
(
identifier
i
symbol
)
identifier
NewLine
identifier
endif
identifier
NewLine
identifier
define
identifier
FOREACH
symbol
(
identifier
i
symbol
,
identifier
c
symbol
)
identifier
for
symbol
(
identifier
VAR
symbol
(
identifier
i
symbol
,
symbol
(
identifier
c
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
)
symbol
;
identifier
i
symbol
=
symbol
(
identifier
c
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
identifier
NewLine
identifier
define
identifier
SIZE
symbol
(
identifier
x
symbol
)
symbol
(
keyword
int
symbol
)
identifier
x
symbol
.
identifier
size
symbol
(
symbol
)
identifier
NewLine
identifier
define
identifier
ALL
symbol
(
identifier
c
symbol
)
identifier
c
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
,
identifier
c
symbol
.
identifier
end
symbol
(
symbol
)
identifier
NewLine
identifier
NewLine
identifier
define
identifier
ADD
identifier
EDGE
symbol
(
identifier
g
symbol
,
identifier
u
symbol
,
identifier
v
symbol
)
identifier
g
symbol
[
identifier
u
symbol
]
symbol
.
identifier
push
identifier
back
symbol
(
identifier
v
symbol
)
symbol
,
identifier
g
symbol
[
identifier
v
symbol
]
symbol
.
identifier
push
identifier
back
symbol
(
identifier
u
symbol
)
identifier
NewLine
identifier
NewLine
identifier
define
identifier
ST
identifier
first
identifier
NewLine
identifier
define
identifier
ND
identifier
second
identifier
NewLine
identifier
define
identifier
INF
integerConstant
1000000000
identifier
NewLine
identifier
define
identifier
INFL
integerConstant
1000000000000000000
identifier
LL
identifier
NewLine
identifier
define
identifier
EPS
integerConstant
1
identifier
e
symbol
-
integerConstant
5
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
int
identifier
T
symbol
;
identifier
NewLine
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
T
symbol
;
identifier
NewLine
identifier
REP
symbol
(
identifier
t
symbol
,
identifier
T
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
int
identifier
S
symbol
,
identifier
A
symbol
=
integerConstant
0
symbol
,
identifier
B
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
string
identifier
V
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
S
symbol
>
symbol
>
identifier
V
symbol
;
identifier
NewLine
identifier
REP
symbol
(
identifier
i
symbol
,
identifier
S
symbol
+
integerConstant
1
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
A
symbol
+
identifier
B
symbol
<
identifier
i
symbol
)
identifier
NewLine
identifier
B
symbol
+
symbol
+
symbol
;
identifier
NewLine
identifier
A
symbol
+
symbol
=
identifier
V
symbol
[
identifier
i
symbol
]
symbol
-
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: %d\n
symbol
,
identifier
t
symbol
+
integerConstant
1
symbol
,
identifier
B
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/tur.turczyn.1.cpp file...

identifier
NewLine
identifier
ifdef
identifier
MSC
identifier
VER
identifier
NewLine
identifier
define
identifier
CRT
identifier
SECURE
identifier
NO
identifier
WARNINGS
identifier
NewLine
identifier
endif
identifier
NewLine
identifier
NewLine
identifier
include
symbol
<
identifier
cstdio
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstdlib
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cmath
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
string
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
iostream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
set
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
map
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
list
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
queue
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
deque
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
vector
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
algorithm
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
iterator
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cassert
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
functional
symbol
>
identifier
NewLine
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
identifier
typedef
identifier
unsigned
identifier
long
identifier
long
identifier
llong
symbol
;
identifier
NewLine
identifier
typedef
identifier
long
identifier
double
identifier
ldouble
symbol
;
identifier
NewLine
identifier
typedef
identifier
pair
symbol
<
keyword
int
symbol
,
keyword
int
symbol
>
identifier
pint
symbol
;
identifier
NewLine
identifier
typedef
identifier
pair
symbol
<
identifier
double
symbol
,
identifier
double
symbol
>
identifier
pdouble
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
keyword
int
symbol
>
identifier
vint
symbol
;
identifier
NewLine
identifier
typedef
identifier
vint
identifier
iterator
identifier
vit
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
identifier
double
symbol
>
identifier
vdouble
symbol
;
identifier
NewLine
identifier
typedef
identifier
vdouble
identifier
iterator
identifier
vdit
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
identifier
ldouble
symbol
>
identifier
vldouble
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
identifier
string
symbol
>
identifier
vstring
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
identifier
llong
symbol
>
identifier
vllong
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
identifier
vint
symbol
>
identifier
graph
symbol
;
identifier
NewLine
identifier
NewLine
identifier
define
identifier
FOR
symbol
(
identifier
v
symbol
,
identifier
p
symbol
,
identifier
k
symbol
)
identifier
for
symbol
(
keyword
int
identifier
v
symbol
=
identifier
p
symbol
;
identifier
v
symbol
<
symbol
=
identifier
k
symbol
;
symbol
+
symbol
+
identifier
v
symbol
)
identifier
NewLine
identifier
define
identifier
FORD
symbol
(
identifier
v
symbol
,
identifier
p
symbol
,
identifier
k
symbol
)
identifier
for
symbol
(
keyword
int
identifier
v
symbol
=
identifier
p
symbol
;
identifier
v
symbol
>
symbol
=
identifier
k
symbol
;
symbol
-
symbol
-
identifier
v
symbol
)
identifier
NewLine
identifier
define
identifier
REP
symbol
(
identifier
i
symbol
,
identifier
n
symbol
)
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
symbol
(
identifier
n
symbol
)
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
identifier
NewLine
identifier
ifdef
identifier
MSC
identifier
VER
identifier
NewLine
identifier
define
identifier
VAR
symbol
(
identifier
v
symbol
,
identifier
i
symbol
)
identifier
auto
identifier
v
symbol
=
symbol
(
identifier
i
symbol
)
identifier
NewLine
keyword
else
identifier
NewLine
identifier
define
identifier
VAR
symbol
(
identifier
v
symbol
,
identifier
i
symbol
)
identifier
typeof
symbol
(
identifier
i
symbol
)
identifier
v
symbol
=
symbol
(
identifier
i
symbol
)
identifier
NewLine
identifier
endif
identifier
NewLine
identifier
define
identifier
FOREACH
symbol
(
identifier
i
symbol
,
identifier
c
symbol
)
identifier
for
symbol
(
identifier
VAR
symbol
(
identifier
i
symbol
,
symbol
(
identifier
c
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
)
symbol
;
identifier
i
symbol
=
symbol
(
identifier
c
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
identifier
NewLine
identifier
define
identifier
SIZE
symbol
(
identifier
x
symbol
)
symbol
(
keyword
int
symbol
)
identifier
x
symbol
.
identifier
size
symbol
(
symbol
)
identifier
NewLine
identifier
define
identifier
ALL
symbol
(
identifier
c
symbol
)
identifier
c
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
,
identifier
c
symbol
.
identifier
end
symbol
(
symbol
)
identifier
NewLine
identifier
NewLine
identifier
define
identifier
ADD
identifier
EDGE
symbol
(
identifier
g
symbol
,
identifier
u
symbol
,
identifier
v
symbol
)
identifier
g
symbol
[
identifier
u
symbol
]
symbol
.
identifier
push
identifier
back
symbol
(
identifier
v
symbol
)
symbol
,
identifier
g
symbol
[
identifier
v
symbol
]
symbol
.
identifier
push
identifier
back
symbol
(
identifier
u
symbol
)
identifier
NewLine
identifier
NewLine
identifier
define
identifier
ST
identifier
first
identifier
NewLine
identifier
define
identifier
ND
identifier
second
identifier
NewLine
identifier
define
identifier
INF
integerConstant
1000000000
identifier
NewLine
identifier
define
identifier
INFL
integerConstant
1000000000000000000
identifier
LL
identifier
NewLine
identifier
define
identifier
EPS
integerConstant
1
identifier
e
symbol
-
integerConstant
5
identifier
NewLine
identifier
NewLine
keyword
int
identifier
solve
symbol
(
identifier
vint
symbol
&
identifier
P
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
int
identifier
out
symbol
=
identifier
INF
symbol
;
identifier
NewLine
identifier
FOR
symbol
(
identifier
k
symbol
,
integerConstant
1
symbol
,
integerConstant
1001
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
int
identifier
A
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
FOREACH
symbol
(
identifier
it
symbol
,
identifier
P
symbol
)
identifier
NewLine
identifier
A
symbol
+
symbol
=
symbol
(
symbol
*
identifier
it
symbol
/
identifier
k
symbol
)
symbol
-
symbol
(
symbol
*
identifier
it
identifier
k
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
A
symbol
+
identifier
k
symbol
<
identifier
out
symbol
)
identifier
NewLine
identifier
out
symbol
=
identifier
A
symbol
+
identifier
k
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
return
identifier
out
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
int
identifier
T
symbol
;
identifier
NewLine
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
T
symbol
;
identifier
NewLine
identifier
REP
symbol
(
identifier
t
symbol
,
identifier
T
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
int
identifier
D
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
D
symbol
;
identifier
NewLine
identifier
NewLine
identifier
vint
identifier
P
symbol
(
identifier
D
symbol
)
symbol
;
identifier
NewLine
identifier
REP
symbol
(
identifier
i
symbol
,
identifier
D
symbol
)
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
P
symbol
[
identifier
i
symbol
]
symbol
;
identifier
NewLine
identifier
sort
symbol
(
identifier
ALL
symbol
(
identifier
P
symbol
)
symbol
,
identifier
greater
symbol
<
keyword
int
symbol
>
symbol
(
symbol
)
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: %d\n
symbol
,
identifier
t
symbol
+
integerConstant
1
symbol
,
identifier
solve
symbol
(
identifier
P
symbol
)
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/tur.turczyn.2.cpp file...

identifier
NewLine
identifier
ifdef
identifier
MSC
identifier
VER
identifier
NewLine
identifier
define
identifier
CRT
identifier
SECURE
identifier
NO
identifier
WARNINGS
identifier
NewLine
identifier
endif
identifier
NewLine
identifier
NewLine
identifier
include
symbol
<
identifier
cstdio
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstdlib
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cmath
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
string
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
iostream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
set
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
map
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
list
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
queue
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
deque
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
vector
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
algorithm
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
iterator
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cassert
symbol
>
identifier
NewLine
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
identifier
typedef
identifier
unsigned
identifier
long
identifier
long
identifier
llong
symbol
;
identifier
NewLine
identifier
typedef
identifier
long
identifier
double
identifier
ldouble
symbol
;
identifier
NewLine
identifier
typedef
identifier
pair
symbol
<
keyword
int
symbol
,
keyword
int
symbol
>
identifier
pint
symbol
;
identifier
NewLine
identifier
typedef
identifier
pair
symbol
<
identifier
double
symbol
,
identifier
double
symbol
>
identifier
pdouble
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
keyword
int
symbol
>
identifier
vint
symbol
;
identifier
NewLine
identifier
typedef
identifier
vint
identifier
iterator
identifier
vit
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
identifier
double
symbol
>
identifier
vdouble
symbol
;
identifier
NewLine
identifier
typedef
identifier
vdouble
identifier
iterator
identifier
vdit
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
identifier
ldouble
symbol
>
identifier
vldouble
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
identifier
string
symbol
>
identifier
vstring
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
identifier
llong
symbol
>
identifier
vllong
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
identifier
vint
symbol
>
identifier
graph
symbol
;
identifier
NewLine
identifier
NewLine
identifier
define
identifier
FOR
symbol
(
identifier
v
symbol
,
identifier
p
symbol
,
identifier
k
symbol
)
identifier
for
symbol
(
keyword
int
identifier
v
symbol
=
identifier
p
symbol
;
identifier
v
symbol
<
symbol
=
identifier
k
symbol
;
symbol
+
symbol
+
identifier
v
symbol
)
identifier
NewLine
identifier
define
identifier
FORD
symbol
(
identifier
v
symbol
,
identifier
p
symbol
,
identifier
k
symbol
)
identifier
for
symbol
(
keyword
int
identifier
v
symbol
=
identifier
p
symbol
;
identifier
v
symbol
>
symbol
=
identifier
k
symbol
;
symbol
-
symbol
-
identifier
v
symbol
)
identifier
NewLine
identifier
define
identifier
REP
symbol
(
identifier
i
symbol
,
identifier
n
symbol
)
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
symbol
(
identifier
n
symbol
)
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
identifier
NewLine
identifier
ifdef
identifier
MSC
identifier
VER
identifier
NewLine
identifier
define
identifier
VAR
symbol
(
identifier
v
symbol
,
identifier
i
symbol
)
identifier
auto
identifier
v
symbol
=
symbol
(
identifier
i
symbol
)
identifier
NewLine
keyword
else
identifier
NewLine
identifier
define
identifier
VAR
symbol
(
identifier
v
symbol
,
identifier
i
symbol
)
identifier
typeof
symbol
(
identifier
i
symbol
)
identifier
v
symbol
=
symbol
(
identifier
i
symbol
)
identifier
NewLine
identifier
endif
identifier
NewLine
identifier
define
identifier
FOREACH
symbol
(
identifier
i
symbol
,
identifier
c
symbol
)
identifier
for
symbol
(
identifier
VAR
symbol
(
identifier
i
symbol
,
symbol
(
identifier
c
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
)
symbol
;
identifier
i
symbol
=
symbol
(
identifier
c
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
identifier
NewLine
identifier
define
identifier
SIZE
symbol
(
identifier
x
symbol
)
symbol
(
keyword
int
symbol
)
identifier
x
symbol
.
identifier
size
symbol
(
symbol
)
identifier
NewLine
identifier
define
identifier
ALL
symbol
(
identifier
c
symbol
)
identifier
c
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
,
identifier
c
symbol
.
identifier
end
symbol
(
symbol
)
identifier
NewLine
identifier
NewLine
identifier
define
identifier
ADD
identifier
EDGE
symbol
(
identifier
g
symbol
,
identifier
u
symbol
,
identifier
v
symbol
)
identifier
g
symbol
[
identifier
u
symbol
]
symbol
.
identifier
push
identifier
back
symbol
(
identifier
v
symbol
)
symbol
,
identifier
g
symbol
[
identifier
v
symbol
]
symbol
.
identifier
push
identifier
back
symbol
(
identifier
u
symbol
)
identifier
NewLine
identifier
NewLine
identifier
define
identifier
ST
identifier
first
identifier
NewLine
identifier
define
identifier
ND
identifier
second
identifier
NewLine
identifier
define
identifier
INF
integerConstant
1000000000
identifier
NewLine
identifier
define
identifier
INFL
integerConstant
1000000000000000000
identifier
LL
identifier
NewLine
identifier
define
identifier
EPS
integerConstant
1
identifier
e
symbol
-
integerConstant
5
identifier
NewLine
identifier
NewLine
keyword
int
identifier
V
symbol
[
integerConstant
4
symbol
]
symbol
[
integerConstant
4
symbol
]
symbol
=
symbol
{
symbol
{
integerConstant
1
symbol
,
integerConstant
2
symbol
,
integerConstant
3
symbol
,
integerConstant
4
symbol
}
symbol
,
symbol
{
integerConstant
2
symbol
,
symbol
-
integerConstant
1
symbol
,
integerConstant
4
symbol
,
symbol
-
integerConstant
3
symbol
}
symbol
,
symbol
{
integerConstant
3
symbol
,
symbol
-
integerConstant
4
symbol
,
symbol
-
integerConstant
1
symbol
,
integerConstant
2
symbol
}
symbol
,
symbol
{
integerConstant
4
symbol
,
integerConstant
3
symbol
,
symbol
-
integerConstant
2
symbol
,
symbol
-
integerConstant
1
symbol
}
symbol
}
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
value
symbol
(
keyword
int
identifier
X
symbol
,
keyword
char
identifier
c
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
int
identifier
Y
symbol
=
identifier
c
symbol
=
symbol
=
identifier
i
integerConstant
1
symbol
(
identifier
c
symbol
=
symbol
=
identifier
j
integerConstant
2
integerConstant
3
symbol
)
symbol
;
identifier
NewLine
keyword
return
identifier
X
symbol
>
integerConstant
0
identifier
V
symbol
[
identifier
X
symbol
-
integerConstant
1
symbol
]
symbol
[
identifier
Y
symbol
]
symbol
-
identifier
V
symbol
[
symbol
-
identifier
X
symbol
-
integerConstant
1
symbol
]
symbol
[
identifier
Y
symbol
]
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
bool
identifier
solve
symbol
(
identifier
const
identifier
string
symbol
&
identifier
W
symbol
,
keyword
int
identifier
L
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
int
identifier
a
symbol
=
integerConstant
2
symbol
,
identifier
q
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
identifier
REP
symbol
(
identifier
i
symbol
,
identifier
SIZE
symbol
(
identifier
W
symbol
)
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
q
symbol
=
identifier
value
symbol
(
identifier
q
symbol
,
identifier
W
symbol
[
identifier
i
symbol
]
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
a
symbol
=
symbol
=
identifier
q
symbol
)
identifier
NewLine
identifier
a
symbol
+
symbol
+
symbol
,
identifier
q
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
return
identifier
a
symbol
=
symbol
=
integerConstant
5
symbol
&
symbol
&
identifier
q
symbol
=
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
int
identifier
T
symbol
;
identifier
NewLine
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
T
symbol
;
identifier
NewLine
identifier
REP
symbol
(
identifier
t
symbol
,
identifier
T
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
int
identifier
L
symbol
;
identifier
NewLine
identifier
long
identifier
long
identifier
X
symbol
;
identifier
NewLine
identifier
string
identifier
word
symbol
=
symbol
,
identifier
W
symbol
;
identifier
NewLine
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
L
symbol
>
symbol
>
identifier
X
symbol
>
symbol
>
identifier
W
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
X
symbol
>
symbol
=
integerConstant
12
symbol
)
identifier
NewLine
identifier
X
symbol
=
identifier
X
integerConstant
4
identifier
LL
symbol
+
integerConstant
12
identifier
LL
symbol
;
identifier
NewLine
identifier
REP
symbol
(
identifier
i
symbol
,
identifier
X
symbol
)
identifier
NewLine
identifier
word
symbol
+
symbol
=
identifier
W
symbol
;
identifier
NewLine
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: %s\n
symbol
,
identifier
t
symbol
+
integerConstant
1
symbol
,
identifier
solve
symbol
(
identifier
word
symbol
,
identifier
L
symbol
)
stringConstant
YES
stringConstant
NO
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/Tyg3R.0.cpp file...

identifier
include
symbol
<
identifier
algorithm
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cmath
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstdio
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstdlib
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstring
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
iostream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
sstream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
map
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
set
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
queue
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
vector
symbol
>
identifier
NewLine
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
identifier
define
identifier
FOR
symbol
(
identifier
prom
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
for
symbol
(
keyword
int
identifier
prom
symbol
=
symbol
(
identifier
a
symbol
)
symbol
;
identifier
prom
symbol
<
symbol
(
identifier
b
symbol
)
symbol
;
identifier
prom
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
define
identifier
FORD
symbol
(
identifier
prom
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
for
symbol
(
keyword
int
identifier
prom
symbol
=
symbol
(
identifier
a
symbol
)
symbol
;
identifier
prom
symbol
>
symbol
(
identifier
b
symbol
)
symbol
;
identifier
prom
symbol
-
symbol
-
symbol
)
identifier
NewLine
identifier
define
identifier
FORDE
symbol
(
identifier
prom
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
for
symbol
(
keyword
int
identifier
prom
symbol
=
symbol
(
identifier
a
symbol
)
symbol
;
identifier
prom
symbol
>
symbol
=
symbol
(
identifier
b
symbol
)
symbol
;
identifier
prom
symbol
-
symbol
-
symbol
)
identifier
NewLine
identifier
NewLine
identifier
define
identifier
DRI
symbol
(
identifier
a
symbol
)
keyword
int
identifier
a
symbol
;
identifier
scanf
symbol
(
stringConstant
%d 
symbol
,
symbol
&
identifier
a
symbol
)
symbol
;
identifier
NewLine
identifier
define
identifier
DRII
symbol
(
identifier
a
symbol
,
identifier
b
symbol
)
keyword
int
identifier
a
symbol
,
identifier
b
symbol
;
identifier
scanf
symbol
(
stringConstant
%d %d 
symbol
,
symbol
&
identifier
a
symbol
,
symbol
&
identifier
b
symbol
)
symbol
;
identifier
NewLine
identifier
define
identifier
DRIII
symbol
(
identifier
a
symbol
,
identifier
b
symbol
,
identifier
c
symbol
)
keyword
int
identifier
a
symbol
,
identifier
b
symbol
,
identifier
c
symbol
;
identifier
scanf
symbol
(
stringConstant
%d %d %d 
symbol
,
symbol
&
identifier
a
symbol
,
symbol
&
identifier
b
symbol
,
symbol
&
identifier
c
symbol
)
symbol
;
identifier
NewLine
identifier
define
identifier
DRIIII
symbol
(
identifier
a
symbol
,
identifier
b
symbol
,
identifier
c
symbol
,
identifier
d
symbol
)
keyword
int
identifier
a
symbol
,
identifier
b
symbol
,
identifier
c
symbol
,
identifier
d
symbol
;
identifier
scanf
symbol
(
stringConstant
%d %d %d %d 
symbol
,
symbol
&
identifier
a
symbol
,
symbol
&
identifier
b
symbol
,
symbol
&
identifier
c
symbol
,
symbol
&
identifier
d
symbol
)
symbol
;
identifier
NewLine
identifier
define
identifier
RI
symbol
(
identifier
a
symbol
)
identifier
scanf
symbol
(
stringConstant
%d 
symbol
,
symbol
&
identifier
a
symbol
)
symbol
;
identifier
NewLine
identifier
define
identifier
RII
symbol
(
identifier
a
symbol
,
identifier
b
symbol
)
identifier
scanf
symbol
(
stringConstant
%d %d 
symbol
,
symbol
&
identifier
a
symbol
,
symbol
&
identifier
b
symbol
)
symbol
;
identifier
NewLine
identifier
define
identifier
RIII
symbol
(
identifier
a
symbol
,
identifier
b
symbol
,
identifier
c
symbol
)
identifier
scanf
symbol
(
stringConstant
%d %d %d 
symbol
,
symbol
&
identifier
a
symbol
,
symbol
&
identifier
b
symbol
,
symbol
&
identifier
c
symbol
)
symbol
;
identifier
NewLine
identifier
define
identifier
RIIII
symbol
(
identifier
a
symbol
,
identifier
b
symbol
,
identifier
c
symbol
,
identifier
d
symbol
)
identifier
scanf
symbol
(
stringConstant
%d %d %d %d 
symbol
,
symbol
&
identifier
a
symbol
,
symbol
&
identifier
b
symbol
,
symbol
&
identifier
c
symbol
,
symbol
&
identifier
d
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
identifier
define
identifier
PB
identifier
push
identifier
back
identifier
NewLine
identifier
define
identifier
MP
identifier
make
identifier
pair
identifier
NewLine
identifier
NewLine
identifier
define
identifier
ll
identifier
long
identifier
long
identifier
NewLine
identifier
define
identifier
ull
identifier
unsigned
identifier
long
identifier
long
identifier
NewLine
identifier
NewLine
identifier
define
identifier
MM
symbol
(
identifier
co
symbol
,
identifier
cim
symbol
)
identifier
memset
symbol
(
symbol
(
identifier
co
symbol
)
symbol
,
symbol
(
identifier
cim
symbol
)
symbol
,
identifier
sizeof
symbol
(
symbol
(
identifier
co
symbol
)
symbol
)
symbol
)
identifier
NewLine
identifier
NewLine
identifier
define
identifier
DEB
symbol
(
identifier
x
symbol
)
identifier
cerr
symbol
<
symbol
<
symbol
>>> 
symbol
<
symbol
<
identifier
x
symbol
<
symbol
<
stringConstant
 : 
symbol
<
symbol
<
identifier
x
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
DRI
symbol
(
identifier
T
symbol
)
symbol
;
identifier
NewLine
identifier
FOR
symbol
(
identifier
t
symbol
,
integerConstant
0
symbol
,
identifier
T
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
req
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
keyword
int
identifier
sum
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
DRI
symbol
(
identifier
Smax
symbol
)
symbol
;
identifier
NewLine
identifier
string
identifier
s
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
s
symbol
;
identifier
NewLine
identifier
FOR
symbol
(
identifier
i
symbol
,
integerConstant
0
symbol
,
identifier
Smax
symbol
+
integerConstant
1
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
p
symbol
=
identifier
s
symbol
[
identifier
i
symbol
]
symbol
-
integerConstant
0
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
p
symbol
>
integerConstant
0
symbol
)
symbol
{
identifier
NewLine
identifier
req
symbol
=
identifier
max
symbol
(
identifier
req
symbol
,
identifier
i
symbol
-
identifier
sum
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
sum
symbol
+
symbol
=
identifier
p
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: %d\n
symbol
,
identifier
t
symbol
+
integerConstant
1
symbol
,
identifier
req
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/Tyg3R.1.cpp file...

identifier
include
symbol
<
identifier
algorithm
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cmath
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstdio
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstdlib
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstring
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
iostream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
sstream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
map
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
set
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
queue
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
vector
symbol
>
identifier
NewLine
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
identifier
define
identifier
FOR
symbol
(
identifier
prom
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
for
symbol
(
keyword
int
identifier
prom
symbol
=
symbol
(
identifier
a
symbol
)
symbol
;
identifier
prom
symbol
<
symbol
(
identifier
b
symbol
)
symbol
;
identifier
prom
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
define
identifier
FORD
symbol
(
identifier
prom
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
for
symbol
(
keyword
int
identifier
prom
symbol
=
symbol
(
identifier
a
symbol
)
symbol
;
identifier
prom
symbol
>
symbol
(
identifier
b
symbol
)
symbol
;
identifier
prom
symbol
-
symbol
-
symbol
)
identifier
NewLine
identifier
define
identifier
FORDE
symbol
(
identifier
prom
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
for
symbol
(
keyword
int
identifier
prom
symbol
=
symbol
(
identifier
a
symbol
)
symbol
;
identifier
prom
symbol
>
symbol
=
symbol
(
identifier
b
symbol
)
symbol
;
identifier
prom
symbol
-
symbol
-
symbol
)
identifier
NewLine
identifier
NewLine
identifier
define
identifier
DRI
symbol
(
identifier
a
symbol
)
keyword
int
identifier
a
symbol
;
identifier
scanf
symbol
(
stringConstant
%d 
symbol
,
symbol
&
identifier
a
symbol
)
symbol
;
identifier
NewLine
identifier
define
identifier
DRII
symbol
(
identifier
a
symbol
,
identifier
b
symbol
)
keyword
int
identifier
a
symbol
,
identifier
b
symbol
;
identifier
scanf
symbol
(
stringConstant
%d %d 
symbol
,
symbol
&
identifier
a
symbol
,
symbol
&
identifier
b
symbol
)
symbol
;
identifier
NewLine
identifier
define
identifier
DRIII
symbol
(
identifier
a
symbol
,
identifier
b
symbol
,
identifier
c
symbol
)
keyword
int
identifier
a
symbol
,
identifier
b
symbol
,
identifier
c
symbol
;
identifier
scanf
symbol
(
stringConstant
%d %d %d 
symbol
,
symbol
&
identifier
a
symbol
,
symbol
&
identifier
b
symbol
,
symbol
&
identifier
c
symbol
)
symbol
;
identifier
NewLine
identifier
define
identifier
DRIIII
symbol
(
identifier
a
symbol
,
identifier
b
symbol
,
identifier
c
symbol
,
identifier
d
symbol
)
keyword
int
identifier
a
symbol
,
identifier
b
symbol
,
identifier
c
symbol
,
identifier
d
symbol
;
identifier
scanf
symbol
(
stringConstant
%d %d %d %d 
symbol
,
symbol
&
identifier
a
symbol
,
symbol
&
identifier
b
symbol
,
symbol
&
identifier
c
symbol
,
symbol
&
identifier
d
symbol
)
symbol
;
identifier
NewLine
identifier
define
identifier
RI
symbol
(
identifier
a
symbol
)
identifier
scanf
symbol
(
stringConstant
%d 
symbol
,
symbol
&
identifier
a
symbol
)
symbol
;
identifier
NewLine
identifier
define
identifier
RII
symbol
(
identifier
a
symbol
,
identifier
b
symbol
)
identifier
scanf
symbol
(
stringConstant
%d %d 
symbol
,
symbol
&
identifier
a
symbol
,
symbol
&
identifier
b
symbol
)
symbol
;
identifier
NewLine
identifier
define
identifier
RIII
symbol
(
identifier
a
symbol
,
identifier
b
symbol
,
identifier
c
symbol
)
identifier
scanf
symbol
(
stringConstant
%d %d %d 
symbol
,
symbol
&
identifier
a
symbol
,
symbol
&
identifier
b
symbol
,
symbol
&
identifier
c
symbol
)
symbol
;
identifier
NewLine
identifier
define
identifier
RIIII
symbol
(
identifier
a
symbol
,
identifier
b
symbol
,
identifier
c
symbol
,
identifier
d
symbol
)
identifier
scanf
symbol
(
stringConstant
%d %d %d %d 
symbol
,
symbol
&
identifier
a
symbol
,
symbol
&
identifier
b
symbol
,
symbol
&
identifier
c
symbol
,
symbol
&
identifier
d
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
identifier
define
identifier
PB
identifier
push
identifier
back
identifier
NewLine
identifier
define
identifier
MP
identifier
make
identifier
pair
identifier
NewLine
identifier
NewLine
identifier
define
identifier
ll
identifier
long
identifier
long
identifier
NewLine
identifier
define
identifier
ull
identifier
unsigned
identifier
long
identifier
long
identifier
NewLine
identifier
NewLine
identifier
define
identifier
MM
symbol
(
identifier
co
symbol
,
identifier
cim
symbol
)
identifier
memset
symbol
(
symbol
(
identifier
co
symbol
)
symbol
,
symbol
(
identifier
cim
symbol
)
symbol
,
identifier
sizeof
symbol
(
symbol
(
identifier
co
symbol
)
symbol
)
symbol
)
identifier
NewLine
identifier
NewLine
identifier
define
identifier
DEB
symbol
(
identifier
x
symbol
)
identifier
cerr
symbol
<
symbol
<
symbol
>>> 
symbol
<
symbol
<
identifier
x
symbol
<
symbol
<
stringConstant
 : 
symbol
<
symbol
<
identifier
x
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
P
symbol
[
integerConstant
1007
symbol
]
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
DRI
symbol
(
identifier
T
symbol
)
symbol
;
identifier
NewLine
identifier
FOR
symbol
(
identifier
t
symbol
,
integerConstant
0
symbol
,
identifier
T
symbol
)
symbol
{
identifier
NewLine
identifier
DRI
symbol
(
identifier
D
symbol
)
symbol
;
identifier
NewLine
identifier
FOR
symbol
(
identifier
i
symbol
,
integerConstant
0
symbol
,
identifier
D
symbol
)
symbol
{
identifier
RI
symbol
(
identifier
P
symbol
[
identifier
i
symbol
]
symbol
)
symbol
;
symbol
}
identifier
NewLine
keyword
int
identifier
best
symbol
=
integerConstant
1007
symbol
;
identifier
NewLine
identifier
FOR
symbol
(
identifier
p
symbol
,
integerConstant
1
symbol
,
integerConstant
1001
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
moves
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
FOR
symbol
(
identifier
d
symbol
,
integerConstant
0
symbol
,
identifier
D
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
P
symbol
[
identifier
d
symbol
]
symbol
>
identifier
p
symbol
)
symbol
{
identifier
NewLine
identifier
moves
symbol
+
symbol
=
identifier
P
symbol
[
identifier
d
symbol
]
symbol
/
identifier
p
symbol
;
identifier
NewLine
identifier
moves
symbol
-
symbol
-
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
P
symbol
[
identifier
d
symbol
]
identifier
p
symbol
=
integerConstant
0
symbol
)
identifier
moves
symbol
+
symbol
+
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
best
symbol
=
identifier
min
symbol
(
identifier
best
symbol
,
identifier
moves
symbol
+
identifier
p
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: %d\n
symbol
,
identifier
t
symbol
+
integerConstant
1
symbol
,
identifier
best
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/Tyg3R.2.cpp file...

identifier
include
symbol
<
identifier
algorithm
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cmath
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstdio
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstdlib
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstring
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
iostream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
sstream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
map
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
set
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
queue
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
vector
symbol
>
identifier
NewLine
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
identifier
define
identifier
FOR
symbol
(
identifier
prom
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
for
symbol
(
keyword
int
identifier
prom
symbol
=
symbol
(
identifier
a
symbol
)
symbol
;
identifier
prom
symbol
<
symbol
(
identifier
b
symbol
)
symbol
;
identifier
prom
symbol
+
symbol
+
symbol
)
identifier
NewLine
identifier
define
identifier
FORD
symbol
(
identifier
prom
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
for
symbol
(
keyword
int
identifier
prom
symbol
=
symbol
(
identifier
a
symbol
)
symbol
;
identifier
prom
symbol
>
symbol
(
identifier
b
symbol
)
symbol
;
identifier
prom
symbol
-
symbol
-
symbol
)
identifier
NewLine
identifier
define
identifier
FORDE
symbol
(
identifier
prom
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
for
symbol
(
keyword
int
identifier
prom
symbol
=
symbol
(
identifier
a
symbol
)
symbol
;
identifier
prom
symbol
>
symbol
=
symbol
(
identifier
b
symbol
)
symbol
;
identifier
prom
symbol
-
symbol
-
symbol
)
identifier
NewLine
identifier
NewLine
identifier
define
identifier
DRI
symbol
(
identifier
a
symbol
)
keyword
int
identifier
a
symbol
;
identifier
scanf
symbol
(
stringConstant
%d 
symbol
,
symbol
&
identifier
a
symbol
)
symbol
;
identifier
NewLine
identifier
define
identifier
DRII
symbol
(
identifier
a
symbol
,
identifier
b
symbol
)
keyword
int
identifier
a
symbol
,
identifier
b
symbol
;
identifier
scanf
symbol
(
stringConstant
%d %d 
symbol
,
symbol
&
identifier
a
symbol
,
symbol
&
identifier
b
symbol
)
symbol
;
identifier
NewLine
identifier
define
identifier
DRIII
symbol
(
identifier
a
symbol
,
identifier
b
symbol
,
identifier
c
symbol
)
keyword
int
identifier
a
symbol
,
identifier
b
symbol
,
identifier
c
symbol
;
identifier
scanf
symbol
(
stringConstant
%d %d %d 
symbol
,
symbol
&
identifier
a
symbol
,
symbol
&
identifier
b
symbol
,
symbol
&
identifier
c
symbol
)
symbol
;
identifier
NewLine
identifier
define
identifier
DRIIII
symbol
(
identifier
a
symbol
,
identifier
b
symbol
,
identifier
c
symbol
,
identifier
d
symbol
)
keyword
int
identifier
a
symbol
,
identifier
b
symbol
,
identifier
c
symbol
,
identifier
d
symbol
;
identifier
scanf
symbol
(
stringConstant
%d %d %d %d 
symbol
,
symbol
&
identifier
a
symbol
,
symbol
&
identifier
b
symbol
,
symbol
&
identifier
c
symbol
,
symbol
&
identifier
d
symbol
)
symbol
;
identifier
NewLine
identifier
define
identifier
RI
symbol
(
identifier
a
symbol
)
identifier
scanf
symbol
(
stringConstant
%d 
symbol
,
symbol
&
identifier
a
symbol
)
symbol
;
identifier
NewLine
identifier
define
identifier
RII
symbol
(
identifier
a
symbol
,
identifier
b
symbol
)
identifier
scanf
symbol
(
stringConstant
%d %d 
symbol
,
symbol
&
identifier
a
symbol
,
symbol
&
identifier
b
symbol
)
symbol
;
identifier
NewLine
identifier
define
identifier
RIII
symbol
(
identifier
a
symbol
,
identifier
b
symbol
,
identifier
c
symbol
)
identifier
scanf
symbol
(
stringConstant
%d %d %d 
symbol
,
symbol
&
identifier
a
symbol
,
symbol
&
identifier
b
symbol
,
symbol
&
identifier
c
symbol
)
symbol
;
identifier
NewLine
identifier
define
identifier
RIIII
symbol
(
identifier
a
symbol
,
identifier
b
symbol
,
identifier
c
symbol
,
identifier
d
symbol
)
identifier
scanf
symbol
(
stringConstant
%d %d %d %d 
symbol
,
symbol
&
identifier
a
symbol
,
symbol
&
identifier
b
symbol
,
symbol
&
identifier
c
symbol
,
symbol
&
identifier
d
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
identifier
define
identifier
PB
identifier
push
identifier
back
identifier
NewLine
identifier
define
identifier
MP
identifier
make
identifier
pair
identifier
NewLine
identifier
NewLine
identifier
define
identifier
ll
identifier
long
identifier
long
identifier
NewLine
identifier
define
identifier
ull
identifier
unsigned
identifier
long
identifier
long
identifier
NewLine
identifier
NewLine
identifier
define
identifier
MM
symbol
(
identifier
co
symbol
,
identifier
cim
symbol
)
identifier
memset
symbol
(
symbol
(
identifier
co
symbol
)
symbol
,
symbol
(
identifier
cim
symbol
)
symbol
,
identifier
sizeof
symbol
(
symbol
(
identifier
co
symbol
)
symbol
)
symbol
)
identifier
NewLine
identifier
NewLine
identifier
define
identifier
DEB
symbol
(
identifier
x
symbol
)
identifier
cerr
symbol
<
symbol
<
symbol
>>> 
symbol
<
symbol
<
identifier
x
symbol
<
symbol
<
stringConstant
 : 
symbol
<
symbol
<
identifier
x
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
M
symbol
[
integerConstant
4
symbol
]
symbol
[
integerConstant
4
symbol
]
symbol
=
symbol
{
identifier
NewLine
symbol
{
integerConstant
0
symbol
,
integerConstant
1
symbol
,
integerConstant
2
symbol
,
integerConstant
3
symbol
}
symbol
,
identifier
NewLine
symbol
{
integerConstant
1
symbol
,
integerConstant
0
symbol
,
integerConstant
3
symbol
,
integerConstant
2
symbol
}
symbol
,
identifier
NewLine
symbol
{
integerConstant
2
symbol
,
integerConstant
3
symbol
,
integerConstant
0
symbol
,
integerConstant
1
symbol
}
symbol
,
identifier
NewLine
symbol
{
integerConstant
3
symbol
,
integerConstant
2
symbol
,
integerConstant
1
symbol
,
integerConstant
0
symbol
}
identifier
NewLine
symbol
}
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
S
symbol
[
integerConstant
4
symbol
]
symbol
[
integerConstant
4
symbol
]
symbol
=
symbol
{
identifier
NewLine
symbol
{
integerConstant
1
symbol
,
integerConstant
1
symbol
,
integerConstant
1
symbol
,
integerConstant
1
symbol
}
symbol
,
identifier
NewLine
symbol
{
integerConstant
1
symbol
,
symbol
-
integerConstant
1
symbol
,
integerConstant
1
symbol
,
symbol
-
integerConstant
1
symbol
}
symbol
,
identifier
NewLine
symbol
{
integerConstant
1
symbol
,
symbol
-
integerConstant
1
symbol
,
symbol
-
integerConstant
1
symbol
,
integerConstant
1
symbol
}
symbol
,
identifier
NewLine
symbol
{
integerConstant
1
symbol
,
integerConstant
1
symbol
,
symbol
-
integerConstant
1
symbol
,
symbol
-
integerConstant
1
symbol
}
identifier
NewLine
symbol
}
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
int
identifier
reqResultM
symbol
=
identifier
M
symbol
[
identifier
M
symbol
[
integerConstant
1
symbol
]
symbol
[
integerConstant
2
symbol
]
symbol
]
symbol
[
integerConstant
3
symbol
]
symbol
;
keyword
int
identifier
reqResultS
symbol
=
identifier
S
symbol
[
identifier
S
symbol
[
integerConstant
1
symbol
]
symbol
[
integerConstant
2
symbol
]
symbol
]
symbol
[
integerConstant
3
symbol
]
symbol
;
identifier
DRI
symbol
(
identifier
T
symbol
)
symbol
;
identifier
NewLine
identifier
FOR
symbol
(
identifier
t
symbol
,
integerConstant
0
symbol
,
identifier
T
symbol
)
symbol
{
identifier
NewLine
identifier
ll
identifier
L
symbol
,
identifier
X
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
L
symbol
>
symbol
>
identifier
X
symbol
;
identifier
NewLine
identifier
string
identifier
st
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
st
symbol
;
identifier
NewLine
keyword
int
identifier
m
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
keyword
int
identifier
s
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
identifier
FOR
symbol
(
identifier
i
symbol
,
integerConstant
0
symbol
,
identifier
L
symbol
)
symbol
{
identifier
NewLine
identifier
s
symbol
*
symbol
=
identifier
S
symbol
[
identifier
m
symbol
]
symbol
[
identifier
st
symbol
[
identifier
i
symbol
]
symbol
-
identifier
h
symbol
]
symbol
;
identifier
NewLine
identifier
m
symbol
=
identifier
M
symbol
[
identifier
m
symbol
]
symbol
[
identifier
st
symbol
[
identifier
i
symbol
]
symbol
-
identifier
h
symbol
]
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
int
identifier
cnt
symbol
=
identifier
X
integerConstant
4
identifier
LL
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
cnt
symbol
=
symbol
=
integerConstant
0
symbol
)
identifier
cnt
symbol
=
integerConstant
4
symbol
;
identifier
NewLine
keyword
int
identifier
rm
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
keyword
int
identifier
rs
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
identifier
FOR
symbol
(
identifier
i
symbol
,
integerConstant
0
symbol
,
identifier
cnt
symbol
)
symbol
{
identifier
NewLine
identifier
rs
symbol
*
symbol
=
identifier
S
symbol
[
identifier
rm
symbol
]
symbol
[
identifier
m
symbol
]
symbol
;
identifier
NewLine
identifier
rs
symbol
*
symbol
=
identifier
s
symbol
;
identifier
NewLine
identifier
rm
symbol
=
identifier
M
symbol
[
identifier
rm
symbol
]
symbol
[
identifier
m
symbol
]
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
rm
symbol
=
identifier
reqResultM
symbol
|
symbol
|
identifier
rs
symbol
=
identifier
reqResultS
symbol
)
symbol
{
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: NO\n
symbol
,
identifier
t
symbol
+
integerConstant
1
symbol
)
symbol
;
identifier
NewLine
identifier
continue
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
st
symbol
+
symbol
=
identifier
st
symbol
;
identifier
NewLine
identifier
st
symbol
+
symbol
=
identifier
st
symbol
;
identifier
NewLine
keyword
int
identifier
b
symbol
=
symbol
-
integerConstant
1
symbol
,
identifier
e
symbol
=
symbol
-
integerConstant
1
symbol
;
identifier
NewLine
identifier
m
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
s
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
identifier
FOR
symbol
(
identifier
i
symbol
,
integerConstant
0
symbol
,
integerConstant
4
symbol
*
identifier
L
symbol
)
symbol
{
identifier
NewLine
identifier
s
symbol
*
symbol
=
identifier
S
symbol
[
identifier
m
symbol
]
symbol
[
identifier
st
symbol
[
identifier
i
symbol
]
symbol
-
identifier
h
symbol
]
symbol
;
identifier
NewLine
identifier
m
symbol
=
identifier
M
symbol
[
identifier
m
symbol
]
symbol
[
identifier
st
symbol
[
identifier
i
symbol
]
symbol
-
identifier
h
symbol
]
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
m
symbol
=
symbol
=
integerConstant
1
symbol
&
symbol
&
identifier
s
symbol
=
symbol
=
integerConstant
1
symbol
)
symbol
{
identifier
NewLine
identifier
b
symbol
=
identifier
i
symbol
+
integerConstant
1
symbol
;
identifier
NewLine
identifier
break
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
m
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
s
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
identifier
FORDE
symbol
(
identifier
i
symbol
,
integerConstant
4
symbol
*
identifier
L
symbol
-
integerConstant
1
symbol
,
integerConstant
0
symbol
)
symbol
{
identifier
NewLine
identifier
s
symbol
*
symbol
=
identifier
S
symbol
[
identifier
st
symbol
[
identifier
i
symbol
]
symbol
-
identifier
h
symbol
]
symbol
[
identifier
m
symbol
]
symbol
;
identifier
NewLine
identifier
m
symbol
=
identifier
M
symbol
[
identifier
st
symbol
[
identifier
i
symbol
]
symbol
-
identifier
h
symbol
]
symbol
[
identifier
m
symbol
]
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
m
symbol
=
symbol
=
integerConstant
3
symbol
&
symbol
&
identifier
s
symbol
=
symbol
=
integerConstant
1
symbol
)
symbol
{
identifier
NewLine
identifier
e
symbol
=
integerConstant
4
symbol
*
identifier
L
symbol
-
identifier
i
symbol
;
identifier
NewLine
identifier
break
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
b
symbol
=
symbol
=
symbol
-
integerConstant
1
symbol
|
symbol
|
identifier
e
symbol
=
symbol
=
symbol
-
integerConstant
1
symbol
|
symbol
|
identifier
L
symbol
*
identifier
X
symbol
<
symbol
=
symbol
(
identifier
ll
symbol
)
identifier
b
symbol
+
symbol
(
identifier
ll
symbol
)
identifier
e
symbol
)
identifier
printf
symbol
(
stringConstant
Case #%d: NO\n
symbol
,
identifier
t
symbol
+
integerConstant
1
symbol
)
symbol
;
identifier
NewLine
keyword
else
identifier
printf
symbol
(
stringConstant
Case #%d: YES\n
symbol
,
identifier
t
symbol
+
integerConstant
1
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/UminchuR.0.cpp file...

identifier
include
symbol
<
identifier
vector
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
list
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
map
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
set
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
deque
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
stack
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
bitset
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
algorithm
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
functional
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
numeric
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
utility
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
sstream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
queue
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
iostream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
iomanip
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstdio
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cmath
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstdlib
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cctype
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
string
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstring
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
ctime
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
fstream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
stdio
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
complex
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstdint
symbol
>
identifier
NewLine
identifier
NewLine
identifier
define
identifier
M
identifier
PI
integerConstant
3
symbol
.
integerConstant
14159265358979323846
identifier
NewLine
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
identifier
inline
keyword
int
identifier
toInt
symbol
(
identifier
string
identifier
s
symbol
)
symbol
{
keyword
int
identifier
v
symbol
;
identifier
istringstream
identifier
sin
symbol
(
identifier
s
symbol
)
symbol
;
identifier
sin
symbol
>
symbol
>
identifier
v
symbol
;
keyword
return
identifier
v
symbol
;
symbol
}
identifier
NewLine
identifier
template
symbol
<
keyword
class
identifier
T
symbol
>
identifier
inline
identifier
string
identifier
toString
symbol
(
identifier
T
identifier
x
symbol
)
symbol
{
identifier
ostringstream
identifier
sout
symbol
;
identifier
sout
symbol
<
symbol
<
identifier
x
symbol
;
keyword
return
identifier
sout
symbol
.
identifier
str
symbol
(
symbol
)
symbol
;
symbol
}
identifier
NewLine
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
keyword
int
symbol
>
identifier
VI
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
identifier
VI
symbol
>
identifier
VVI
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
identifier
string
symbol
>
identifier
VS
symbol
;
identifier
NewLine
identifier
typedef
identifier
pair
symbol
<
keyword
int
symbol
,
keyword
int
symbol
>
identifier
PII
symbol
;
identifier
NewLine
identifier
typedef
identifier
pair
symbol
<
keyword
int
symbol
,
identifier
PII
symbol
>
identifier
TIII
symbol
;
identifier
NewLine
identifier
typedef
identifier
long
identifier
long
identifier
LL
symbol
;
identifier
NewLine
identifier
typedef
identifier
unsigned
identifier
long
identifier
long
identifier
ULL
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
identifier
LL
symbol
>
identifier
VLL
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
identifier
VLL
symbol
>
identifier
VVLL
symbol
;
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
define
identifier
ALL
symbol
(
identifier
a
symbol
)
symbol
(
identifier
a
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
,
symbol
(
identifier
a
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
identifier
NewLine
identifier
define
identifier
RALL
symbol
(
identifier
a
symbol
)
symbol
(
identifier
a
symbol
)
symbol
.
identifier
rbegin
symbol
(
symbol
)
symbol
,
symbol
(
identifier
a
symbol
)
symbol
.
identifier
rend
symbol
(
symbol
)
identifier
NewLine
identifier
define
identifier
PB
identifier
push
identifier
back
identifier
NewLine
identifier
define
identifier
MP
identifier
make
identifier
pair
identifier
NewLine
identifier
define
identifier
SZ
symbol
(
identifier
a
symbol
)
keyword
int
symbol
(
symbol
(
identifier
a
symbol
)
symbol
.
identifier
size
symbol
(
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
EACH
symbol
(
identifier
i
symbol
,
identifier
c
symbol
)
identifier
for
symbol
(
identifier
typeof
symbol
(
symbol
(
identifier
c
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
)
identifier
i
symbol
=
symbol
(
identifier
c
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
;
identifier
i
symbol
=
symbol
(
identifier
c
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
identifier
NewLine
identifier
define
identifier
EXIST
symbol
(
identifier
s
symbol
,
identifier
e
symbol
)
symbol
(
symbol
(
identifier
s
symbol
)
symbol
.
identifier
find
symbol
(
identifier
e
symbol
)
symbol
=
symbol
(
identifier
s
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
SORT
symbol
(
identifier
c
symbol
)
identifier
sort
symbol
(
symbol
(
identifier
c
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
,
symbol
(
identifier
c
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
MT
symbol
(
identifier
a
symbol
,
identifier
b
symbol
,
identifier
c
symbol
)
identifier
MP
symbol
(
identifier
a
symbol
,
identifier
MP
symbol
(
identifier
b
symbol
,
identifier
c
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
T1
identifier
first
identifier
NewLine
identifier
define
identifier
T2
identifier
second
symbol
.
identifier
first
identifier
NewLine
identifier
define
identifier
T3
identifier
second
symbol
.
identifier
second
identifier
NewLine
identifier
NewLine
identifier
define
identifier
FOR
symbol
(
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
symbol
(
identifier
a
symbol
)
symbol
;
identifier
i
symbol
<
symbol
(
identifier
b
symbol
)
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
identifier
NewLine
identifier
define
identifier
REP
symbol
(
identifier
i
symbol
,
identifier
n
symbol
)
identifier
FOR
symbol
(
identifier
i
symbol
,
integerConstant
0
symbol
,
identifier
n
symbol
)
identifier
NewLine
identifier
define
identifier
MOD
integerConstant
1000000007
identifier
NewLine
identifier
NewLine
keyword
void
identifier
solve
symbol
(
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
s
symbol
;
identifier
NewLine
identifier
string
identifier
str
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
s
symbol
>
symbol
>
identifier
str
symbol
;
identifier
NewLine
keyword
int
identifier
t
symbol
=
integerConstant
0
symbol
,
identifier
ans
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
REP
symbol
(
identifier
i
symbol
,
identifier
s
symbol
+
integerConstant
1
symbol
)
symbol
{
identifier
NewLine
identifier
t
symbol
+
symbol
=
identifier
str
symbol
[
identifier
i
symbol
]
symbol
-
integerConstant
0
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
t
symbol
=
symbol
=
integerConstant
0
symbol
)
symbol
{
identifier
NewLine
identifier
t
symbol
+
symbol
+
symbol
;
identifier
NewLine
identifier
ans
symbol
+
symbol
+
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
t
symbol
-
symbol
-
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
printf
symbol
(
stringConstant
%d\n
symbol
,
identifier
ans
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
symbol
{
identifier
NewLine
identifier
freopen
symbol
(
stringConstant
in.txt
symbol
,
stringConstant
r
symbol
,
identifier
stdin
symbol
)
symbol
;
identifier
NewLine
identifier
freopen
symbol
(
stringConstant
out.txt
symbol
,
stringConstant
w
symbol
,
identifier
stdout
symbol
)
symbol
;
identifier
NewLine
keyword
int
identifier
T
symbol
;
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
T
symbol
)
symbol
;
identifier
NewLine
identifier
REP
symbol
(
identifier
t
symbol
,
identifier
T
symbol
)
symbol
{
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: 
symbol
,
identifier
t
symbol
+
integerConstant
1
symbol
)
symbol
;
identifier
NewLine
identifier
solve
symbol
(
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
symbol
}
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/UminchuR.1.cpp file...

identifier
include
symbol
<
identifier
vector
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
list
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
map
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
set
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
deque
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
stack
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
bitset
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
algorithm
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
functional
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
numeric
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
utility
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
sstream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
queue
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
iostream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
iomanip
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstdio
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cmath
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstdlib
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cctype
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
string
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstring
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
ctime
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
fstream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
stdio
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
complex
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstdint
symbol
>
identifier
NewLine
identifier
NewLine
identifier
define
identifier
M
identifier
PI
integerConstant
3
symbol
.
integerConstant
14159265358979323846
identifier
NewLine
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
identifier
inline
keyword
int
identifier
toInt
symbol
(
identifier
string
identifier
s
symbol
)
symbol
{
keyword
int
identifier
v
symbol
;
identifier
istringstream
identifier
sin
symbol
(
identifier
s
symbol
)
symbol
;
identifier
sin
symbol
>
symbol
>
identifier
v
symbol
;
keyword
return
identifier
v
symbol
;
symbol
}
identifier
NewLine
identifier
template
symbol
<
keyword
class
identifier
T
symbol
>
identifier
inline
identifier
string
identifier
toString
symbol
(
identifier
T
identifier
x
symbol
)
symbol
{
identifier
ostringstream
identifier
sout
symbol
;
identifier
sout
symbol
<
symbol
<
identifier
x
symbol
;
keyword
return
identifier
sout
symbol
.
identifier
str
symbol
(
symbol
)
symbol
;
symbol
}
identifier
NewLine
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
keyword
int
symbol
>
identifier
VI
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
identifier
VI
symbol
>
identifier
VVI
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
identifier
string
symbol
>
identifier
VS
symbol
;
identifier
NewLine
identifier
typedef
identifier
pair
symbol
<
keyword
int
symbol
,
keyword
int
symbol
>
identifier
PII
symbol
;
identifier
NewLine
identifier
typedef
identifier
pair
symbol
<
keyword
int
symbol
,
identifier
PII
symbol
>
identifier
TIII
symbol
;
identifier
NewLine
identifier
typedef
identifier
long
identifier
long
identifier
LL
symbol
;
identifier
NewLine
identifier
typedef
identifier
unsigned
identifier
long
identifier
long
identifier
ULL
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
identifier
LL
symbol
>
identifier
VLL
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
identifier
VLL
symbol
>
identifier
VVLL
symbol
;
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
define
identifier
ALL
symbol
(
identifier
a
symbol
)
symbol
(
identifier
a
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
,
symbol
(
identifier
a
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
identifier
NewLine
identifier
define
identifier
RALL
symbol
(
identifier
a
symbol
)
symbol
(
identifier
a
symbol
)
symbol
.
identifier
rbegin
symbol
(
symbol
)
symbol
,
symbol
(
identifier
a
symbol
)
symbol
.
identifier
rend
symbol
(
symbol
)
identifier
NewLine
identifier
define
identifier
PB
identifier
push
identifier
back
identifier
NewLine
identifier
define
identifier
MP
identifier
make
identifier
pair
identifier
NewLine
identifier
define
identifier
SZ
symbol
(
identifier
a
symbol
)
keyword
int
symbol
(
symbol
(
identifier
a
symbol
)
symbol
.
identifier
size
symbol
(
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
EACH
symbol
(
identifier
i
symbol
,
identifier
c
symbol
)
identifier
for
symbol
(
identifier
typeof
symbol
(
symbol
(
identifier
c
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
)
identifier
i
symbol
=
symbol
(
identifier
c
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
;
identifier
i
symbol
=
symbol
(
identifier
c
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
identifier
NewLine
identifier
define
identifier
EXIST
symbol
(
identifier
s
symbol
,
identifier
e
symbol
)
symbol
(
symbol
(
identifier
s
symbol
)
symbol
.
identifier
find
symbol
(
identifier
e
symbol
)
symbol
=
symbol
(
identifier
s
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
SORT
symbol
(
identifier
c
symbol
)
identifier
sort
symbol
(
symbol
(
identifier
c
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
,
symbol
(
identifier
c
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
MT
symbol
(
identifier
a
symbol
,
identifier
b
symbol
,
identifier
c
symbol
)
identifier
MP
symbol
(
identifier
a
symbol
,
identifier
MP
symbol
(
identifier
b
symbol
,
identifier
c
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
T1
identifier
first
identifier
NewLine
identifier
define
identifier
T2
identifier
second
symbol
.
identifier
first
identifier
NewLine
identifier
define
identifier
T3
identifier
second
symbol
.
identifier
second
identifier
NewLine
identifier
NewLine
identifier
define
identifier
FOR
symbol
(
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
symbol
(
identifier
a
symbol
)
symbol
;
identifier
i
symbol
<
symbol
(
identifier
b
symbol
)
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
identifier
NewLine
identifier
define
identifier
REP
symbol
(
identifier
i
symbol
,
identifier
n
symbol
)
identifier
FOR
symbol
(
identifier
i
symbol
,
integerConstant
0
symbol
,
identifier
n
symbol
)
identifier
NewLine
identifier
define
identifier
MOD
integerConstant
1000000007
identifier
NewLine
identifier
NewLine
keyword
void
identifier
solve
symbol
(
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
d
symbol
,
identifier
p
symbol
[
integerConstant
1111
symbol
]
symbol
;
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
d
symbol
)
symbol
;
identifier
NewLine
identifier
REP
symbol
(
identifier
i
symbol
,
identifier
d
symbol
)
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
identifier
p
symbol
+
identifier
i
symbol
)
symbol
;
identifier
NewLine
identifier
sort
symbol
(
identifier
p
symbol
,
identifier
p
symbol
+
identifier
d
symbol
)
symbol
;
identifier
NewLine
keyword
int
identifier
ans
symbol
=
integerConstant
1000
symbol
;
identifier
NewLine
identifier
FOR
symbol
(
identifier
i
symbol
,
integerConstant
1
symbol
,
identifier
p
symbol
[
identifier
d
symbol
-
integerConstant
1
symbol
]
symbol
+
integerConstant
1
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
ans
symbol
=
identifier
i
symbol
;
identifier
NewLine
identifier
REP
symbol
(
identifier
j
symbol
,
identifier
d
symbol
)
identifier
ans
symbol
+
symbol
=
symbol
(
identifier
p
symbol
[
identifier
j
symbol
]
symbol
-
integerConstant
1
symbol
)
symbol
/
identifier
i
symbol
;
identifier
NewLine
identifier
ans
symbol
=
identifier
min
symbol
(
identifier
ans
symbol
,
identifier
ans
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
printf
symbol
(
stringConstant
%d\n
symbol
,
identifier
ans
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
symbol
{
identifier
NewLine
identifier
freopen
symbol
(
stringConstant
in.txt
symbol
,
stringConstant
r
symbol
,
identifier
stdin
symbol
)
symbol
;
identifier
NewLine
identifier
freopen
symbol
(
stringConstant
out.txt
symbol
,
stringConstant
w
symbol
,
identifier
stdout
symbol
)
symbol
;
identifier
NewLine
keyword
int
identifier
T
symbol
;
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
T
symbol
)
symbol
;
identifier
NewLine
identifier
REP
symbol
(
identifier
t
symbol
,
identifier
T
symbol
)
symbol
{
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: 
symbol
,
identifier
t
symbol
+
integerConstant
1
symbol
)
symbol
;
identifier
NewLine
identifier
solve
symbol
(
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
symbol
}
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/UminchuR.2.cpp file...

identifier
include
symbol
<
identifier
vector
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
list
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
map
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
set
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
deque
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
stack
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
bitset
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
algorithm
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
functional
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
numeric
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
utility
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
sstream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
queue
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
iostream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
iomanip
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstdio
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cmath
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstdlib
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cctype
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
string
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstring
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
ctime
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
fstream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
stdio
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
complex
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstdint
symbol
>
identifier
NewLine
identifier
NewLine
identifier
define
identifier
M
identifier
PI
integerConstant
3
symbol
.
integerConstant
14159265358979323846
identifier
NewLine
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
identifier
inline
keyword
int
identifier
toInt
symbol
(
identifier
string
identifier
s
symbol
)
symbol
{
keyword
int
identifier
v
symbol
;
identifier
istringstream
identifier
sin
symbol
(
identifier
s
symbol
)
symbol
;
identifier
sin
symbol
>
symbol
>
identifier
v
symbol
;
keyword
return
identifier
v
symbol
;
symbol
}
identifier
NewLine
identifier
template
symbol
<
keyword
class
identifier
T
symbol
>
identifier
inline
identifier
string
identifier
toString
symbol
(
identifier
T
identifier
x
symbol
)
symbol
{
identifier
ostringstream
identifier
sout
symbol
;
identifier
sout
symbol
<
symbol
<
identifier
x
symbol
;
keyword
return
identifier
sout
symbol
.
identifier
str
symbol
(
symbol
)
symbol
;
symbol
}
identifier
NewLine
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
keyword
int
symbol
>
identifier
VI
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
identifier
VI
symbol
>
identifier
VVI
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
identifier
string
symbol
>
identifier
VS
symbol
;
identifier
NewLine
identifier
typedef
identifier
pair
symbol
<
keyword
int
symbol
,
keyword
int
symbol
>
identifier
PII
symbol
;
identifier
NewLine
identifier
typedef
identifier
pair
symbol
<
keyword
int
symbol
,
identifier
PII
symbol
>
identifier
TIII
symbol
;
identifier
NewLine
identifier
typedef
identifier
long
identifier
long
identifier
LL
symbol
;
identifier
NewLine
identifier
typedef
identifier
unsigned
identifier
long
identifier
long
identifier
ULL
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
identifier
LL
symbol
>
identifier
VLL
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
identifier
VLL
symbol
>
identifier
VVLL
symbol
;
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
define
identifier
ALL
symbol
(
identifier
a
symbol
)
symbol
(
identifier
a
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
,
symbol
(
identifier
a
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
identifier
NewLine
identifier
define
identifier
RALL
symbol
(
identifier
a
symbol
)
symbol
(
identifier
a
symbol
)
symbol
.
identifier
rbegin
symbol
(
symbol
)
symbol
,
symbol
(
identifier
a
symbol
)
symbol
.
identifier
rend
symbol
(
symbol
)
identifier
NewLine
identifier
define
identifier
PB
identifier
push
identifier
back
identifier
NewLine
identifier
define
identifier
MP
identifier
make
identifier
pair
identifier
NewLine
identifier
define
identifier
SZ
symbol
(
identifier
a
symbol
)
keyword
int
symbol
(
symbol
(
identifier
a
symbol
)
symbol
.
identifier
size
symbol
(
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
EACH
symbol
(
identifier
i
symbol
,
identifier
c
symbol
)
identifier
for
symbol
(
identifier
typeof
symbol
(
symbol
(
identifier
c
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
)
identifier
i
symbol
=
symbol
(
identifier
c
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
;
identifier
i
symbol
=
symbol
(
identifier
c
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
identifier
NewLine
identifier
define
identifier
EXIST
symbol
(
identifier
s
symbol
,
identifier
e
symbol
)
symbol
(
symbol
(
identifier
s
symbol
)
symbol
.
identifier
find
symbol
(
identifier
e
symbol
)
symbol
=
symbol
(
identifier
s
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
SORT
symbol
(
identifier
c
symbol
)
identifier
sort
symbol
(
symbol
(
identifier
c
symbol
)
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
,
symbol
(
identifier
c
symbol
)
symbol
.
identifier
end
symbol
(
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
MT
symbol
(
identifier
a
symbol
,
identifier
b
symbol
,
identifier
c
symbol
)
identifier
MP
symbol
(
identifier
a
symbol
,
identifier
MP
symbol
(
identifier
b
symbol
,
identifier
c
symbol
)
symbol
)
identifier
NewLine
identifier
define
identifier
T1
identifier
first
identifier
NewLine
identifier
define
identifier
T2
identifier
second
symbol
.
identifier
first
identifier
NewLine
identifier
define
identifier
T3
identifier
second
symbol
.
identifier
second
identifier
NewLine
identifier
NewLine
identifier
define
identifier
FOR
symbol
(
identifier
i
symbol
,
identifier
a
symbol
,
identifier
b
symbol
)
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
symbol
(
identifier
a
symbol
)
symbol
;
identifier
i
symbol
<
symbol
(
identifier
b
symbol
)
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
identifier
NewLine
identifier
define
identifier
REP
symbol
(
identifier
i
symbol
,
identifier
n
symbol
)
identifier
FOR
symbol
(
identifier
i
symbol
,
integerConstant
0
symbol
,
identifier
n
symbol
)
identifier
NewLine
identifier
define
identifier
MOD
integerConstant
1000000007
identifier
NewLine
identifier
NewLine
keyword
char
identifier
str
symbol
[
integerConstant
10001
symbol
]
symbol
;
identifier
NewLine
keyword
int
identifier
mul
symbol
[
integerConstant
8
symbol
]
symbol
[
integerConstant
8
symbol
]
symbol
;
identifier
NewLine
identifier
NewLine
keyword
void
identifier
init
symbol
(
symbol
)
symbol
{
identifier
NewLine
identifier
memset
symbol
(
identifier
mul
symbol
,
symbol
-
integerConstant
1
symbol
,
identifier
sizeof
symbol
(
identifier
mul
symbol
)
symbol
)
symbol
;
identifier
NewLine
identifier
mul
symbol
[
integerConstant
0
symbol
]
symbol
[
integerConstant
0
symbol
]
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
mul
symbol
[
integerConstant
0
symbol
]
symbol
[
integerConstant
1
symbol
]
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
identifier
mul
symbol
[
integerConstant
0
symbol
]
symbol
[
integerConstant
2
symbol
]
symbol
=
integerConstant
2
symbol
;
identifier
NewLine
identifier
mul
symbol
[
integerConstant
0
symbol
]
symbol
[
integerConstant
3
symbol
]
symbol
=
integerConstant
3
symbol
;
identifier
NewLine
identifier
mul
symbol
[
integerConstant
1
symbol
]
symbol
[
integerConstant
0
symbol
]
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
identifier
mul
symbol
[
integerConstant
1
symbol
]
symbol
[
integerConstant
1
symbol
]
symbol
=
integerConstant
4
symbol
;
identifier
NewLine
identifier
mul
symbol
[
integerConstant
1
symbol
]
symbol
[
integerConstant
2
symbol
]
symbol
=
integerConstant
3
symbol
;
identifier
NewLine
identifier
mul
symbol
[
integerConstant
1
symbol
]
symbol
[
integerConstant
3
symbol
]
symbol
=
integerConstant
6
symbol
;
identifier
NewLine
identifier
mul
symbol
[
integerConstant
2
symbol
]
symbol
[
integerConstant
0
symbol
]
symbol
=
integerConstant
2
symbol
;
identifier
NewLine
identifier
mul
symbol
[
integerConstant
2
symbol
]
symbol
[
integerConstant
1
symbol
]
symbol
=
integerConstant
7
symbol
;
identifier
NewLine
identifier
mul
symbol
[
integerConstant
2
symbol
]
symbol
[
integerConstant
2
symbol
]
symbol
=
integerConstant
4
symbol
;
identifier
NewLine
identifier
mul
symbol
[
integerConstant
2
symbol
]
symbol
[
integerConstant
3
symbol
]
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
identifier
mul
symbol
[
integerConstant
3
symbol
]
symbol
[
integerConstant
0
symbol
]
symbol
=
integerConstant
3
symbol
;
identifier
NewLine
identifier
mul
symbol
[
integerConstant
3
symbol
]
symbol
[
integerConstant
1
symbol
]
symbol
=
integerConstant
2
symbol
;
identifier
NewLine
identifier
mul
symbol
[
integerConstant
3
symbol
]
symbol
[
integerConstant
2
symbol
]
symbol
=
integerConstant
5
symbol
;
identifier
NewLine
identifier
mul
symbol
[
integerConstant
3
symbol
]
symbol
[
integerConstant
3
symbol
]
symbol
=
integerConstant
4
symbol
;
identifier
NewLine
identifier
REP
symbol
(
identifier
i
symbol
,
integerConstant
4
symbol
)
identifier
FOR
symbol
(
identifier
j
symbol
,
integerConstant
4
symbol
,
integerConstant
8
symbol
)
identifier
mul
symbol
[
identifier
i
symbol
]
symbol
[
identifier
j
symbol
]
symbol
=
symbol
(
identifier
mul
symbol
[
identifier
i
symbol
]
symbol
[
identifier
j
symbol
-
integerConstant
4
symbol
]
symbol
+
integerConstant
4
symbol
)
integerConstant
8
symbol
;
identifier
NewLine
identifier
FOR
symbol
(
identifier
i
symbol
,
integerConstant
4
symbol
,
integerConstant
8
symbol
)
identifier
REP
symbol
(
identifier
j
symbol
,
integerConstant
8
symbol
)
identifier
mul
symbol
[
identifier
i
symbol
]
symbol
[
identifier
j
symbol
]
symbol
=
symbol
(
identifier
mul
symbol
[
identifier
i
symbol
-
integerConstant
4
symbol
]
symbol
[
identifier
j
symbol
]
symbol
+
integerConstant
4
symbol
)
integerConstant
8
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
void
identifier
solve
symbol
(
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
l
symbol
;
identifier
NewLine
identifier
LL
identifier
x
symbol
;
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d%lld
symbol
,
symbol
&
identifier
l
symbol
,
symbol
&
identifier
x
symbol
)
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
str
symbol
;
identifier
NewLine
keyword
int
identifier
dp
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
REP
symbol
(
identifier
i
symbol
,
identifier
l
symbol
)
identifier
str
symbol
[
identifier
i
symbol
]
symbol
=
identifier
str
symbol
[
identifier
i
symbol
]
symbol
-
identifier
i
symbol
+
integerConstant
1
symbol
;
identifier
NewLine
identifier
REP
symbol
(
identifier
i
symbol
,
identifier
l
symbol
)
identifier
dp
symbol
=
identifier
mul
symbol
[
identifier
dp
symbol
]
symbol
[
identifier
str
symbol
[
identifier
i
symbol
]
symbol
]
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
x
integerConstant
4
symbol
=
symbol
=
integerConstant
0
symbol
)
symbol
{
identifier
NewLine
identifier
printf
symbol
(
stringConstant
NO\n
symbol
)
symbol
;
identifier
NewLine
keyword
return
symbol
;
identifier
NewLine
symbol
}
keyword
if
symbol
(
identifier
x
integerConstant
4
symbol
=
symbol
=
integerConstant
1
symbol
|
symbol
|
identifier
x
integerConstant
4
symbol
=
symbol
=
integerConstant
3
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
dp
symbol
=
integerConstant
4
symbol
)
symbol
{
identifier
NewLine
identifier
printf
symbol
(
stringConstant
NO\n
symbol
)
symbol
;
identifier
NewLine
keyword
return
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
keyword
else
symbol
{
keyword
if
symbol
(
identifier
dp
symbol
=
symbol
=
integerConstant
0
symbol
|
symbol
|
identifier
dp
symbol
=
symbol
=
integerConstant
4
symbol
)
symbol
{
identifier
NewLine
identifier
printf
symbol
(
stringConstant
NO\n
symbol
)
symbol
;
identifier
NewLine
keyword
return
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
x
symbol
>
symbol
=
integerConstant
16
symbol
)
identifier
x
symbol
=
identifier
x
integerConstant
4
symbol
+
integerConstant
12
symbol
;
identifier
NewLine
identifier
dp
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
keyword
int
identifier
check
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
identifier
REP
symbol
(
identifier
i
symbol
,
identifier
x
symbol
)
symbol
{
identifier
NewLine
identifier
REP
symbol
(
identifier
j
symbol
,
identifier
l
symbol
)
symbol
{
identifier
NewLine
identifier
dp
symbol
=
identifier
mul
symbol
[
identifier
dp
symbol
]
symbol
[
identifier
str
symbol
[
identifier
j
symbol
]
symbol
]
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
dp
symbol
=
symbol
=
identifier
check
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
check
symbol
=
symbol
=
integerConstant
3
symbol
)
symbol
{
identifier
NewLine
identifier
printf
symbol
(
stringConstant
YES\n
symbol
)
symbol
;
identifier
NewLine
keyword
return
symbol
;
identifier
NewLine
symbol
}
keyword
else
symbol
{
identifier
NewLine
identifier
check
symbol
=
integerConstant
3
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
printf
symbol
(
stringConstant
NO\n
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
symbol
{
identifier
NewLine
identifier
freopen
symbol
(
stringConstant
in.txt
symbol
,
stringConstant
r
symbol
,
identifier
stdin
symbol
)
symbol
;
identifier
NewLine
identifier
freopen
symbol
(
stringConstant
out.txt
symbol
,
stringConstant
w
symbol
,
identifier
stdout
symbol
)
symbol
;
identifier
NewLine
keyword
int
identifier
T
symbol
;
identifier
NewLine
identifier
init
symbol
(
symbol
)
symbol
;
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
T
symbol
)
symbol
;
identifier
NewLine
identifier
REP
symbol
(
identifier
t
symbol
,
identifier
T
symbol
)
symbol
{
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: 
symbol
,
identifier
t
symbol
+
integerConstant
1
symbol
)
symbol
;
identifier
NewLine
identifier
solve
symbol
(
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
symbol
}
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/wo....0.cpp file...

identifier
include
symbol
<
identifier
cstdio
symbol
>
identifier
NewLine
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
cnt
symbol
[
integerConstant
1010
symbol
]
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
S
symbol
;
identifier
NewLine
keyword
char
identifier
ch
symbol
[
integerConstant
1010
symbol
]
symbol
;
identifier
NewLine
keyword
int
identifier
num
symbol
[
integerConstant
1010
symbol
]
symbol
;
identifier
NewLine
identifier
NewLine
identifier
bool
identifier
check
symbol
(
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
sum
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
symbol
=
identifier
S
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
sum
symbol
>
symbol
=
identifier
i
symbol
)
symbol
{
identifier
NewLine
identifier
sum
symbol
+
symbol
=
identifier
num
symbol
[
identifier
i
symbol
]
symbol
;
identifier
NewLine
symbol
}
keyword
else
symbol
{
identifier
NewLine
keyword
return
keyword
false
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
keyword
true
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
T
symbol
;
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
T
symbol
)
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
datano
symbol
=
integerConstant
0
symbol
;
identifier
datano
symbol
<
identifier
T
symbol
;
identifier
datano
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
S
symbol
)
symbol
;
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%s
symbol
,
identifier
ch
symbol
)
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
S
symbol
+
integerConstant
1
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
num
symbol
[
identifier
i
symbol
]
symbol
=
identifier
ch
symbol
[
identifier
i
symbol
]
symbol
-
integerConstant
0
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
x
symbol
=
integerConstant
0
symbol
;
identifier
x
symbol
<
symbol
=
integerConstant
1000
symbol
;
identifier
x
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
num
symbol
[
integerConstant
0
symbol
]
symbol
+
symbol
=
identifier
x
symbol
;
identifier
NewLine
identifier
bool
identifier
flg
symbol
=
identifier
check
symbol
(
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
flg
symbol
)
symbol
{
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: %d\n
symbol
,
identifier
datano
symbol
+
integerConstant
1
symbol
,
identifier
x
symbol
)
symbol
;
identifier
NewLine
identifier
break
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
num
symbol
[
integerConstant
0
symbol
]
symbol
-
symbol
=
identifier
x
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/wo....1.cpp file...

identifier
include
symbol
<
identifier
cstdio
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
algorithm
symbol
>
identifier
NewLine
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
D
symbol
;
identifier
NewLine
keyword
int
identifier
P
symbol
[
integerConstant
1010
symbol
]
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
calc
symbol
(
keyword
int
identifier
M
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
res
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
D
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
tmp
symbol
=
identifier
P
symbol
[
identifier
i
symbol
]
symbol
/
identifier
M
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
P
symbol
[
identifier
i
symbol
]
identifier
M
symbol
=
symbol
=
integerConstant
0
symbol
)
identifier
tmp
symbol
-
symbol
-
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
tmp
symbol
<
integerConstant
0
symbol
)
identifier
tmp
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
res
symbol
+
symbol
=
identifier
tmp
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
identifier
res
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
T
symbol
;
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
T
symbol
)
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
datano
symbol
=
integerConstant
1
symbol
;
identifier
datano
symbol
<
symbol
=
identifier
T
symbol
;
identifier
datano
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
D
symbol
)
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
D
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
identifier
P
symbol
+
identifier
i
symbol
)
symbol
;
identifier
NewLine
keyword
int
identifier
ans
symbol
=
integerConstant
10000
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
1
symbol
;
identifier
i
symbol
<
symbol
=
integerConstant
1000
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
ans
symbol
=
identifier
min
symbol
(
identifier
ans
symbol
,
identifier
i
symbol
+
identifier
calc
symbol
(
identifier
i
symbol
)
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
printf
symbol
(
stringConstant
Case #%d: %d\n
symbol
,
identifier
datano
symbol
,
identifier
ans
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/wo....2.cpp file...

identifier
include
symbol
<
identifier
cstdio
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cassert
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
algorithm
symbol
>
identifier
NewLine
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
table
symbol
[
integerConstant
5
symbol
]
symbol
[
integerConstant
5
symbol
]
symbol
=
symbol
{
identifier
NewLine
symbol
{
integerConstant
0
symbol
,
integerConstant
0
symbol
,
integerConstant
0
symbol
,
integerConstant
0
symbol
,
integerConstant
0
symbol
}
symbol
,
identifier
NewLine
symbol
{
integerConstant
0
symbol
,
integerConstant
1
symbol
,
integerConstant
2
symbol
,
integerConstant
3
symbol
,
integerConstant
4
symbol
}
symbol
,
identifier
NewLine
symbol
{
integerConstant
0
symbol
,
integerConstant
2
symbol
,
symbol
-
integerConstant
1
symbol
,
integerConstant
4
symbol
,
symbol
-
integerConstant
3
symbol
}
symbol
,
identifier
NewLine
symbol
{
integerConstant
0
symbol
,
integerConstant
3
symbol
,
symbol
-
integerConstant
4
symbol
,
symbol
-
integerConstant
1
symbol
,
integerConstant
2
symbol
}
symbol
,
identifier
NewLine
symbol
{
integerConstant
0
symbol
,
integerConstant
4
symbol
,
integerConstant
3
symbol
,
symbol
-
integerConstant
2
symbol
,
symbol
-
integerConstant
1
symbol
}
symbol
}
symbol
;
identifier
NewLine
identifier
NewLine
identifier
long
identifier
long
identifier
min
symbol
(
keyword
int
identifier
x
symbol
,
identifier
long
identifier
long
identifier
y
symbol
)
symbol
{
identifier
NewLine
keyword
return
identifier
min
symbol
(
symbol
(
identifier
long
identifier
long
symbol
)
identifier
x
symbol
,
identifier
y
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
int
identifier
mul
symbol
(
keyword
int
identifier
x
symbol
,
keyword
int
identifier
y
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
a
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
x
symbol
<
integerConstant
0
symbol
)
symbol
{
identifier
NewLine
identifier
x
symbol
=
symbol
-
identifier
x
symbol
;
identifier
NewLine
identifier
a
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
if
symbol
(
identifier
y
symbol
<
integerConstant
0
symbol
)
symbol
{
identifier
NewLine
identifier
y
symbol
=
symbol
-
identifier
y
symbol
;
identifier
NewLine
identifier
a
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
int
identifier
res
symbol
=
identifier
table
symbol
[
identifier
x
symbol
]
symbol
[
identifier
y
symbol
]
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
a
symbol
=
symbol
=
integerConstant
1
symbol
)
identifier
res
symbol
*
symbol
=
symbol
-
integerConstant
1
symbol
;
identifier
NewLine
keyword
return
identifier
res
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
int
identifier
a
symbol
[
integerConstant
10100
symbol
]
symbol
;
identifier
NewLine
keyword
int
identifier
L
symbol
;
identifier
NewLine
identifier
long
identifier
long
identifier
X
symbol
;
identifier
NewLine
keyword
int
identifier
right
symbol
[
integerConstant
10100
symbol
]
symbol
;
identifier
NewLine
keyword
int
identifier
left
symbol
[
integerConstant
10100
symbol
]
symbol
;
identifier
NewLine
keyword
char
identifier
ch
symbol
[
integerConstant
10100
symbol
]
symbol
;
identifier
NewLine
identifier
NewLine
identifier
bool
identifier
solve
symbol
(
symbol
)
symbol
{
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
L
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
ch
symbol
[
identifier
i
symbol
]
symbol
=
symbol
=
identifier
i
symbol
)
identifier
a
symbol
[
identifier
i
symbol
]
symbol
=
integerConstant
2
symbol
;
identifier
NewLine
keyword
else
keyword
if
symbol
(
identifier
ch
symbol
[
identifier
i
symbol
]
symbol
=
symbol
=
identifier
j
symbol
)
identifier
a
symbol
[
identifier
i
symbol
]
symbol
=
integerConstant
3
symbol
;
identifier
NewLine
keyword
else
identifier
a
symbol
[
identifier
i
symbol
]
symbol
=
integerConstant
4
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
left
symbol
[
integerConstant
0
symbol
]
symbol
=
identifier
a
symbol
[
integerConstant
0
symbol
]
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
1
symbol
;
identifier
i
symbol
<
identifier
L
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
identifier
left
symbol
[
identifier
i
symbol
]
symbol
=
identifier
mul
symbol
(
identifier
left
symbol
[
identifier
i
symbol
-
integerConstant
1
symbol
]
symbol
,
identifier
a
symbol
[
identifier
i
symbol
]
symbol
)
symbol
;
identifier
NewLine
identifier
right
symbol
[
identifier
L
symbol
-
integerConstant
1
symbol
]
symbol
=
identifier
a
symbol
[
identifier
L
symbol
-
integerConstant
1
symbol
]
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
identifier
L
symbol
-
integerConstant
2
symbol
;
identifier
i
symbol
>
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
-
symbol
-
symbol
)
identifier
right
symbol
[
identifier
i
symbol
]
symbol
=
identifier
mul
symbol
(
identifier
a
symbol
[
identifier
i
symbol
]
symbol
,
identifier
right
symbol
[
identifier
i
symbol
+
integerConstant
1
symbol
]
symbol
)
symbol
;
identifier
NewLine
identifier
assert
symbol
(
identifier
right
symbol
[
integerConstant
0
symbol
]
symbol
=
symbol
=
identifier
left
symbol
[
identifier
L
symbol
-
integerConstant
1
symbol
]
symbol
)
symbol
;
identifier
NewLine
keyword
int
identifier
all
symbol
=
identifier
left
symbol
[
identifier
L
symbol
-
integerConstant
1
symbol
]
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
all
symbol
=
symbol
=
integerConstant
1
symbol
)
keyword
return
keyword
false
symbol
;
identifier
NewLine
keyword
else
keyword
if
symbol
(
identifier
all
symbol
=
symbol
=
symbol
-
integerConstant
1
symbol
&
symbol
&
symbol
(
identifier
X
integerConstant
2
symbol
=
symbol
=
integerConstant
0
symbol
)
symbol
)
keyword
return
keyword
false
symbol
;
identifier
NewLine
keyword
else
keyword
if
symbol
(
symbol
(
identifier
all
symbol
=
integerConstant
1
symbol
&
symbol
&
identifier
all
symbol
=
symbol
-
integerConstant
1
symbol
)
symbol
&
symbol
&
symbol
(
identifier
X
integerConstant
4
symbol
=
integerConstant
2
symbol
)
symbol
)
keyword
return
keyword
false
symbol
;
identifier
NewLine
identifier
long
identifier
long
identifier
m1
symbol
=
integerConstant
0
symbol
,
identifier
m2
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
keyword
int
identifier
coe
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
x
symbol
=
integerConstant
0
symbol
;
identifier
x
symbol
<
identifier
min
symbol
(
integerConstant
10
symbol
,
identifier
X
symbol
)
symbol
;
identifier
x
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
L
symbol
;
identifier
i
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
mul
symbol
(
identifier
coe
symbol
,
identifier
left
symbol
[
identifier
i
symbol
]
symbol
)
symbol
=
symbol
=
integerConstant
2
symbol
)
symbol
{
identifier
NewLine
identifier
m1
symbol
=
symbol
(
identifier
long
identifier
long
symbol
)
identifier
x
symbol
*
identifier
L
symbol
+
symbol
(
identifier
i
symbol
+
integerConstant
1
symbol
)
symbol
;
identifier
NewLine
identifier
goto
identifier
ed
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
coe
symbol
=
identifier
mul
symbol
(
identifier
coe
symbol
,
identifier
all
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
ed
symbol
;
identifier
NewLine
identifier
coe
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
x
symbol
=
integerConstant
0
symbol
;
identifier
x
symbol
<
identifier
min
symbol
(
integerConstant
10
symbol
,
identifier
X
symbol
)
symbol
;
identifier
x
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
identifier
L
symbol
-
integerConstant
1
symbol
;
identifier
i
symbol
>
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
-
symbol
-
symbol
)
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
mul
symbol
(
identifier
right
symbol
[
identifier
i
symbol
]
symbol
,
identifier
coe
symbol
)
symbol
=
symbol
=
integerConstant
4
symbol
)
symbol
{
identifier
NewLine
identifier
m2
symbol
=
symbol
(
identifier
long
identifier
long
symbol
)
identifier
x
symbol
*
identifier
L
symbol
+
symbol
(
identifier
L
symbol
-
identifier
i
symbol
)
symbol
;
identifier
NewLine
identifier
goto
identifier
ed2
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
coe
symbol
=
identifier
mul
symbol
(
identifier
all
symbol
,
identifier
coe
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
ed2
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
m1
symbol
=
symbol
=
integerConstant
0
symbol
|
symbol
|
identifier
m2
symbol
=
symbol
=
integerConstant
0
symbol
)
keyword
return
keyword
false
symbol
;
identifier
NewLine
identifier
long
identifier
long
identifier
tlen
symbol
=
symbol
(
identifier
long
identifier
long
symbol
)
identifier
X
symbol
*
identifier
L
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
tlen
symbol
>
identifier
m1
symbol
+
identifier
m2
symbol
)
keyword
return
keyword
true
symbol
;
identifier
NewLine
keyword
return
keyword
false
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
symbol
{
identifier
NewLine
keyword
int
identifier
T
symbol
;
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d
symbol
,
symbol
&
identifier
T
symbol
)
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
datano
symbol
=
integerConstant
1
symbol
;
identifier
datano
symbol
<
symbol
=
identifier
T
symbol
;
identifier
datano
symbol
+
symbol
+
symbol
)
symbol
{
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%d%lld
symbol
,
symbol
&
identifier
L
symbol
,
symbol
&
identifier
X
symbol
)
symbol
;
identifier
NewLine
identifier
scanf
symbol
(
stringConstant
%s
symbol
,
identifier
ch
symbol
)
symbol
;
identifier
NewLine
identifier
bool
identifier
flg
symbol
=
identifier
solve
symbol
(
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
flg
symbol
)
identifier
printf
symbol
(
stringConstant
Case #%d: YES\n
symbol
,
identifier
datano
symbol
)
symbol
;
identifier
NewLine
keyword
else
identifier
printf
symbol
(
stringConstant
Case #%d: NO\n
symbol
,
identifier
datano
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/yswtt.0.cpp file...

identifier
include
symbol
<
identifier
iostream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
algorithm
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
string
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
vector
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstring
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstdio
symbol
>
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
int
identifier
tt
symbol
;
identifier
NewLine
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
tt
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
t
symbol
=
integerConstant
1
symbol
;
identifier
t
symbol
<
symbol
=
identifier
tt
symbol
;
symbol
+
symbol
+
identifier
t
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
int
identifier
s
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
s
symbol
;
identifier
NewLine
keyword
char
identifier
c
symbol
;
identifier
NewLine
keyword
int
identifier
res
symbol
=
integerConstant
0
symbol
,
identifier
cur
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
symbol
=
identifier
s
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
c
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
cur
symbol
<
identifier
i
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
res
symbol
+
symbol
=
identifier
i
symbol
-
identifier
cur
symbol
;
identifier
NewLine
identifier
cur
symbol
=
identifier
i
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
cur
symbol
+
symbol
=
identifier
c
symbol
-
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
cout
symbol
<
symbol
<
stringConstant
Case #
symbol
<
symbol
<
identifier
t
symbol
<
symbol
<
stringConstant
: 
symbol
<
symbol
<
identifier
res
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/yswtt.1.cpp file...

identifier
include
symbol
<
identifier
iostream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
algorithm
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
string
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
vector
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstring
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstdio
symbol
>
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
p
symbol
[
integerConstant
1005
symbol
]
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
int
identifier
tt
symbol
;
identifier
NewLine
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
tt
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
t
symbol
=
integerConstant
1
symbol
;
identifier
t
symbol
<
symbol
=
identifier
tt
symbol
;
symbol
+
symbol
+
identifier
t
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
int
identifier
d
symbol
,
identifier
res
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
d
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
d
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
p
symbol
[
identifier
i
symbol
]
symbol
;
identifier
NewLine
identifier
res
symbol
=
identifier
max
symbol
(
identifier
res
symbol
,
identifier
p
symbol
[
identifier
i
symbol
]
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
1
symbol
;
identifier
i
symbol
<
identifier
res
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
int
identifier
cur
symbol
=
identifier
i
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
j
symbol
=
integerConstant
0
symbol
;
identifier
j
symbol
<
identifier
d
symbol
;
symbol
+
symbol
+
identifier
j
symbol
)
identifier
NewLine
keyword
if
symbol
(
identifier
p
symbol
[
identifier
j
symbol
]
symbol
>
identifier
i
symbol
)
identifier
NewLine
identifier
cur
symbol
+
symbol
=
symbol
(
identifier
p
symbol
[
identifier
j
symbol
]
symbol
-
integerConstant
1
symbol
)
symbol
/
identifier
i
symbol
;
identifier
NewLine
identifier
res
symbol
=
identifier
min
symbol
(
identifier
res
symbol
,
identifier
cur
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
cout
symbol
<
symbol
<
stringConstant
Case #
symbol
<
symbol
<
identifier
t
symbol
<
symbol
<
stringConstant
: 
symbol
<
symbol
<
identifier
res
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/yswtt.2.cpp file...

identifier
include
symbol
<
identifier
iostream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
algorithm
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
string
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
vector
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstring
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
cstdio
symbol
>
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
func
symbol
(
keyword
int
identifier
a
symbol
,
keyword
int
identifier
b
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
int
identifier
neg
symbol
=
symbol
(
identifier
a
symbol
*
identifier
b
symbol
>
integerConstant
0
symbol
)
integerConstant
1
symbol
-
integerConstant
1
symbol
;
identifier
NewLine
keyword
int
identifier
res
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
a
symbol
=
identifier
abs
symbol
(
identifier
a
symbol
)
symbol
;
identifier
NewLine
identifier
b
symbol
=
identifier
abs
symbol
(
identifier
b
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
a
symbol
=
symbol
=
integerConstant
1
symbol
)
identifier
NewLine
identifier
res
symbol
=
identifier
b
symbol
;
identifier
NewLine
keyword
else
keyword
if
symbol
(
identifier
b
symbol
=
symbol
=
integerConstant
1
symbol
)
identifier
NewLine
identifier
res
symbol
=
identifier
a
symbol
;
identifier
NewLine
keyword
else
keyword
if
symbol
(
identifier
a
symbol
=
symbol
=
identifier
b
symbol
)
identifier
NewLine
identifier
res
symbol
=
symbol
-
integerConstant
1
symbol
;
identifier
NewLine
keyword
else
keyword
if
symbol
(
identifier
b
symbol
-
integerConstant
2
symbol
=
symbol
=
symbol
(
symbol
(
identifier
a
symbol
-
integerConstant
1
symbol
)
integerConstant
3
symbol
)
symbol
)
identifier
NewLine
identifier
res
symbol
=
integerConstant
9
symbol
-
identifier
a
symbol
-
identifier
b
symbol
;
identifier
NewLine
keyword
else
identifier
NewLine
identifier
res
symbol
=
identifier
a
symbol
+
identifier
b
symbol
-
integerConstant
9
symbol
;
identifier
NewLine
identifier
res
symbol
*
symbol
=
identifier
neg
symbol
;
identifier
NewLine
keyword
return
identifier
res
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
int
identifier
p
symbol
[
integerConstant
1005
symbol
]
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
int
identifier
tt
symbol
;
identifier
NewLine
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
tt
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
t
symbol
=
integerConstant
1
symbol
;
identifier
t
symbol
<
symbol
=
identifier
tt
symbol
;
symbol
+
symbol
+
identifier
t
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
long
identifier
long
identifier
l
symbol
,
identifier
x
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
l
symbol
>
symbol
>
identifier
x
symbol
;
identifier
NewLine
identifier
NewLine
identifier
string
identifier
s
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
s
symbol
;
identifier
NewLine
keyword
int
identifier
stage
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
keyword
int
identifier
cur
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
identifier
s
symbol
.
identifier
length
symbol
(
symbol
)
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
identifier
NewLine
identifier
cur
symbol
=
identifier
func
symbol
(
identifier
cur
symbol
,
identifier
s
symbol
[
identifier
i
symbol
]
symbol
-
identifier
i
symbol
+
integerConstant
2
symbol
)
symbol
;
identifier
NewLine
identifier
string
identifier
res
symbol
=
stringConstant
NO
symbol
;
identifier
NewLine
keyword
if
symbol
(
symbol
(
symbol
(
identifier
cur
symbol
=
symbol
=
symbol
-
integerConstant
1
symbol
)
symbol
&
symbol
&
symbol
(
identifier
x
integerConstant
2
symbol
=
symbol
=
integerConstant
1
symbol
)
symbol
)
symbol
|
symbol
|
symbol
(
symbol
(
identifier
abs
symbol
(
identifier
cur
symbol
)
symbol
=
integerConstant
1
symbol
)
symbol
&
symbol
&
symbol
(
identifier
x
integerConstant
4
symbol
=
symbol
=
integerConstant
2
symbol
)
symbol
)
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
int
identifier
ind
symbol
=
integerConstant
0
symbol
,
identifier
num
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
cur
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
keyword
while
symbol
(
keyword
true
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
cur
symbol
=
identifier
func
symbol
(
identifier
cur
symbol
,
identifier
s
symbol
[
identifier
ind
symbol
]
symbol
-
identifier
i
symbol
+
integerConstant
2
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
symbol
(
identifier
cur
symbol
=
symbol
=
integerConstant
2
symbol
)
symbol
&
symbol
&
symbol
(
identifier
stage
symbol
=
symbol
=
integerConstant
0
symbol
)
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
stage
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
identifier
cur
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
else
keyword
if
symbol
(
symbol
(
identifier
cur
symbol
=
symbol
=
integerConstant
3
symbol
)
symbol
&
symbol
&
symbol
(
identifier
stage
symbol
=
symbol
=
integerConstant
1
symbol
)
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
stage
symbol
=
integerConstant
2
symbol
;
identifier
NewLine
identifier
cur
symbol
=
integerConstant
1
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
else
keyword
if
symbol
(
symbol
(
identifier
cur
symbol
=
symbol
=
integerConstant
4
symbol
)
symbol
&
symbol
&
symbol
(
identifier
stage
symbol
=
symbol
=
integerConstant
2
symbol
)
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
res
symbol
=
stringConstant
YES
symbol
;
identifier
NewLine
identifier
break
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
ind
symbol
+
symbol
+
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
ind
symbol
=
symbol
=
identifier
s
symbol
.
identifier
length
symbol
(
symbol
)
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
num
symbol
+
symbol
+
symbol
;
identifier
NewLine
identifier
ind
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
keyword
if
symbol
(
symbol
(
identifier
num
symbol
>
symbol
=
integerConstant
12
symbol
)
symbol
|
symbol
|
symbol
(
identifier
num
symbol
>
symbol
=
identifier
x
symbol
)
symbol
)
identifier
NewLine
identifier
break
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
cout
symbol
<
symbol
<
stringConstant
Case #
symbol
<
symbol
<
identifier
t
symbol
<
symbol
<
stringConstant
: 
symbol
<
symbol
<
identifier
res
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/ZhSh.0.cpp file...

identifier
include
symbol
<
identifier
iostream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
iterator
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
fstream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
string
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
vector
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
set
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
map
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
algorithm
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
queue
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
stack
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
string
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
stdio
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
iomanip
symbol
>
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
int
identifier
caseCount
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
caseCount
symbol
;
identifier
NewLine
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
csIx
symbol
=
integerConstant
1
symbol
;
identifier
csIx
symbol
<
symbol
=
identifier
caseCount
symbol
;
symbol
+
symbol
+
identifier
csIx
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
int
identifier
S
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
S
symbol
;
identifier
NewLine
identifier
string
identifier
ss
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
ss
symbol
;
identifier
NewLine
identifier
NewLine
keyword
int
identifier
currStanding
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
keyword
int
identifier
added
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
s
symbol
=
integerConstant
0
symbol
;
identifier
s
symbol
<
symbol
=
identifier
S
symbol
;
symbol
+
symbol
+
identifier
s
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
int
identifier
needToAdd
symbol
=
identifier
max
symbol
(
identifier
s
symbol
-
identifier
currStanding
symbol
,
integerConstant
0
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
identifier
currStanding
symbol
+
symbol
=
identifier
ss
symbol
[
identifier
s
symbol
]
symbol
-
integerConstant
0
symbol
;
identifier
NewLine
identifier
currStanding
symbol
+
symbol
=
identifier
needToAdd
symbol
;
identifier
NewLine
identifier
added
symbol
+
symbol
=
identifier
needToAdd
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
cout
symbol
<
symbol
<
stringConstant
Case #
symbol
<
symbol
<
identifier
csIx
symbol
<
symbol
<
stringConstant
: 
symbol
<
symbol
<
identifier
added
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/ZhSh.1.cpp file...

identifier
include
symbol
<
identifier
iostream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
iterator
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
fstream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
string
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
vector
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
set
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
map
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
algorithm
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
queue
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
stack
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
string
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
stdio
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
iomanip
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
assert
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
const
identifier
long
identifier
long
identifier
MOD
symbol
=
integerConstant
1000000007
identifier
LL
symbol
;
identifier
NewLine
identifier
NewLine
identifier
define
identifier
REP
symbol
(
identifier
i
symbol
,
identifier
N
symbol
)
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
symbol
(
identifier
N
symbol
)
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
identifier
NewLine
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
keyword
int
symbol
>
identifier
vi
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
identifier
vi
symbol
>
identifier
vvi
symbol
;
identifier
NewLine
identifier
typedef
identifier
unsigned
keyword
int
identifier
ui
symbol
;
identifier
NewLine
identifier
typedef
identifier
long
identifier
long
identifier
ll
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
identifier
ll
symbol
>
identifier
vll
symbol
;
identifier
NewLine
identifier
NewLine
identifier
template
symbol
<
keyword
class
identifier
T
symbol
>
keyword
void
identifier
printImpl
symbol
(
identifier
const
identifier
vector
symbol
<
identifier
T
symbol
>
symbol
&
identifier
coll
symbol
)
symbol
{
identifier
copy
symbol
(
identifier
coll
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
,
identifier
coll
symbol
.
identifier
end
symbol
(
symbol
)
symbol
,
identifier
ostream
identifier
iterator
symbol
<
identifier
T
symbol
>
symbol
(
identifier
cout
symbol
,
symbol
)
symbol
)
symbol
;
identifier
cout
symbol
<
symbol
<
identifier
endl
symbol
;
symbol
}
identifier
NewLine
identifier
template
symbol
<
keyword
class
identifier
T
symbol
,
keyword
int
identifier
N
symbol
>
keyword
void
identifier
printImpl
symbol
(
identifier
T
symbol
(
symbol
&
identifier
coll
symbol
)
symbol
[
identifier
N
symbol
]
symbol
)
symbol
{
identifier
copy
symbol
(
identifier
coll
symbol
,
identifier
coll
symbol
+
identifier
N
symbol
,
identifier
ostream
identifier
iterator
symbol
<
identifier
T
symbol
>
symbol
(
identifier
cout
symbol
,
symbol
)
symbol
)
symbol
;
identifier
cout
symbol
<
symbol
<
identifier
endl
symbol
;
symbol
}
identifier
NewLine
identifier
template
symbol
<
keyword
class
identifier
Key
symbol
,
keyword
class
identifier
Value
symbol
>
keyword
void
identifier
printImpl
symbol
(
identifier
const
identifier
map
symbol
<
identifier
Key
symbol
,
identifier
Value
symbol
>
symbol
&
identifier
data
symbol
)
symbol
{
identifier
typename
identifier
map
symbol
<
identifier
Key
symbol
,
identifier
Value
symbol
>
identifier
const
identifier
iterator
identifier
it
symbol
;
identifier
for
symbol
(
identifier
it
symbol
=
identifier
data
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
;
identifier
it
symbol
=
identifier
data
symbol
.
identifier
end
symbol
(
symbol
)
symbol
;
symbol
+
symbol
+
identifier
it
symbol
)
symbol
{
identifier
cout
symbol
<
symbol
<
identifier
it
symbol
-
symbol
>
identifier
first
symbol
<
symbol
<
stringConstant
:
symbol
<
symbol
<
identifier
it
symbol
-
symbol
>
identifier
second
symbol
<
symbol
<
identifier
endl
symbol
;
symbol
}
symbol
}
identifier
NewLine
identifier
template
symbol
<
keyword
class
identifier
T
symbol
>
keyword
void
identifier
printImpl
symbol
(
identifier
const
identifier
T
symbol
&
identifier
data
symbol
)
symbol
{
identifier
cout
symbol
<
symbol
<
identifier
data
symbol
<
symbol
<
identifier
endl
symbol
;
symbol
}
identifier
NewLine
identifier
NewLine
identifier
define
identifier
DEBUGPRINT
identifier
NewLine
identifier
ifdef
identifier
DEBUGPRINT
identifier
NewLine
identifier
define
identifier
print
symbol
(
identifier
x
symbol
)
identifier
cout
symbol
<
symbol
<
identifier
x
stringConstant
 = 
symbol
;
identifier
printImpl
symbol
(
identifier
x
symbol
)
symbol
;
identifier
NewLine
keyword
else
identifier
NewLine
identifier
define
identifier
print
symbol
(
identifier
x
symbol
)
symbol
;
identifier
NewLine
identifier
endif
identifier
NewLine
identifier
NewLine
keyword
int
identifier
stepsToAchieve
symbol
(
identifier
const
identifier
vi
symbol
&
identifier
a
symbol
,
keyword
int
identifier
minMax
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
int
identifier
res
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
REP
symbol
(
identifier
i
symbol
,
identifier
a
symbol
.
identifier
size
symbol
(
symbol
)
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
res
symbol
+
symbol
=
symbol
(
identifier
a
symbol
[
identifier
i
symbol
]
symbol
-
integerConstant
1
symbol
)
symbol
/
identifier
minMax
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
return
identifier
res
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
int
identifier
getMinMaxAfterSmall
symbol
(
identifier
const
identifier
vi
symbol
&
identifier
a
symbol
,
keyword
int
identifier
steps
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
res
symbol
=
integerConstant
1
symbol
;
identifier
res
symbol
<
symbol
=
integerConstant
1000
symbol
;
symbol
+
symbol
+
identifier
res
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
stepsToAchieve
symbol
(
identifier
a
symbol
,
identifier
res
symbol
)
symbol
<
symbol
=
identifier
steps
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
return
identifier
res
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
return
integerConstant
1000
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
int
identifier
getMinMaxAfter
symbol
(
keyword
int
identifier
steps
symbol
,
identifier
const
identifier
vi
symbol
&
identifier
sta
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
sta
symbol
[
integerConstant
1
symbol
]
symbol
<
symbol
=
identifier
steps
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
return
integerConstant
1
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
int
identifier
l
symbol
=
integerConstant
1
symbol
,
identifier
r
symbol
=
integerConstant
1000
symbol
;
identifier
NewLine
identifier
assert
symbol
(
identifier
sta
symbol
[
identifier
r
symbol
]
symbol
<
symbol
=
identifier
steps
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
keyword
while
symbol
(
identifier
r
symbol
-
identifier
l
symbol
>
integerConstant
1
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
int
identifier
m
symbol
=
symbol
(
identifier
l
symbol
+
identifier
r
symbol
)
symbol
/
integerConstant
2
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
sta
symbol
[
identifier
m
symbol
]
symbol
>
identifier
steps
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
l
symbol
=
identifier
m
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
else
identifier
NewLine
symbol
{
identifier
NewLine
identifier
r
symbol
=
identifier
m
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
return
identifier
r
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
int
identifier
caseCount
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
caseCount
symbol
;
identifier
NewLine
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
csIx
symbol
=
integerConstant
1
symbol
;
identifier
csIx
symbol
<
symbol
=
identifier
caseCount
symbol
;
symbol
+
symbol
+
identifier
csIx
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
int
identifier
N
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
N
symbol
;
identifier
NewLine
identifier
vi
identifier
a
symbol
(
identifier
N
symbol
)
symbol
;
identifier
NewLine
keyword
int
identifier
total
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
REP
symbol
(
identifier
i
symbol
,
identifier
N
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
a
symbol
[
identifier
i
symbol
]
symbol
;
identifier
NewLine
identifier
total
symbol
+
symbol
=
identifier
a
symbol
[
identifier
i
symbol
]
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
vi
identifier
sta
symbol
(
integerConstant
1001
symbol
)
symbol
;
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
t
symbol
=
integerConstant
1
symbol
;
identifier
t
symbol
<
symbol
=
integerConstant
1000
symbol
;
symbol
+
symbol
+
identifier
t
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
sta
symbol
[
identifier
t
symbol
]
symbol
=
identifier
stepsToAchieve
symbol
(
identifier
a
symbol
,
identifier
t
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
int
identifier
res
symbol
=
integerConstant
1000
symbol
;
identifier
NewLine
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
t
symbol
=
integerConstant
0
symbol
;
identifier
t
symbol
<
symbol
=
integerConstant
1000
symbol
;
symbol
+
symbol
+
identifier
t
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
int
identifier
willNeedSteps
symbol
=
identifier
getMinMaxAfter
symbol
(
identifier
t
symbol
,
identifier
sta
symbol
)
symbol
;
identifier
NewLine
identifier
res
symbol
=
identifier
min
symbol
(
identifier
res
symbol
,
identifier
t
symbol
+
identifier
willNeedSteps
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
cout
symbol
<
symbol
<
stringConstant
Case #
symbol
<
symbol
<
identifier
csIx
symbol
<
symbol
<
stringConstant
: 
symbol
<
symbol
<
identifier
res
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
Processing /home/andy/Desktop/ADSA-SGDE/cstokeniser/data/ZhSh.2.cpp file...

identifier
include
symbol
<
identifier
iostream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
iterator
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
fstream
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
string
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
vector
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
set
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
map
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
algorithm
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
queue
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
stack
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
string
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
stdio
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
iomanip
symbol
>
identifier
NewLine
identifier
include
symbol
<
identifier
assert
symbol
.
identifier
h
symbol
>
identifier
NewLine
identifier
using
identifier
namespace
identifier
std
symbol
;
identifier
NewLine
identifier
NewLine
identifier
NewLine
identifier
const
identifier
long
identifier
long
identifier
MOD
symbol
=
integerConstant
1000000007
identifier
LL
symbol
;
identifier
NewLine
identifier
NewLine
identifier
define
identifier
REP
symbol
(
identifier
i
symbol
,
identifier
N
symbol
)
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
0
symbol
;
identifier
i
symbol
<
symbol
(
identifier
N
symbol
)
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
identifier
NewLine
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
keyword
int
symbol
>
identifier
vi
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
identifier
vi
symbol
>
identifier
vvi
symbol
;
identifier
NewLine
identifier
typedef
identifier
unsigned
keyword
int
identifier
ui
symbol
;
identifier
NewLine
identifier
typedef
identifier
long
identifier
long
identifier
ll
symbol
;
identifier
NewLine
identifier
typedef
identifier
vector
symbol
<
identifier
ll
symbol
>
identifier
vll
symbol
;
identifier
NewLine
identifier
NewLine
identifier
template
symbol
<
keyword
class
identifier
T
symbol
>
keyword
void
identifier
printImpl
symbol
(
identifier
const
identifier
vector
symbol
<
identifier
T
symbol
>
symbol
&
identifier
coll
symbol
)
symbol
{
identifier
copy
symbol
(
identifier
coll
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
,
identifier
coll
symbol
.
identifier
end
symbol
(
symbol
)
symbol
,
identifier
ostream
identifier
iterator
symbol
<
identifier
T
symbol
>
symbol
(
identifier
cout
symbol
,
symbol
)
symbol
)
symbol
;
identifier
cout
symbol
<
symbol
<
identifier
endl
symbol
;
symbol
}
identifier
NewLine
identifier
template
symbol
<
keyword
class
identifier
T
symbol
,
keyword
int
identifier
N
symbol
>
keyword
void
identifier
printImpl
symbol
(
identifier
T
symbol
(
symbol
&
identifier
coll
symbol
)
symbol
[
identifier
N
symbol
]
symbol
)
symbol
{
identifier
copy
symbol
(
identifier
coll
symbol
,
identifier
coll
symbol
+
identifier
N
symbol
,
identifier
ostream
identifier
iterator
symbol
<
identifier
T
symbol
>
symbol
(
identifier
cout
symbol
,
symbol
)
symbol
)
symbol
;
identifier
cout
symbol
<
symbol
<
identifier
endl
symbol
;
symbol
}
identifier
NewLine
identifier
template
symbol
<
keyword
class
identifier
Key
symbol
,
keyword
class
identifier
Value
symbol
>
keyword
void
identifier
printImpl
symbol
(
identifier
const
identifier
map
symbol
<
identifier
Key
symbol
,
identifier
Value
symbol
>
symbol
&
identifier
data
symbol
)
symbol
{
identifier
typename
identifier
map
symbol
<
identifier
Key
symbol
,
identifier
Value
symbol
>
identifier
const
identifier
iterator
identifier
it
symbol
;
identifier
for
symbol
(
identifier
it
symbol
=
identifier
data
symbol
.
identifier
begin
symbol
(
symbol
)
symbol
;
identifier
it
symbol
=
identifier
data
symbol
.
identifier
end
symbol
(
symbol
)
symbol
;
symbol
+
symbol
+
identifier
it
symbol
)
symbol
{
identifier
cout
symbol
<
symbol
<
identifier
it
symbol
-
symbol
>
identifier
first
symbol
<
symbol
<
stringConstant
:
symbol
<
symbol
<
identifier
it
symbol
-
symbol
>
identifier
second
symbol
<
symbol
<
identifier
endl
symbol
;
symbol
}
symbol
}
identifier
NewLine
identifier
template
symbol
<
keyword
class
identifier
T
symbol
>
keyword
void
identifier
printImpl
symbol
(
identifier
const
identifier
T
symbol
&
identifier
data
symbol
)
symbol
{
identifier
cout
symbol
<
symbol
<
identifier
data
symbol
<
symbol
<
identifier
endl
symbol
;
symbol
}
identifier
NewLine
identifier
NewLine
identifier
define
identifier
DEBUGPRINT
identifier
NewLine
identifier
ifdef
identifier
DEBUGPRINT
identifier
NewLine
identifier
define
identifier
print
symbol
(
identifier
x
symbol
)
identifier
cout
symbol
<
symbol
<
identifier
x
stringConstant
 = 
symbol
;
identifier
printImpl
symbol
(
identifier
x
symbol
)
symbol
;
identifier
NewLine
keyword
else
identifier
NewLine
identifier
define
identifier
print
symbol
(
identifier
x
symbol
)
symbol
;
identifier
NewLine
identifier
endif
identifier
NewLine
identifier
NewLine
keyword
int
identifier
char2n
symbol
(
keyword
char
identifier
c
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
c
symbol
=
symbol
=
identifier
i
symbol
)
keyword
return
integerConstant
1
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
c
symbol
=
symbol
=
identifier
j
symbol
)
keyword
return
integerConstant
2
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
c
symbol
=
symbol
=
identifier
k
symbol
)
keyword
return
integerConstant
3
symbol
;
identifier
NewLine
identifier
NewLine
identifier
assert
symbol
(
keyword
false
symbol
)
symbol
;
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
int
identifier
mult
identifier
ijk
symbol
(
keyword
int
identifier
a
symbol
,
keyword
int
identifier
b
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
const
keyword
static
keyword
int
identifier
m
symbol
[
integerConstant
8
symbol
]
symbol
[
integerConstant
8
symbol
]
symbol
=
identifier
NewLine
symbol
{
identifier
NewLine
symbol
{
integerConstant
0
symbol
,
integerConstant
1
symbol
,
integerConstant
2
symbol
,
integerConstant
3
symbol
,
integerConstant
4
symbol
,
integerConstant
5
symbol
,
integerConstant
6
symbol
,
integerConstant
7
symbol
}
symbol
,
identifier
NewLine
symbol
{
integerConstant
1
symbol
,
integerConstant
4
symbol
,
integerConstant
3
symbol
,
integerConstant
6
symbol
,
integerConstant
5
symbol
,
integerConstant
0
symbol
,
integerConstant
7
symbol
,
integerConstant
2
symbol
}
symbol
,
identifier
NewLine
symbol
{
integerConstant
2
symbol
,
integerConstant
7
symbol
,
integerConstant
4
symbol
,
integerConstant
1
symbol
,
integerConstant
6
symbol
,
integerConstant
3
symbol
,
integerConstant
0
symbol
,
integerConstant
5
symbol
}
symbol
,
identifier
NewLine
symbol
{
integerConstant
3
symbol
,
integerConstant
2
symbol
,
integerConstant
5
symbol
,
integerConstant
4
symbol
,
integerConstant
7
symbol
,
integerConstant
6
symbol
,
integerConstant
1
symbol
,
integerConstant
0
symbol
}
symbol
,
identifier
NewLine
symbol
{
integerConstant
4
symbol
,
integerConstant
5
symbol
,
integerConstant
6
symbol
,
integerConstant
7
symbol
,
integerConstant
0
symbol
,
integerConstant
1
symbol
,
integerConstant
2
symbol
,
integerConstant
3
symbol
}
symbol
,
identifier
NewLine
symbol
{
integerConstant
5
symbol
,
integerConstant
0
symbol
,
integerConstant
7
symbol
,
integerConstant
2
symbol
,
integerConstant
1
symbol
,
integerConstant
4
symbol
,
integerConstant
3
symbol
,
integerConstant
6
symbol
}
symbol
,
identifier
NewLine
symbol
{
integerConstant
6
symbol
,
integerConstant
3
symbol
,
integerConstant
0
symbol
,
integerConstant
5
symbol
,
integerConstant
2
symbol
,
integerConstant
7
symbol
,
integerConstant
4
symbol
,
integerConstant
1
symbol
}
symbol
,
identifier
NewLine
symbol
{
integerConstant
7
symbol
,
integerConstant
6
symbol
,
integerConstant
1
symbol
,
integerConstant
0
symbol
,
integerConstant
3
symbol
,
integerConstant
2
symbol
,
integerConstant
5
symbol
,
integerConstant
4
symbol
}
identifier
NewLine
symbol
}
symbol
;
identifier
NewLine
identifier
NewLine
identifier
assert
symbol
(
integerConstant
0
symbol
<
symbol
=
identifier
a
symbol
&
symbol
&
identifier
a
symbol
<
symbol
=
integerConstant
7
symbol
)
symbol
;
identifier
NewLine
identifier
assert
symbol
(
integerConstant
0
symbol
<
symbol
=
identifier
b
symbol
&
symbol
&
identifier
b
symbol
<
symbol
=
integerConstant
7
symbol
)
symbol
;
identifier
NewLine
keyword
return
identifier
m
symbol
[
identifier
a
symbol
]
symbol
[
identifier
b
symbol
]
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
int
identifier
div
identifier
ijk
symbol
(
keyword
int
identifier
a
symbol
,
keyword
int
identifier
b
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
const
keyword
static
keyword
int
identifier
m
symbol
[
integerConstant
8
symbol
]
symbol
[
integerConstant
8
symbol
]
symbol
=
identifier
NewLine
symbol
{
identifier
NewLine
symbol
{
integerConstant
0
symbol
,
integerConstant
1
symbol
,
integerConstant
2
symbol
,
integerConstant
3
symbol
,
integerConstant
4
symbol
,
integerConstant
5
symbol
,
integerConstant
6
symbol
,
integerConstant
7
symbol
}
symbol
,
identifier
NewLine
symbol
{
integerConstant
5
symbol
,
integerConstant
0
symbol
,
integerConstant
7
symbol
,
integerConstant
2
symbol
,
integerConstant
1
symbol
,
integerConstant
4
symbol
,
integerConstant
3
symbol
,
integerConstant
6
symbol
}
symbol
,
identifier
NewLine
symbol
{
integerConstant
6
symbol
,
integerConstant
3
symbol
,
integerConstant
0
symbol
,
integerConstant
5
symbol
,
integerConstant
2
symbol
,
integerConstant
7
symbol
,
integerConstant
4
symbol
,
integerConstant
1
symbol
}
symbol
,
identifier
NewLine
symbol
{
integerConstant
7
symbol
,
integerConstant
6
symbol
,
integerConstant
1
symbol
,
integerConstant
0
symbol
,
integerConstant
3
symbol
,
integerConstant
2
symbol
,
integerConstant
5
symbol
,
integerConstant
4
symbol
}
symbol
,
identifier
NewLine
symbol
{
integerConstant
4
symbol
,
integerConstant
5
symbol
,
integerConstant
6
symbol
,
integerConstant
7
symbol
,
integerConstant
0
symbol
,
integerConstant
1
symbol
,
integerConstant
2
symbol
,
integerConstant
3
symbol
}
symbol
,
identifier
NewLine
symbol
{
integerConstant
1
symbol
,
integerConstant
4
symbol
,
integerConstant
3
symbol
,
integerConstant
6
symbol
,
integerConstant
5
symbol
,
integerConstant
0
symbol
,
integerConstant
7
symbol
,
integerConstant
2
symbol
}
symbol
,
identifier
NewLine
symbol
{
integerConstant
2
symbol
,
integerConstant
7
symbol
,
integerConstant
4
symbol
,
integerConstant
1
symbol
,
integerConstant
6
symbol
,
integerConstant
3
symbol
,
integerConstant
0
symbol
,
integerConstant
5
symbol
}
symbol
,
identifier
NewLine
symbol
{
integerConstant
3
symbol
,
integerConstant
2
symbol
,
integerConstant
5
symbol
,
integerConstant
4
symbol
,
integerConstant
7
symbol
,
integerConstant
6
symbol
,
integerConstant
1
symbol
,
integerConstant
0
symbol
}
identifier
NewLine
symbol
}
symbol
;
identifier
NewLine
identifier
NewLine
identifier
assert
symbol
(
integerConstant
0
symbol
<
symbol
=
identifier
a
symbol
&
symbol
&
identifier
a
symbol
<
symbol
=
integerConstant
7
symbol
)
symbol
;
identifier
NewLine
identifier
assert
symbol
(
integerConstant
0
symbol
<
symbol
=
identifier
b
symbol
&
symbol
&
identifier
b
symbol
<
symbol
=
integerConstant
7
symbol
)
symbol
;
identifier
NewLine
keyword
return
identifier
m
symbol
[
identifier
a
symbol
]
symbol
[
identifier
b
symbol
]
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
int
identifier
pow
identifier
ijk
symbol
(
keyword
int
identifier
a
symbol
,
identifier
ll
identifier
p
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
if
symbol
(
symbol
(
identifier
p
integerConstant
4
symbol
)
symbol
=
symbol
=
integerConstant
0
symbol
)
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
keyword
if
symbol
(
symbol
(
identifier
p
integerConstant
4
symbol
)
symbol
=
symbol
=
integerConstant
1
symbol
)
keyword
return
identifier
a
symbol
;
identifier
NewLine
keyword
if
symbol
(
symbol
(
identifier
p
integerConstant
4
symbol
)
symbol
=
symbol
=
integerConstant
2
symbol
)
keyword
return
identifier
mult
identifier
ijk
symbol
(
identifier
a
symbol
,
identifier
a
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
symbol
(
identifier
p
integerConstant
4
symbol
)
symbol
=
symbol
=
integerConstant
3
symbol
)
keyword
return
identifier
mult
identifier
ijk
symbol
(
identifier
mult
identifier
ijk
symbol
(
identifier
a
symbol
,
identifier
a
symbol
)
symbol
,
identifier
a
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
identifier
assert
symbol
(
keyword
false
symbol
)
symbol
;
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
bool
identifier
possible
symbol
(
identifier
const
identifier
string
symbol
&
identifier
ss
symbol
,
identifier
ll
identifier
X
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
ll
identifier
N
symbol
=
identifier
ss
symbol
.
identifier
length
symbol
(
symbol
)
symbol
;
identifier
NewLine
keyword
int
identifier
totalRes
symbol
=
integerConstant
0
symbol
;
identifier
NewLine
identifier
REP
symbol
(
identifier
i
symbol
,
identifier
N
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
totalRes
symbol
=
identifier
mult
identifier
ijk
symbol
(
identifier
totalRes
symbol
,
identifier
char2n
symbol
(
identifier
ss
symbol
[
identifier
i
symbol
]
symbol
)
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
totalRes
symbol
=
identifier
pow
identifier
ijk
symbol
(
identifier
totalRes
symbol
,
identifier
X
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
totalRes
symbol
=
integerConstant
4
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
return
keyword
false
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
string
identifier
ss4
symbol
=
identifier
ss
symbol
+
identifier
ss
symbol
+
identifier
ss
symbol
+
identifier
ss
symbol
;
identifier
NewLine
identifier
NewLine
identifier
vi
identifier
res
symbol
(
integerConstant
4
symbol
*
identifier
N
symbol
)
symbol
;
identifier
NewLine
identifier
res
symbol
[
integerConstant
0
symbol
]
symbol
=
identifier
char2n
symbol
(
identifier
ss4
symbol
[
integerConstant
0
symbol
]
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
i
symbol
=
integerConstant
1
symbol
;
identifier
i
symbol
<
integerConstant
4
symbol
*
identifier
N
symbol
;
symbol
+
symbol
+
identifier
i
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
res
symbol
[
identifier
i
symbol
]
symbol
=
identifier
mult
identifier
ijk
symbol
(
identifier
res
symbol
[
identifier
i
symbol
-
integerConstant
1
symbol
]
symbol
,
identifier
char2n
symbol
(
identifier
ss4
symbol
[
identifier
i
symbol
]
symbol
)
symbol
)
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
int
identifier
firstIpos
symbol
=
symbol
-
integerConstant
1
symbol
,
identifier
lastKpos
symbol
=
symbol
-
integerConstant
1
symbol
;
identifier
NewLine
identifier
REP
symbol
(
identifier
i
symbol
,
integerConstant
4
symbol
*
identifier
N
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
if
symbol
(
identifier
firstIpos
symbol
=
symbol
=
symbol
-
integerConstant
1
symbol
&
symbol
&
identifier
res
symbol
[
identifier
i
symbol
]
symbol
=
symbol
=
integerConstant
1
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
firstIpos
symbol
=
identifier
i
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
if
symbol
(
identifier
div
identifier
ijk
symbol
(
identifier
res
symbol
[
identifier
i
symbol
]
symbol
,
identifier
res
symbol
[
integerConstant
4
symbol
*
identifier
N
symbol
-
integerConstant
1
symbol
]
symbol
)
symbol
=
symbol
=
integerConstant
3
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
lastKpos
symbol
=
identifier
i
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
if
symbol
(
identifier
firstIpos
symbol
=
symbol
=
symbol
-
integerConstant
1
symbol
|
symbol
|
identifier
lastKpos
symbol
=
symbol
=
symbol
-
integerConstant
1
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
return
keyword
false
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
identifier
ll
identifier
totalLength
symbol
=
identifier
firstIpos
symbol
+
integerConstant
1
symbol
+
symbol
(
integerConstant
4
symbol
*
identifier
N
symbol
-
identifier
lastKpos
symbol
)
symbol
;
identifier
NewLine
keyword
if
symbol
(
identifier
totalLength
symbol
>
identifier
N
symbol
*
identifier
X
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
return
keyword
false
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
return
keyword
true
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
int
identifier
main
symbol
(
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
keyword
int
identifier
caseCount
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
caseCount
symbol
;
identifier
NewLine
identifier
NewLine
identifier
for
symbol
(
keyword
int
identifier
csIx
symbol
=
integerConstant
1
symbol
;
identifier
csIx
symbol
<
symbol
=
identifier
caseCount
symbol
;
symbol
+
symbol
+
identifier
csIx
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
ll
identifier
L
symbol
,
identifier
X
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
L
symbol
>
symbol
>
identifier
X
symbol
;
identifier
NewLine
identifier
string
identifier
ss
symbol
;
identifier
NewLine
identifier
cin
symbol
>
symbol
>
identifier
ss
symbol
;
identifier
NewLine
identifier
NewLine
identifier
bool
identifier
res
symbol
=
identifier
possible
symbol
(
identifier
ss
symbol
,
identifier
X
symbol
)
symbol
;
identifier
NewLine
identifier
NewLine
keyword
if
symbol
(
identifier
res
symbol
)
identifier
NewLine
symbol
{
identifier
NewLine
identifier
cout
symbol
<
symbol
<
stringConstant
Case #
symbol
<
symbol
<
identifier
csIx
symbol
<
symbol
<
stringConstant
: YES
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
keyword
else
identifier
NewLine
symbol
{
identifier
NewLine
identifier
cout
symbol
<
symbol
<
stringConstant
Case #
symbol
<
symbol
<
identifier
csIx
symbol
<
symbol
<
stringConstant
: NO
symbol
<
symbol
<
identifier
endl
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
keyword
return
integerConstant
0
symbol
;
identifier
NewLine
symbol
}
identifier
NewLine
identifier
NewLine
